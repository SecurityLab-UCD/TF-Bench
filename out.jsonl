{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--forkFinally", "signature": "forkFinally :: IO a -> (Either SomeException a -> IO ()) -> IO ThreadId", "code": "forkFinally action and_then =\n  mask $ \\restore ->\n    forkIO $ try (restore action) >>= and_then", "poly_type": "Parametric", "dependencies": "", "locations": [[196, 12], [196, 19], [197, 2], [197, 10], [198, 4], [198, 13], [198, 18], [198, 26], [198, 38], [197, 7], [198, 11], [198, 34]], "locations_src": ["action", "and_then", "mask", "restore", "forkIO", "try", "restore", "action", "and_then", "$", "$", ">>="]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--threadWaitRead", "signature": "threadWaitRead :: Fd -> IO ()", "code": "threadWaitRead fd\n#if defined(mingw32_HOST_OS)\n  -- we have no IO manager implementing threadWaitRead on Windows.\n  -- fdReady does the right thing, but we have to call it in a\n  -- separate thread, otherwise threadWaitRead won't be interruptible,\n  -- and this only works with -threaded.\n  | threaded  = withThread (waitFd fd False)\n  | otherwise = case fd of\n                  0 -> do _ <- hWaitForInput stdin (-1)\n                          return ()\n                        -- hWaitForInput does work properly, but we can only\n                        -- do this for stdin since we know its FD.\n                  _ -> errorWithoutStackTrace \"threadWaitRead requires -threaded on Windows, or use GHC.System.IO.hWaitForInput\"", "poly_type": "Monomorphic", "dependencies": "withThread :: IO a -> IO a\nwaitFd :: Fd -> Bool -> IO ()", "locations": [[261, 15], [267, 4], [267, 16], [267, 28], [267, 35], [268, 4], [268, 21], [269, 31], [269, 45], [270, 26], [273, 23]], "locations_src": ["fd", "threaded", "withThread", "waitFd", "fd", "otherwise", "fd", "hWaitForInput", "stdin", "return", "errorWithoutStackTrace"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--threadWaitWrite", "signature": "threadWaitWrite :: Fd -> IO ()", "code": "threadWaitWrite fd\n#if defined(mingw32_HOST_OS)\n  | threaded  = withThread (waitFd fd True)\n  | otherwise = errorWithoutStackTrace \"threadWaitWrite requires -threaded on Windows\"", "poly_type": "Monomorphic", "dependencies": "withThread :: IO a -> IO a\nwaitFd :: Fd -> Bool -> IO ()", "locations": [[286, 16], [288, 4], [288, 16], [288, 28], [288, 35], [289, 4], [289, 16]], "locations_src": ["fd", "threaded", "withThread", "waitFd", "fd", "otherwise", "errorWithoutStackTrace"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--threadWaitReadSTM", "signature": "threadWaitReadSTM :: Fd -> IO (STM (), IO ())", "code": "threadWaitReadSTM fd\n#if defined(mingw32_HOST_OS)\n  | threaded = do v <- newTVarIO Nothing\n                  mask_ $ void $ forkIO $ do result <- try (waitFd fd False)\n                                             atomically (writeTVar v $ Just result)\n                  let waitAction = do result <- readTVar v\n                                      case result of\n                                        Nothing         -> retry\n                                        Just (Right ()) -> return ()\n                                        Just (Left e)   -> throwSTM (e :: IOException)\n                  let killAction = return ()\n                  return (waitAction, killAction)\n  | otherwise = errorWithoutStackTrace \"threadWaitReadSTM requires -threaded on Windows\"", "poly_type": "Monomorphic", "dependencies": "waitFd :: Fd -> Bool -> IO ()", "locations": [[301, 18], [303, 4], [303, 18], [303, 23], [304, 18], [304, 26], [304, 33], [304, 45], [304, 55], [304, 60], [304, 67], [305, 45], [305, 57], [305, 67], [305, 76], [306, 22], [306, 38], [306, 48], [306, 57], [307, 43], [308, 59], [309, 59], [310, 51], [310, 59], [310, 69], [311, 22], [311, 35], [312, 18], [312, 26], [312, 38], [313, 4], [313, 16], [304, 24], [304, 31], [304, 40], [305, 69]], "locations_src": ["fd", "threaded", "v", "newTVarIO", "mask_", "void", "forkIO", "result", "try", "waitFd", "fd", "atomically", "writeTVar", "v", "result", "waitAction", "result", "readTVar", "v", "result", "retry", "return", "e", "throwSTM", "e", "killAction", "return", "return", "waitAction", "killAction", "otherwise", "errorWithoutStackTrace", "$", "$", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--threadWaitWriteSTM", "signature": "threadWaitWriteSTM :: Fd -> IO (STM (), IO ())", "code": "threadWaitWriteSTM fd\n#if defined(mingw32_HOST_OS)\n  | threaded = do v <- newTVarIO Nothing\n                  mask_ $ void $ forkIO $ do result <- try (waitFd fd True)\n                                             atomically (writeTVar v $ Just result)\n                  let waitAction = do result <- readTVar v\n                                      case result of\n                                        Nothing         -> retry\n                                        Just (Right ()) -> return ()\n                                        Just (Left e)   -> throwSTM (e :: IOException)\n                  let killAction = return ()\n                  return (waitAction, killAction)\n  | otherwise = errorWithoutStackTrace \"threadWaitWriteSTM requires -threaded on Windows\"", "poly_type": "Monomorphic", "dependencies": "waitFd :: Fd -> Bool -> IO ()", "locations": [[325, 19], [327, 4], [327, 18], [327, 23], [328, 18], [328, 26], [328, 33], [328, 45], [328, 55], [328, 60], [328, 67], [329, 45], [329, 57], [329, 67], [329, 76], [330, 22], [330, 38], [330, 48], [330, 57], [331, 43], [332, 59], [333, 59], [334, 51], [334, 59], [334, 69], [335, 22], [335, 35], [336, 18], [336, 26], [336, 38], [337, 4], [337, 16], [328, 24], [328, 31], [328, 40], [329, 69]], "locations_src": ["fd", "threaded", "v", "newTVarIO", "mask_", "void", "forkIO", "result", "try", "waitFd", "fd", "atomically", "writeTVar", "v", "result", "waitAction", "result", "readTVar", "v", "result", "retry", "return", "e", "throwSTM", "e", "killAction", "return", "return", "waitAction", "killAction", "otherwise", "errorWithoutStackTrace", "$", "$", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--withThread", "signature": "withThread :: IO a -> IO a", "code": "withThread io = do\n  m <- newEmptyMVar\n  _ <- mask_ $ forkIO $ try io >>= putMVar m\n  x <- takeMVar m\n  case x of\n    Right a -> return a\n    Left e  -> throwIO (e :: IOException)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[346, 11], [347, 2], [347, 7], [348, 7], [348, 15], [348, 24], [348, 28], [348, 35], [348, 43], [349, 2], [349, 7], [349, 16], [350, 7], [351, 10], [351, 15], [351, 22], [352, 9], [352, 15], [352, 24], [348, 13], [348, 22], [348, 31]], "locations_src": ["io", "m", "newEmptyMVar", "mask_", "forkIO", "try", "io", "putMVar", "m", "x", "takeMVar", "m", "x", "a", "return", "a", "e", "throwIO", "e", "$", "$", ">>="]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent.hs--waitFd", "signature": "waitFd :: Fd -> Bool -> IO ()", "code": "waitFd fd write = do\n   throwErrnoIfMinus1_ \"fdReady\" $\n        fdReady (fromIntegral fd) (if write then 1 else 0) (-1) 0", "poly_type": "Monomorphic", "dependencies": "", "locations": [[355, 7], [355, 10], [356, 3], [357, 8], [357, 17], [357, 30], [357, 38], [356, 33]], "locations_src": ["fd", "write", "throwErrnoIfMinus1_", "fdReady", "fromIntegral", "fd", "write", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Applicative.hs--optional", "signature": "optional :: Alternative f => f a -> f (Maybe a)", "code": "optional v = Just <$> v <|> pure Nothing", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[144, 9], [144, 22], [144, 28], [144, 18], [144, 24]], "locations_src": ["v", "v", "pure", "<$>", "<|>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Monad/Zip.hs--mzipWith", "signature": "mzipWith :: (a -> b -> c) -> m a -> m b -> m c", "code": "mzipWith _ _ _ = Proxy\nmzipWith _ _ _ = U1\nmzipWith f (Alt ma) (Alt mb) = Alt (mzipWith f ma mb)\nmzipWith f (M1 fa) (M1 fb) = M1 (mzipWith f fa fb)\nmzipWith f (Rec1 fa) (Rec1 fb) = Rec1 (mzipWith f fa fb)\nmzipWith f (x1 :*: y1) (x2 :*: y2) = mzipWith f x1 x2 :*: mzipWith f y1 y2\nmzipWith f ma mb = liftM (uncurry f) (mzip ma mb)", "poly_type": "Parametric", "dependencies": "", "locations": [[51, 13], [51, 15], [51, 18], [51, 23], [51, 30], [51, 38], [51, 42], [51, 47], [51, 50], [108, 13], [108, 20], [108, 29], [108, 49], [108, 51], [108, 54], [125, 13], [125, 21], [125, 31], [125, 52], [125, 54], [125, 57], [129, 13], [129, 19], [129, 27], [129, 46], [129, 48], [129, 51], [133, 13], [133, 16], [133, 23], [133, 28], [133, 35], [133, 50], [133, 52], [133, 55], [133, 71], [133, 73], [133, 76]], "locations_src": ["f", "ma", "mb", "liftM", "uncurry", "f", "mzip", "ma", "mb", "f", "ma", "mb", "f", "ma", "mb", "f", "fa", "fb", "f", "fa", "fb", "f", "fa", "fb", "f", "fa", "fb", "f", "x1", "y1", "x2", "y2", "f", "x1", "x2", "f", "y1", "y2"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Monad/Zip.hs--munzip", "signature": "munzip :: m (a,b) -> (m a, m b)", "code": "munzip (Identity (a, b)) = (Identity a, Identity b)\nmunzip (MkSolo (a, b)) = (MkSolo a, MkSolo b)\nmunzip mab = (liftM fst mab, liftM snd mab)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[54, 11], [54, 18], [54, 24], [54, 28], [54, 33], [54, 39], [54, 43], [74, 22], [74, 25], [74, 41], [74, 53], [79, 20], [79, 23], [79, 37], [79, 47]], "locations_src": ["mab", "liftM", "fst", "mab", "liftM", "snd", "mab", "a", "b", "a", "b", "a", "b", "a", "b"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSem.hs--newQSem", "signature": "newQSem :: Int -> IO QSem", "code": "newQSem initial\n  | initial < 0 = fail \"newQSem: Initial quantity must be non-negative\"\n  | otherwise   = do\n      sem <- newMVar (initial, [], [])\n      return (QSem sem)", "poly_type": "Monomorphic", "dependencies": "", "locations": [[64, 8], [65, 4], [65, 18], [66, 4], [67, 6], [67, 13], [67, 22], [68, 6], [68, 19], [65, 12]], "locations_src": ["initial", "initial", "fail", "otherwise", "sem", "newMVar", "initial", "return", "sem", "<"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSem.hs--waitQSem", "signature": "waitQSem :: QSem -> IO ()", "code": "waitQSem (QSem m) =\n  mask_ $ do\n    (i,b1,b2) <- takeMVar m\n    if i == 0\n       then do\n         b <- newEmptyMVar\n         putMVar m (i, b1, b:b2)\n         wait b\n       else do\n         let !z = i-1\n         putMVar m (z, b1, b2)\n         return ()\n  where\n    wait b = takeMVar b `onException`\n                (uninterruptibleMask_ $ do -- Note [signal uninterruptible]\n                   (i,b1,b2) <- takeMVar m\n                   r <- tryTakeMVar b\n                   r' <- if isJust r\n                            then signal (i,b1,b2)\n                            else do putMVar b (); return (i,b1,b2)\n                   putMVar m r')", "poly_type": "Monomorphic", "dependencies": "signal :: (Int,[MVar ()],[MVar ()]) -> IO (Int,[MVar ()],[MVar ()])\nwait :: MVar () -> IO ()", "locations": [[72, 15], [73, 2], [74, 5], [74, 7], [74, 10], [74, 17], [74, 26], [75, 7], [77, 9], [77, 14], [78, 9], [78, 17], [78, 20], [78, 23], [78, 27], [78, 29], [79, 9], [79, 14], [81, 14], [81, 18], [82, 9], [82, 17], [82, 20], [82, 23], [82, 27], [83, 9], [85, 4], [85, 9], [85, 13], [85, 22], [85, 25], [86, 17], [87, 20], [87, 22], [87, 25], [87, 32], [87, 41], [88, 19], [88, 24], [88, 36], [89, 19], [89, 28], [89, 35], [90, 33], [90, 41], [90, 43], [90, 46], [91, 36], [91, 44], [91, 50], [91, 58], [91, 60], [91, 63], [92, 19], [92, 27], [92, 29], [73, 8], [75, 9], [81, 19], [86, 38]], "locations_src": ["m", "mask_", "i", "b1", "b2", "takeMVar", "m", "i", "b", "newEmptyMVar", "putMVar", "m", "i", "b1", "b", "b2", "wait", "b", "z", "i", "putMVar", "m", "z", "b1", "b2", "return", "wait", "b", "takeMVar", "b", "onException", "uninterruptibleMask_", "i", "b1", "b2", "takeMVar", "m", "r", "tryTakeMVar", "b", "r'", "isJust", "r", "signal", "i", "b1", "b2", "putMVar", "b", "return", "i", "b1", "b2", "putMVar", "m", "r'", "$", "==", "-", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSem.hs--signalQSem", "signature": "signalQSem :: QSem -> IO ()", "code": "signalQSem (QSem m) =\n  uninterruptibleMask_ $ do -- Note [signal uninterruptible]\n    r <- takeMVar m\n    r' <- signal r\n    putMVar m r'", "poly_type": "Monomorphic", "dependencies": "signal :: (Int,[MVar ()],[MVar ()]) -> IO (Int,[MVar ()],[MVar ()])", "locations": [[96, 17], [97, 2], [98, 4], [98, 9], [98, 18], [99, 4], [99, 10], [99, 17], [100, 4], [100, 12], [100, 14], [97, 23]], "locations_src": ["m", "uninterruptibleMask_", "r", "takeMVar", "m", "r'", "signal", "r", "putMVar", "m", "r'", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSem.hs--signal", "signature": "signal :: (Int,[MVar ()],[MVar ()]) -> IO (Int,[MVar ()],[MVar ()])", "code": "signal (i,a1,a2) =\n if i == 0\n   then loop a1 a2\n   else let !z = i+1 in return (z, a1, a2)\n where\n   loop [] [] = return (1, [], [])\n   loop [] b2 = loop (reverse b2) []\n   loop (b:bs) b2 = do\n     r <- tryPutMVar b ()\n     if r then return (0, bs, b2)\n          else loop bs b2", "poly_type": "Monomorphic", "dependencies": "", "locations": [[119, 8], [119, 10], [119, 13], [120, 4], [121, 8], [121, 13], [121, 16], [122, 13], [122, 17], [122, 24], [122, 32], [122, 35], [122, 39], [124, 3], [124, 16], [125, 3], [125, 11], [125, 16], [125, 22], [125, 30], [126, 3], [126, 9], [126, 11], [126, 15], [127, 5], [127, 10], [127, 21], [128, 8], [128, 15], [128, 26], [128, 30], [129, 15], [129, 20], [129, 23], [120, 6], [122, 18]], "locations_src": ["i", "a1", "a2", "i", "loop", "a1", "a2", "z", "i", "return", "z", "a1", "a2", "loop", "return", "loop", "b2", "loop", "reverse", "b2", "loop", "b", "bs", "b2", "r", "tryPutMVar", "b", "r", "return", "bs", "b2", "loop", "bs", "b2", "==", "+"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSemN.hs--newQSemN", "signature": "newQSemN :: Int -> IO QSemN", "code": "newQSemN initial\n  | initial < 0 = fail \"newQSemN: Initial quantity must be non-negative\"\n  | otherwise   = do\n      sem <- newIORef (initial, [], [])\n      return (QSemN sem)", "poly_type": "Monomorphic", "dependencies": "", "locations": [[65, 9], [66, 4], [66, 18], [67, 4], [68, 6], [68, 13], [68, 23], [69, 6], [69, 20], [66, 12]], "locations_src": ["initial", "initial", "fail", "otherwise", "sem", "newIORef", "initial", "return", "sem", "<"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSemN.hs--waitQSemN", "signature": "waitQSemN :: QSemN -> Int -> IO ()", "code": "waitQSemN qs@(QSemN m) sz = mask_ $ do\n    -- unsafePerformIO and not unsafeDupablePerformIO. We must\n    -- be sure to wait on the same MVar that gets enqueued.\n  mmvar <- atomicModifyIORef m $ \\ (i,b1,b2) -> unsafePerformIO $ do\n    let z = i-sz\n    if z < 0\n      then do\n        b <- newEmptyMVar\n        return ((i, b1, (sz,b):b2), JustMV b)\n      else return ((z, b1, b2), NothingMV)\n\n  -- Note: this case match actually allocates the MVar if necessary.\n  case mmvar of\n    NothingMV -> return ()\n    JustMV b -> wait b\n  where\n    wait :: MVar () -> IO ()\n    wait b =\n      takeMVar b `onException` do\n        already_filled <- not <$> tryPutMVar b ()\n        when already_filled $ signalQSemN qs sz", "poly_type": "Monomorphic", "dependencies": "signalQSemN :: QSemN -> Int -> IO ()\nwait :: MVar () -> IO ()", "locations": [[79, 10], [79, 20], [79, 23], [79, 28], [82, 2], [82, 11], [82, 29], [82, 36], [82, 38], [82, 41], [82, 48], [83, 8], [83, 12], [83, 14], [84, 7], [86, 8], [86, 13], [87, 8], [87, 17], [87, 20], [87, 25], [87, 28], [87, 31], [87, 43], [88, 11], [88, 20], [88, 23], [88, 27], [91, 7], [92, 17], [93, 11], [93, 16], [93, 21], [95, 4], [96, 4], [96, 9], [97, 6], [97, 15], [97, 18], [98, 8], [98, 26], [98, 34], [98, 45], [99, 8], [99, 13], [99, 30], [99, 42], [99, 45], [79, 34], [82, 31], [82, 64], [83, 13], [84, 9], [98, 30], [99, 28]], "locations_src": ["qs", "m", "sz", "mask_", "mmvar", "atomicModifyIORef", "m", "i", "b1", "b2", "unsafePerformIO", "z", "i", "sz", "z", "b", "newEmptyMVar", "return", "i", "b1", "sz", "b", "b2", "b", "return", "z", "b1", "b2", "mmvar", "return", "b", "wait", "b", "wait", "wait", "b", "takeMVar", "b", "onException", "already_filled", "not", "tryPutMVar", "b", "when", "already_filled", "signalQSemN", "qs", "sz", "$", "$", "$", "-", "<", "<$>", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSemN.hs--wait", "signature": "wait :: MVar () -> IO ()", "code": "wait b =\n      takeMVar b `onException` do\n        already_filled <- not <$> tryPutMVar b ()\n        when already_filled $ signalQSemN qs sz", "poly_type": "Monomorphic", "dependencies": "signalQSemN :: QSemN -> Int -> IO ()", "locations": [[96, 9], [97, 6], [97, 15], [97, 18], [98, 8], [98, 26], [98, 34], [98, 45], [99, 8], [99, 13], [99, 30], [99, 42], [99, 45], [98, 30], [99, 28]], "locations_src": ["b", "takeMVar", "b", "onException", "already_filled", "not", "tryPutMVar", "b", "when", "already_filled", "signalQSemN", "qs", "sz", "<$>", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/QSemN.hs--signalQSemN", "signature": "signalQSemN :: QSemN -> Int -> IO ()", "code": "signalQSemN (QSemN m) sz0 = do\n    -- unsafePerformIO and not unsafeDupablePerformIO. We must not\n    -- wake up more threads than we're supposed to.\n  unit <- atomicModifyIORef m $ \\(i,a1,a2) ->\n            unsafePerformIO (loop (sz0 + i) a1 a2)\n\n  -- Forcing this will actually wake the necessary threads.\n  evaluate unit\n where\n   loop 0  bs b2 = return ((0,  bs, b2), ())\n   loop sz [] [] = return ((sz, [], []), ())\n   loop sz [] b2 = loop sz (reverse b2) []\n   loop sz ((j,b):bs) b2\n     | j > sz = do\n       r <- isEmptyMVar b\n       if r then return ((sz, (j,b):bs, b2), ())\n            else loop sz bs b2\n     | otherwise = do\n       r <- tryPutMVar b ()\n       if r then loop (sz-j) bs b2\n            else loop sz bs b2", "poly_type": "Monomorphic", "dependencies": "", "locations": [[111, 19], [111, 22], [114, 2], [114, 10], [114, 28], [114, 34], [114, 36], [114, 39], [115, 12], [115, 29], [115, 35], [115, 41], [115, 44], [115, 47], [118, 2], [118, 11], [120, 3], [120, 11], [120, 14], [120, 19], [120, 32], [120, 36], [121, 3], [121, 8], [121, 19], [121, 28], [122, 3], [122, 8], [122, 14], [122, 19], [122, 24], [122, 28], [122, 36], [123, 3], [123, 8], [123, 13], [123, 15], [123, 18], [123, 22], [124, 7], [124, 11], [125, 7], [125, 12], [125, 24], [126, 10], [126, 17], [126, 26], [126, 31], [126, 33], [126, 36], [126, 40], [127, 17], [127, 22], [127, 25], [127, 28], [128, 7], [129, 7], [129, 12], [129, 23], [130, 10], [130, 17], [130, 23], [130, 26], [130, 29], [130, 32], [131, 17], [131, 22], [131, 25], [131, 28], [114, 30], [115, 39], [124, 9], [130, 25]], "locations_src": ["m", "sz0", "unit", "atomicModifyIORef", "m", "i", "a1", "a2", "unsafePerformIO", "loop", "sz0", "i", "a1", "a2", "evaluate", "unit", "loop", "bs", "b2", "return", "bs", "b2", "loop", "sz", "return", "sz", "loop", "sz", "b2", "loop", "sz", "reverse", "b2", "loop", "sz", "j", "b", "bs", "b2", "j", "sz", "r", "isEmptyMVar", "b", "r", "return", "sz", "j", "b", "bs", "b2", "loop", "sz", "bs", "b2", "otherwise", "r", "tryPutMVar", "b", "r", "loop", "sz", "j", "bs", "b2", "loop", "sz", "bs", "b2", "$", "+", ">", "-"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/Chan.hs--writeChan", "signature": "writeChan :: Chan a -> a -> IO ()", "code": "writeChan (Chan _ writeVar) val = do\n  new_hole <- newEmptyMVar\n  mask_ $ do\n    old_hole <- takeMVar writeVar\n    putMVar old_hole (ChItem val new_hole)\n    putMVar writeVar new_hole", "poly_type": "Parametric", "dependencies": "", "locations": [[83, 18], [83, 28], [84, 2], [84, 14], [85, 2], [86, 4], [86, 16], [86, 25], [87, 4], [87, 12], [87, 29], [87, 33], [88, 4], [88, 12], [88, 21], [85, 8]], "locations_src": ["writeVar", "val", "new_hole", "newEmptyMVar", "mask_", "old_hole", "takeMVar", "writeVar", "putMVar", "old_hole", "val", "new_hole", "putMVar", "writeVar", "new_hole", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/Chan.hs--readChan", "signature": "readChan :: Chan a -> IO a", "code": "readChan (Chan readVar _) =\n  modifyMVar readVar $ \\read_end -> do\n    (ChItem val new_read_end) <- readMVar read_end\n        -- Use readMVar here, not takeMVar,\n        -- else dupChan doesn't work\n    return (new_read_end, val)", "poly_type": "Parametric", "dependencies": "", "locations": [[108, 15], [109, 2], [109, 13], [109, 24], [110, 12], [110, 16], [110, 33], [110, 42], [113, 4], [113, 12], [113, 26], [109, 21]], "locations_src": ["readVar", "modifyMVar", "readVar", "read_end", "val", "new_read_end", "readMVar", "read_end", "return", "new_read_end", "val", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/Chan.hs--dupChan", "signature": "dupChan :: Chan a -> IO (Chan a)", "code": "dupChan (Chan _ writeVar) = do\n   hole       <- readMVar writeVar\n   newReadVar <- newMVar hole\n   return (Chan newReadVar writeVar)", "poly_type": "Parametric", "dependencies": "", "locations": [[123, 16], [124, 3], [124, 17], [124, 26], [125, 3], [125, 17], [125, 25], [126, 3], [126, 16], [126, 27]], "locations_src": ["writeVar", "hole", "readMVar", "writeVar", "newReadVar", "newMVar", "hole", "return", "newReadVar", "writeVar"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/Chan.hs--getChanContents", "signature": "getChanContents :: Chan a -> IO [a]", "code": "getChanContents ch\n  = unsafeInterleaveIO (do\n        x  <- readChan ch\n        xs <- getChanContents ch\n        return (x:xs)\n    )", "poly_type": "Parametric", "dependencies": "readChan :: Chan a -> IO a", "locations": [[133, 16], [134, 4], [135, 8], [135, 14], [135, 23], [136, 8], [136, 30], [137, 8], [137, 16], [137, 18]], "locations_src": ["ch", "unsafeInterleaveIO", "x", "readChan", "ch", "xs", "ch", "return", "x", "xs"]}
{"task_id": "data/repos/base-4.20.0.0/src/Control/Concurrent/Chan.hs--writeList2Chan", "signature": "writeList2Chan :: Chan a -> [a] -> IO ()", "code": "writeList2Chan ch ls = sequence_ (map (writeChan ch) ls)", "poly_type": "Parametric", "dependencies": "writeChan :: Chan a -> a -> IO ()\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b", "locations": [[142, 15], [142, 18], [142, 23], [142, 34], [142, 39], [142, 49], [142, 53]], "locations_src": ["ch", "ls", "sequence_", "map", "writeChan", "ch", "ls"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--printf", "signature": "printf :: (PrintfType r) => String -> r", "code": "printf fmts = spr fmts []", "poly_type": "Ad-hoc", "dependencies": "spr :: String -> [UPrintf] -> t", "locations": [[258, 7], [258, 14], [258, 18]], "locations_src": ["fmts", "spr", "fmts"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--hPrintf", "signature": "hPrintf :: (HPrintfType r) => Handle -> String -> r", "code": "hPrintf hdl fmts = hspr hdl fmts []", "poly_type": "Ad-hoc", "dependencies": "hspr :: Handle -> String -> [UPrintf] -> t", "locations": [[263, 8], [263, 12], [263, 19], [263, 24], [263, 28]], "locations_src": ["hdl", "fmts", "hspr", "hdl", "fmts"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--spr", "signature": "spr :: String -> [UPrintf] -> t", "code": "spr fmts args =\n        putStr $ map fromChar $ uprintf fmts $ reverse args\nspr fmts args = \\ a -> spr fmts\n                             ((parseFormat a, formatArg a) : args)\nspr fmts args = map fromChar (uprintf fmts (reverse args))", "poly_type": "Parametric", "dependencies": "uprintf :: String -> [UPrintf] -> String\nfromChar :: Char -> c\nparseFormat :: a -> ModifierParser\na :: k\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b", "locations": [[285, 8], [285, 13], [285, 20], [285, 24], [285, 34], [285, 42], [285, 48], [285, 56], [293, 8], [293, 13], [294, 8], [294, 17], [294, 21], [294, 32], [294, 40], [294, 47], [294, 55], [294, 15], [294, 30], [294, 45], [303, 8], [303, 13], [303, 22], [303, 31], [304, 31], [304, 43], [304, 46], [304, 56], [304, 61]], "locations_src": ["fmts", "args", "map", "fromChar", "uprintf", "fmts", "reverse", "args", "fmts", "args", "putStr", "map", "fromChar", "uprintf", "fmts", "reverse", "args", "$", "$", "$", "fmts", "args", "a", "fmts", "parseFormat", "a", "formatArg", "a", "args"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--hspr", "signature": "hspr :: Handle -> String -> [UPrintf] -> t", "code": "hspr hdl fmts args =\n        hPutStr hdl (uprintf fmts (reverse args))\nhspr hdl fmts args = \\ a -> hspr hdl fmts\n                                  ((parseFormat a, formatArg a) : args)", "poly_type": "Parametric", "dependencies": "uprintf :: String -> [UPrintf] -> String\na :: k\nparseFormat :: a -> ModifierParser", "locations": [[298, 9], [298, 13], [298, 18], [299, 8], [299, 16], [299, 21], [299, 29], [299, 35], [299, 43], [308, 9], [308, 13], [308, 18], [308, 27], [308, 37], [308, 41], [309, 36], [309, 48], [309, 51], [309, 61], [309, 66]], "locations_src": ["hdl", "fmts", "args", "hPutStr", "hdl", "uprintf", "fmts", "reverse", "args", "hdl", "fmts", "args", "a", "hdl", "fmts", "parseFormat", "a", "formatArg", "a", "args"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--parseFormat", "signature": "parseFormat :: a -> ModifierParser", "code": "parseFormat _ \"\" = errorShortFormat\nparseFormat _ (c : cs) = FormatParse \"\" c cs\nparseFormat _ cf = parseIntFormat (undefined :: Int) cf", "poly_type": "Parametric", "dependencies": "parseIntFormat :: a -> String -> FormatParse", "locations": [[321, 19], [321, 23], [321, 44], [321, 46], [322, 23], [327, 18], [327, 23], [327, 39], [327, 57]], "locations_src": ["c", "cs", "c", "cs", "errorShortFormat", "cf", "parseIntFormat", "undefined", "cf"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--toChar", "signature": "toChar :: c -> Char", "code": "toChar c = c", "poly_type": "Parametric", "dependencies": "", "locations": [[413, 11], [413, 15]], "locations_src": ["c", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--fromChar", "signature": "fromChar :: Char -> c", "code": "fromChar c = c", "poly_type": "Parametric", "dependencies": "", "locations": [[414, 13], [414, 17]], "locations_src": ["c", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--parseIntFormat", "signature": "parseIntFormat :: a -> String -> FormatParse", "code": "parseIntFormat _ s =\n  case foldr matchPrefix Nothing intModifierMap of\n    Just m -> m\n    Nothing ->\n      case s of\n        c : cs -> FormatParse \"\" c cs\n        \"\" -> errorShortFormat\n  where\n    matchPrefix (p, _) m@(Just (FormatParse p0 _ _))\n      | length p0 >= length p = m\n      | otherwise = case getFormat p of\n          Nothing -> m\n          Just fp -> Just fp\n    matchPrefix (p, _) Nothing =\n      getFormat p\n    getFormat p =\n      stripPrefix p s >>= fp\n      where\n        fp (c : cs) = Just $ FormatParse p c cs\n        fp \"\" = errorShortFormat", "poly_type": "Parametric", "dependencies": "length :: NonEmpty a -> Int", "locations": [[485, 17], [486, 7], [486, 13], [486, 33], [487, 9], [487, 14], [489, 11], [490, 8], [490, 12], [490, 33], [490, 35], [491, 14], [493, 4], [493, 17], [493, 23], [493, 44], [494, 8], [494, 15], [494, 21], [494, 28], [494, 32], [495, 8], [495, 25], [495, 35], [496, 21], [497, 15], [497, 26], [498, 4], [498, 17], [499, 6], [499, 16], [500, 4], [500, 14], [501, 6], [501, 18], [501, 20], [501, 26], [503, 8], [503, 12], [503, 16], [503, 41], [503, 43], [503, 45], [504, 8], [504, 16], [494, 18], [501, 22], [503, 27]], "locations_src": ["s", "foldr", "matchPrefix", "intModifierMap", "m", "m", "s", "c", "cs", "c", "cs", "errorShortFormat", "matchPrefix", "p", "m", "p0", "length", "p0", "length", "p", "m", "otherwise", "getFormat", "p", "m", "fp", "fp", "matchPrefix", "p", "getFormat", "p", "getFormat", "p", "stripPrefix", "p", "s", "fp", "fp", "c", "cs", "p", "c", "cs", "fp", "errorShortFormat", ">=", ">>=", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--vFmt", "signature": "vFmt :: Char -> FieldFormat -> FieldFormat", "code": "vFmt _ ufmt = ufmt\nvFmt c ufmt@(FieldFormat {fmtChar = 'v'}) = ufmt {fmtChar = c}", "poly_type": "Monomorphic", "dependencies": "", "locations": [[525, 5], [525, 7], [525, 26], [525, 44], [525, 50], [525, 60], [526, 7], [526, 14]], "locations_src": ["c", "ufmt", "fmtChar", "ufmt", "fmtChar", "c", "ufmt", "ufmt"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--formatChar", "signature": "formatChar :: Char -> FieldFormatter", "code": "formatChar x ufmt =\n  formatIntegral (Just 0) (toInteger $ ord x) $ vFmt 'c' ufmt", "poly_type": "Monomorphic", "dependencies": "formatIntegral :: Maybe Integer -> Integer -> FieldFormatter\nvFmt :: Char -> FieldFormat -> FieldFormat", "locations": [[532, 11], [532, 13], [533, 2], [533, 27], [533, 39], [533, 43], [533, 48], [533, 57], [533, 37], [533, 46]], "locations_src": ["x", "ufmt", "formatIntegral", "toInteger", "ord", "x", "vFmt", "ufmt", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--formatString", "signature": "formatString :: IsChar a => [a] -> FieldFormatter", "code": "formatString x ufmt =\n  case fmtChar $ vFmt 's' ufmt of\n    's' -> map toChar . (adjust ufmt (\"\", ts) ++)\n           where\n             ts = map toChar $ trunc $ fmtPrecision ufmt\n               where\n                 trunc Nothing = x\n                 trunc (Just n) = take n x\n    c   -> errorBadFormat c", "poly_type": "Ad-hoc", "dependencies": "vFmt :: Char -> FieldFormat -> FieldFormat\nerrorBadFormat :: Char -> a\ntake :: Int -> NonEmpty a -> [a]\ntoChar :: c -> Char\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b\nadjust :: FieldFormat -> (String, String) -> String", "locations": [[539, 13], [539, 15], [540, 7], [540, 17], [540, 26], [541, 11], [541, 15], [541, 25], [541, 32], [541, 42], [543, 13], [543, 18], [543, 22], [543, 31], [543, 39], [543, 52], [545, 17], [545, 33], [546, 17], [546, 29], [546, 34], [546, 39], [546, 41], [547, 4], [547, 11], [547, 26], [540, 15], [541, 22], [541, 46], [543, 29], [543, 37]], "locations_src": ["x", "ufmt", "fmtChar", "vFmt", "ufmt", "map", "toChar", "adjust", "ufmt", "ts", "ts", "map", "toChar", "trunc", "fmtPrecision", "ufmt", "trunc", "x", "trunc", "n", "take", "n", "x", "c", "errorBadFormat", "c", "$", ".", "++", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--fixupMods", "signature": "fixupMods :: FieldFormat -> Maybe Integer -> Maybe Integer", "code": "fixupMods ufmt m =\n  let mods = fmtModifiers ufmt in\n  case mods of\n    \"\" -> m\n    _ -> case lookup mods intModifierMap of\n      Just m0 -> Just m0\n      Nothing -> perror \"unknown format modifier\"", "poly_type": "Monomorphic", "dependencies": "perror :: String -> a", "locations": [[552, 10], [552, 15], [553, 6], [553, 13], [553, 26], [554, 7], [555, 10], [556, 14], [556, 21], [556, 26], [557, 11], [557, 22], [558, 17]], "locations_src": ["ufmt", "m", "mods", "fmtModifiers", "ufmt", "mods", "m", "lookup", "mods", "intModifierMap", "m0", "m0", "perror"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--formatInt", "signature": "formatInt :: (Integral a, Bounded a) => a -> FieldFormatter", "code": "formatInt x ufmt =\n  let lb = toInteger $ minBound `asTypeOf` x\n      m = fixupMods ufmt (Just lb)\n      ufmt' = case lb of\n        0 -> vFmt 'u' ufmt\n        _ -> ufmt\n  in\n  formatIntegral m (toInteger x) ufmt'", "poly_type": "Ad-hoc", "dependencies": "vFmt :: Char -> FieldFormat -> FieldFormat\nformatIntegral :: Maybe Integer -> Integer -> FieldFormatter\nfixupMods :: FieldFormat -> Maybe Integer -> Maybe Integer", "locations": [[564, 10], [564, 12], [565, 6], [565, 11], [565, 23], [565, 33], [565, 43], [566, 6], [566, 10], [566, 20], [566, 31], [567, 6], [567, 19], [568, 13], [568, 22], [569, 13], [571, 2], [571, 17], [571, 20], [571, 30], [571, 33], [565, 21]], "locations_src": ["x", "ufmt", "lb", "toInteger", "minBound", "asTypeOf", "x", "m", "fixupMods", "ufmt", "lb", "ufmt'", "lb", "vFmt", "ufmt", "ufmt", "formatIntegral", "m", "toInteger", "x", "ufmt'", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--formatInteger", "signature": "formatInteger :: Integer -> FieldFormatter", "code": "formatInteger x ufmt =\n  let m = fixupMods ufmt Nothing in\n  formatIntegral m x ufmt", "poly_type": "Monomorphic", "dependencies": "formatIntegral :: Maybe Integer -> Integer -> FieldFormatter\nfixupMods :: FieldFormat -> Maybe Integer -> Maybe Integer", "locations": [[577, 14], [577, 16], [578, 6], [578, 10], [578, 20], [579, 2], [579, 17], [579, 19], [579, 21]], "locations_src": ["x", "ufmt", "m", "fixupMods", "ufmt", "formatIntegral", "m", "x", "ufmt"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--formatIntegral", "signature": "formatIntegral :: Maybe Integer -> Integer -> FieldFormatter", "code": "formatIntegral m x ufmt0 =\n  let prec = fmtPrecision ufmt0 in\n  case fmtChar ufmt of\n    'd' -> (adjustSigned ufmt (fmti prec x) ++)\n    'i' -> (adjustSigned ufmt (fmti prec x) ++)\n    'x' -> (adjust ufmt (fmtu 16 (alt \"0x\" x) prec m x) ++)\n    'X' -> (adjust ufmt (upcase $ fmtu 16 (alt \"0X\" x) prec m x) ++)\n    'b' -> (adjust ufmt (fmtu 2 (alt \"0b\" x) prec m x) ++)\n    'o' -> (adjust ufmt (fmtu 8 (alt \"0\" x) prec m x) ++)\n    'u' -> (adjust ufmt (fmtu 10 Nothing prec m x) ++)\n    'c' | x >= fromIntegral (ord (minBound :: Char)) &&\n          x <= fromIntegral (ord (maxBound :: Char)) &&\n          fmtPrecision ufmt == Nothing &&\n          fmtModifiers ufmt == \"\" ->\n            formatString [chr $ fromIntegral x] (ufmt { fmtChar = 's' })\n    'c' -> perror \"illegal char conversion\"\n    c   -> errorBadFormat c\n  where\n    ufmt = vFmt 'd' $ case ufmt0 of\n      FieldFormat { fmtPrecision = Just _, fmtAdjust = Just ZeroPad } ->\n        ufmt0 { fmtAdjust = Nothing }\n      _ -> ufmt0\n    alt _ 0 = Nothing\n    alt p _ = case fmtAlternate ufmt of\n      True -> Just p\n      False -> Nothing\n    upcase (s1, s2) = (s1, map toUpper s2)", "poly_type": "Monomorphic", "dependencies": "perror :: String -> a\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b\nvFmt :: Char -> FieldFormat -> FieldFormat\nformatString :: IsChar a => [a] -> FieldFormatter\nerrorBadFormat :: Char -> a\nfmti :: Maybe Int -> Integer -> (String, String)\nadjust :: FieldFormat -> (String, String) -> String\nfmtu :: Integer -> Maybe String -> Maybe Int -> Maybe Integer -> Integer\n     -> (String, String)\nadjustSigned :: FieldFormat -> (String, String) -> String", "locations": [[586, 15], [586, 17], [586, 19], [587, 6], [587, 13], [587, 26], [588, 7], [588, 15], [589, 12], [589, 25], [589, 31], [589, 36], [589, 41], [590, 12], [590, 25], [590, 31], [590, 36], [590, 41], [591, 12], [591, 19], [591, 25], [591, 34], [591, 43], [591, 46], [591, 51], [591, 53], [592, 12], [592, 19], [592, 25], [592, 34], [592, 43], [592, 52], [592, 55], [592, 60], [592, 62], [593, 12], [593, 19], [593, 25], [593, 33], [593, 42], [593, 45], [593, 50], [593, 52], [594, 12], [594, 19], [594, 25], [594, 33], [594, 41], [594, 44], [594, 49], [594, 51], [595, 12], [595, 19], [595, 25], [595, 41], [595, 46], [595, 48], [596, 10], [596, 15], [596, 29], [596, 34], [597, 10], [597, 15], [597, 29], [597, 34], [598, 10], [598, 23], [599, 10], [599, 23], [600, 12], [600, 26], [600, 32], [600, 45], [600, 49], [600, 56], [601, 11], [602, 4], [602, 11], [602, 26], [604, 4], [604, 11], [604, 27], [605, 20], [605, 43], [606, 8], [606, 16], [607, 11], [608, 4], [609, 4], [609, 8], [609, 19], [609, 32], [610, 19], [612, 4], [612, 12], [612, 16], [612, 23], [612, 27], [612, 31], [612, 39], [589, 44], [590, 44], [591, 56], [592, 32], [592, 65], [593, 55], [594, 54], [595, 51], [596, 12], [596, 53], [597, 12], [597, 53], [598, 28], [598, 39], [599, 28], [600, 30], [604, 20]], "locations_src": ["m", "x", "ufmt0", "prec", "fmtPrecision", "ufmt0", "fmtChar", "ufmt", "adjustSigned", "ufmt", "fmti", "prec", "x", "adjustSigned", "ufmt", "fmti", "prec", "x", "adjust", "ufmt", "fmtu", "alt", "x", "prec", "m", "x", "adjust", "ufmt", "upcase", "fmtu", "alt", "x", "prec", "m", "x", "adjust", "ufmt", "fmtu", "alt", "x", "prec", "m", "x", "adjust", "ufmt", "fmtu", "alt", "x", "prec", "m", "x", "adjust", "ufmt", "fmtu", "prec", "m", "x", "x", "fromIntegral", "ord", "minBound", "x", "fromIntegral", "ord", "maxBound", "fmtPrecision", "ufmt", "fmtModifiers", "ufmt", "formatString", "chr", "fromIntegral", "x", "ufmt", "fmtChar", "perror", "c", "errorBadFormat", "c", "ufmt", "vFmt", "ufmt0", "fmtPrecision", "fmtAdjust", "ufmt0", "fmtAdjust", "ufmt0", "alt", "alt", "p", "fmtAlternate", "ufmt", "p", "upcase", "s1", "s2", "s1", "map", "toUpper", "s2", "++", "++", "++", "$", "++", "++", "++", "++", ">=", "&&", "<=", "&&", "==", "&&", "==", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--formatRealFloat", "signature": "formatRealFloat :: RealFloat a => a -> FieldFormatter", "code": "formatRealFloat x ufmt =\n  let c = fmtChar $ vFmt 'g' ufmt\n      prec = fmtPrecision ufmt\n      alt = fmtAlternate ufmt\n  in\n   case c of\n     'e' -> (adjustSigned ufmt (dfmt c prec alt x) ++)\n     'E' -> (adjustSigned ufmt (dfmt c prec alt x) ++)\n     'f' -> (adjustSigned ufmt (dfmt c prec alt x) ++)\n     'F' -> (adjustSigned ufmt (dfmt c prec alt x) ++)\n     'g' -> (adjustSigned ufmt (dfmt c prec alt x) ++)\n     'G' -> (adjustSigned ufmt (dfmt c prec alt x) ++)\n     _   -> errorBadFormat c", "poly_type": "Ad-hoc", "dependencies": "vFmt :: Char -> FieldFormat -> FieldFormat\nerrorBadFormat :: Char -> a\nadjustSigned :: FieldFormat -> (String, String) -> String\ndfmt :: (RealFloat a) => Char -> Maybe Int -> Bool -> a -> (String, String)", "locations": [[618, 16], [618, 18], [619, 6], [619, 10], [619, 20], [619, 29], [620, 6], [620, 13], [620, 26], [621, 6], [621, 12], [621, 25], [623, 8], [624, 13], [624, 26], [624, 32], [624, 37], [624, 39], [624, 44], [624, 48], [625, 13], [625, 26], [625, 32], [625, 37], [625, 39], [625, 44], [625, 48], [626, 13], [626, 26], [626, 32], [626, 37], [626, 39], [626, 44], [626, 48], [627, 13], [627, 26], [627, 32], [627, 37], [627, 39], [627, 44], [627, 48], [628, 13], [628, 26], [628, 32], [628, 37], [628, 39], [628, 44], [628, 48], [629, 13], [629, 26], [629, 32], [629, 37], [629, 39], [629, 44], [629, 48], [630, 12], [630, 27], [619, 18], [624, 51], [625, 51], [626, 51], [627, 51], [628, 51], [629, 51]], "locations_src": ["x", "ufmt", "c", "fmtChar", "vFmt", "ufmt", "prec", "fmtPrecision", "ufmt", "alt", "fmtAlternate", "ufmt", "c", "adjustSigned", "ufmt", "dfmt", "c", "prec", "alt", "x", "adjustSigned", "ufmt", "dfmt", "c", "prec", "alt", "x", "adjustSigned", "ufmt", "dfmt", "c", "prec", "alt", "x", "adjustSigned", "ufmt", "dfmt", "c", "prec", "alt", "x", "adjustSigned", "ufmt", "dfmt", "c", "prec", "alt", "x", "adjustSigned", "ufmt", "dfmt", "c", "prec", "alt", "x", "errorBadFormat", "c", "$", "++", "++", "++", "++", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--uprintf", "signature": "uprintf :: String -> [UPrintf] -> String", "code": "uprintf s us = uprintfs s us \"\"", "poly_type": "Monomorphic", "dependencies": "uprintfs :: String -> [UPrintf] -> ShowS", "locations": [[641, 8], [641, 10], [641, 15], [641, 24], [641, 26]], "locations_src": ["s", "us", "uprintfs", "s", "us"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--uprintfs", "signature": "uprintfs :: String -> [UPrintf] -> ShowS", "code": "uprintfs \"\"       (_:_)    = errorShortFormat\nuprintfs \"\"       []       = id\nuprintfs ('%':'%':cs) us   = ('%' :) . uprintfs cs us\nuprintfs ('%':_)  []       = errorMissingArgument\nuprintfs ('%':cs) us@(_:_) = fmt cs us\nuprintfs (c:cs)   us       = (c :) . uprintfs cs us", "poly_type": "Monomorphic", "dependencies": "fmt :: String -> [UPrintf] -> ShowS", "locations": [[647, 29], [648, 29], [649, 18], [649, 22], [649, 48], [649, 51], [649, 37], [650, 29], [651, 14], [651, 18], [651, 29], [651, 33], [651, 36], [652, 10], [652, 12], [652, 18], [652, 30], [652, 46], [652, 49], [652, 35]], "locations_src": ["id", "errorShortFormat", "cs", "us", "cs", "us", ".", "errorMissingArgument", "cs", "us", "fmt", "cs", "us", "c", "cs", "us", "c", "cs", "us", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--fmt", "signature": "fmt :: String -> [UPrintf] -> ShowS", "code": "fmt cs0 us0 =\n  case getSpecs False False Nothing False cs0 us0 of\n    (_, _, []) -> errorMissingArgument\n    (ufmt, cs, (_, u) : us) -> u ufmt . uprintfs cs us", "poly_type": "Monomorphic", "dependencies": "uprintfs :: String -> [UPrintf] -> ShowS\ngetSpecs :: Bool -> Bool -> Maybe FormatSign -> Bool -> String -> [UPrintf]\n         -> (FieldFormat, String, [UPrintf])", "locations": [[660, 4], [660, 8], [661, 7], [661, 42], [661, 46], [662, 18], [663, 5], [663, 11], [663, 19], [663, 24], [663, 31], [663, 33], [663, 40], [663, 49], [663, 52], [663, 38]], "locations_src": ["cs0", "us0", "getSpecs", "cs0", "us0", "errorMissingArgument", "ufmt", "cs", "u", "us", "u", "ufmt", "uprintfs", "cs", "us", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--adjust", "signature": "adjust :: FieldFormat -> (String, String) -> String", "code": "adjust ufmt (pre, str) =\n  let naturalWidth = length pre + length str\n      zero = case fmtAdjust ufmt of\n        Just ZeroPad -> True\n        _ -> False\n      left = case fmtAdjust ufmt of\n        Just LeftAdjust -> True\n        _ -> False\n      fill = case fmtWidth ufmt of\n        Just width | naturalWidth < width ->\n          let fillchar = if zero then '0' else ' ' in\n          replicate (width - naturalWidth) fillchar\n        _ -> \"\"\n  in\n   if left\n   then pre ++ str ++ fill\n   else if zero\n        then pre ++ fill ++ str\n        else fill ++ pre ++ str", "poly_type": "Monomorphic", "dependencies": "length :: NonEmpty a -> Int", "locations": [[671, 7], [671, 13], [671, 18], [672, 6], [672, 21], [672, 28], [672, 34], [672, 41], [673, 6], [673, 18], [673, 28], [676, 6], [676, 18], [676, 28], [679, 6], [679, 18], [679, 27], [680, 13], [680, 21], [680, 36], [681, 14], [681, 28], [682, 10], [682, 21], [682, 29], [682, 43], [685, 6], [686, 8], [686, 15], [686, 22], [687, 11], [688, 13], [688, 20], [688, 28], [689, 13], [689, 21], [689, 28], [672, 32], [680, 34], [682, 27], [686, 12], [686, 19], [688, 17], [688, 25], [689, 18], [689, 25]], "locations_src": ["ufmt", "pre", "str", "naturalWidth", "length", "pre", "length", "str", "zero", "fmtAdjust", "ufmt", "left", "fmtAdjust", "ufmt", "fill", "fmtWidth", "ufmt", "width", "naturalWidth", "width", "fillchar", "zero", "replicate", "width", "naturalWidth", "fillchar", "left", "pre", "str", "fill", "zero", "pre", "fill", "str", "fill", "pre", "str", "+", "<", "-", "++", "++", "++", "++", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--adjustSigned", "signature": "adjustSigned :: FieldFormat -> (String, String) -> String", "code": "adjustSigned ufmt ps =\n  adjust ufmt ps\nadjustSigned ufmt@(FieldFormat {fmtSign = Just SignPlus}) (\"\", str) =\n  adjust ufmt (\"+\", str)\nadjustSigned ufmt@(FieldFormat {fmtSign = Just SignSpace}) (\"\", str) =\n  adjust ufmt (\" \", str)", "poly_type": "Monomorphic", "dependencies": "adjust :: FieldFormat -> (String, String) -> String", "locations": [[694, 13], [694, 32], [694, 63], [695, 2], [695, 9], [695, 20], [696, 13], [696, 32], [696, 64], [697, 2], [697, 9], [697, 20], [698, 13], [698, 18], [699, 2], [699, 9], [699, 14]], "locations_src": ["ufmt", "fmtSign", "str", "adjust", "ufmt", "str", "ufmt", "fmtSign", "str", "adjust", "ufmt", "str", "ufmt", "ps", "adjust", "ufmt", "ps"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--fmti", "signature": "fmti :: Maybe Int -> Integer -> (String, String)", "code": "fmti prec i\n  | i < 0 = (\"-\", integral_prec prec (show (-i)))\n  | otherwise = (\"\", integral_prec prec (show i))", "poly_type": "Monomorphic", "dependencies": "integral_prec :: Maybe Int -> String -> String", "locations": [[704, 5], [704, 10], [705, 4], [705, 18], [705, 32], [705, 38], [705, 45], [706, 4], [706, 21], [706, 35], [706, 41], [706, 46], [705, 6]], "locations_src": ["prec", "i", "i", "integral_prec", "prec", "show", "i", "otherwise", "integral_prec", "prec", "show", "i", "<"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--fmtu", "signature": "fmtu :: Integer -> Maybe String -> Maybe Int -> Maybe Integer -> Integer\n     -> (String, String)", "code": "fmtu b (Just pre) prec m i =\n  let (\"\", s) = fmtu b Nothing prec m i in\n  case pre of\n    \"0\" -> case s of\n      '0' : _ -> (\"\", s)\n      _ -> (pre, s)\n    _ -> (pre, s)\nfmtu b Nothing prec0 m0 i0 =\n  case fmtu' prec0 m0 i0 of\n    Just s -> (\"\", s)\n    Nothing -> errorBadArgument\n  where\n    fmtu' :: Maybe Int -> Maybe Integer -> Integer -> Maybe String\n    fmtu' prec (Just m) i | i < 0 =\n      fmtu' prec Nothing (-2 * m + i)\n    fmtu' (Just prec) _ i | i >= 0 =\n      fmap (integral_prec (Just prec)) $ fmtu' Nothing Nothing i\n    fmtu' Nothing _ i | i >= 0 =\n      Just $ showIntAtBase b intToDigit i \"\"\n    fmtu' _ _ _ = Nothing", "poly_type": "Monomorphic", "dependencies": "fmtu' :: Maybe Int -> Maybe Integer -> Integer -> Maybe String\nintegral_prec :: Maybe Int -> String -> String", "locations": [[717, 5], [717, 13], [717, 18], [717, 23], [717, 25], [718, 11], [718, 21], [718, 31], [718, 36], [718, 38], [719, 7], [720, 16], [721, 22], [722, 12], [722, 17], [723, 10], [723, 15], [724, 5], [724, 15], [724, 21], [724, 24], [725, 7], [725, 13], [725, 19], [725, 22], [726, 9], [726, 19], [727, 15], [729, 4], [730, 4], [730, 10], [730, 21], [730, 24], [730, 28], [731, 6], [731, 12], [731, 31], [731, 35], [732, 4], [732, 16], [732, 24], [732, 28], [733, 6], [733, 12], [733, 32], [733, 41], [733, 63], [734, 4], [734, 20], [734, 24], [735, 13], [735, 27], [735, 29], [735, 40], [736, 4], [730, 30], [731, 29], [731, 33], [732, 30], [733, 39], [734, 26], [735, 11]], "locations_src": ["b", "pre", "prec", "m", "i", "s", "b", "prec", "m", "i", "pre", "s", "s", "pre", "s", "pre", "s", "b", "prec0", "m0", "i0", "fmtu'", "prec0", "m0", "i0", "s", "s", "errorBadArgument", "fmtu'", "fmtu'", "prec", "m", "i", "i", "fmtu'", "prec", "m", "i", "fmtu'", "prec", "i", "i", "fmap", "integral_prec", "prec", "fmtu'", "i", "fmtu'", "i", "i", "showIntAtBase", "b", "intToDigit", "i", "fmtu'", "<", "*", "+", ">=", "$", ">=", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--fmtu'", "signature": "fmtu' :: Maybe Int -> Maybe Integer -> Integer -> Maybe String", "code": "fmtu' (Just prec) _ i | i >= 0 =\n      fmap (integral_prec (Just prec)) $ fmtu' Nothing Nothing i\nfmtu' Nothing _ i | i >= 0 =\n      Just $ showIntAtBase b intToDigit i \"\"\nfmtu' _ _ _ = Nothing\nfmtu' prec (Just m) i | i < 0 =\n      fmtu' prec Nothing (-2 * m + i)", "poly_type": "Monomorphic", "dependencies": "integral_prec :: Maybe Int -> String -> String", "locations": [[730, 10], [730, 21], [730, 24], [730, 28], [731, 12], [731, 31], [731, 35], [730, 30], [731, 29], [731, 33], [732, 16], [732, 24], [732, 28], [733, 6], [733, 12], [733, 32], [733, 63], [732, 30], [733, 39], [734, 20], [734, 24], [735, 13], [735, 27], [735, 29], [735, 40], [734, 26], [735, 11]], "locations_src": ["prec", "m", "i", "i", "prec", "m", "i", "<", "*", "+", "prec", "i", "i", "fmap", "integral_prec", "prec", "i", ">=", "$", "i", "i", "showIntAtBase", "b", "intToDigit", "i", ">=", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--integral_prec", "signature": "integral_prec :: Maybe Int -> String -> String", "code": "integral_prec (Just 0) \"0\" = \"\"\nintegral_prec (Just prec) integral =\n  replicate (prec - length integral) '0' ++ integral\nintegral_prec Nothing integral = integral", "poly_type": "Monomorphic", "dependencies": "length :: NonEmpty a -> Int", "locations": [[742, 22], [742, 33], [744, 20], [744, 26], [745, 2], [745, 13], [745, 20], [745, 27], [745, 44], [745, 18], [745, 41]], "locations_src": ["integral", "integral", "prec", "integral", "replicate", "prec", "length", "integral", "integral", "-", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--stoi", "signature": "stoi :: String -> (Int, String)", "code": "stoi cs =\n  let (as, cs') = span isDigit cs in\n  case as of\n    \"\" -> (0, cs')\n    _ -> (read as, cs')", "poly_type": "Monomorphic", "dependencies": "span :: (a -> Bool) -> NonEmpty a -> ([a], [a])", "locations": [[748, 5], [749, 7], [749, 11], [749, 18], [749, 23], [749, 31], [750, 7], [751, 14], [752, 10], [752, 15], [752, 19]], "locations_src": ["cs", "as", "cs'", "span", "isDigit", "cs", "as", "cs'", "read", "as", "cs'"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--adjustment", "signature": "adjustment :: Maybe Int -> Maybe a -> Bool -> Bool\n           -> Maybe FormatAdjustment", "code": "adjustment w p l z =\n  case w of\n    Just n | n < 0 -> adjl p True z\n    _ -> adjl p l z\n  where\n    adjl _ True _ = Just LeftAdjust\n    adjl _ False True = Just ZeroPad\n    adjl _ _ _ = Nothing", "poly_type": "Parametric", "dependencies": "", "locations": [[758, 11], [758, 13], [758, 15], [758, 17], [759, 7], [760, 9], [760, 13], [760, 22], [760, 27], [760, 34], [761, 9], [761, 14], [761, 16], [761, 18], [763, 4], [764, 4], [765, 4], [760, 15]], "locations_src": ["w", "p", "l", "z", "w", "n", "n", "adjl", "p", "z", "adjl", "p", "l", "z", "adjl", "adjl", "adjl", "<"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--getSpecs", "signature": "getSpecs :: Bool -> Bool -> Maybe FormatSign -> Bool -> String -> [UPrintf]\n         -> (FieldFormat, String, [UPrintf])", "code": "getSpecs _ _ _ _ \"\"       _  =\n  errorShortFormat\ngetSpecs _ z s a ('-' : cs0) us = getSpecs True z s a cs0 us\ngetSpecs l _ s a ('0' : cs0) us = getSpecs l True s a cs0 us\ngetSpecs l z _ a ('+' : cs0) us = getSpecs l z (Just SignPlus) a cs0 us\ngetSpecs l z s _ ('#' : cs0) us = getSpecs l z s True cs0 us\ngetSpecs l z s a (' ' : cs0) us =\n  getSpecs l z ss a cs0 us\n  where\n    ss = case s of\n      Just SignPlus -> Just SignPlus\n      _ -> Just SignSpace\ngetSpecs l z s a ('*' : cs0) us =\n  let (us', n) = getStar us\n      ((p, cs''), us'') = case cs0 of\n        '.':'*':r ->\n          let (us''', p') = getStar us' in ((Just p', r), us''')\n        '.':r ->\n          let (p', r') = stoi r in ((Just p', r'), us')\n        _ ->\n          ((Nothing, cs0), us')\n      FormatParse ms c cs =\n        case us'' of\n          (ufmt, _) : _ -> ufmt cs''\n          [] -> errorMissingArgument\n  in\n   (FieldFormat {\n       fmtWidth = Just (abs n),\n       fmtPrecision = p,\n       fmtAdjust = adjustment (Just n) p l z,\n       fmtSign = s,\n       fmtAlternate = a,\n       fmtModifiers = ms,\n       fmtChar = c}, cs, us'')\ngetSpecs l z s a ('.' : cs0) us =\n  let ((p, cs'), us') = case cs0 of\n        '*':cs'' -> let (us'', p') = getStar us in ((p', cs''), us'')\n        _ ->        (stoi cs0, us)\n      FormatParse ms c cs =\n        case us' of\n          (ufmt, _) : _ -> ufmt cs'\n          [] -> errorMissingArgument\n  in\n   (FieldFormat {\n       fmtWidth = Nothing,\n       fmtPrecision = Just p,\n       fmtAdjust = adjustment Nothing (Just p) l z,\n       fmtSign = s,\n       fmtAlternate = a,\n       fmtModifiers = ms,\n       fmtChar = c}, cs, us')\ngetSpecs l z s a cs0@(_ : _) us =\n  let FormatParse ms c cs =\n        case us of\n          (ufmt, _) : _ -> ufmt cs0\n          [] -> errorMissingArgument\n  in\n   (FieldFormat {\n       fmtWidth = Nothing,\n       fmtPrecision = Nothing,\n       fmtAdjust = adjustment Nothing Nothing l z,\n       fmtSign = s,\n       fmtAlternate = a,\n       fmtModifiers = ms,\n       fmtChar = c}, cs, us)\ngetSpecs l z s a cs0@(c0 : _) us | isDigit c0 =\n  let (n, cs') = stoi cs0\n      ((p, cs''), us') = case cs' of\n        '.' : '*' : r ->\n          let (us'', p') = getStar us in ((Just p', r), us'')\n        '.' : r ->\n          let (p', r') = stoi r in ((Just p', r'), us)\n        _ ->\n          ((Nothing, cs'), us)\n      FormatParse ms c cs =\n        case us' of\n          (ufmt, _) : _ -> ufmt cs''\n          [] -> errorMissingArgument\n  in\n   (FieldFormat {\n       fmtWidth = Just (abs n),\n       fmtPrecision = p,\n       fmtAdjust = adjustment (Just n) p l z,\n       fmtSign = s,\n       fmtAlternate = a,\n       fmtModifiers = ms,\n       fmtChar = c}, cs, us')", "poly_type": "Monomorphic", "dependencies": "a :: k\ngetStar :: [UPrintf] -> ([UPrintf], Int)\nstoi :: String -> (Int, String)\nadjustment :: Maybe Int -> Maybe a -> Bool -> Bool\n           -> Maybe FormatAdjustment", "locations": [[770, 11], [770, 13], [770, 15], [770, 24], [770, 29], [770, 48], [770, 50], [770, 52], [770, 54], [770, 58], [771, 9], [771, 11], [771, 15], [771, 24], [771, 29], [771, 43], [771, 45], [771, 63], [771, 65], [771, 69], [772, 9], [772, 11], [772, 13], [772, 15], [772, 24], [772, 29], [773, 11], [773, 13], [773, 15], [773, 18], [773, 20], [773, 24], [775, 4], [775, 14], [778, 9], [778, 13], [778, 15], [778, 24], [778, 29], [778, 43], [778, 50], [778, 52], [778, 54], [778, 58], [779, 9], [779, 11], [779, 13], [779, 24], [779, 29], [779, 43], [779, 45], [779, 47], [779, 54], [779, 58], [780, 9], [780, 11], [780, 13], [780, 15], [780, 24], [780, 29], [781, 7], [781, 12], [781, 17], [781, 25], [782, 8], [782, 11], [782, 18], [782, 31], [783, 16], [784, 15], [784, 22], [784, 28], [784, 36], [784, 50], [784, 54], [784, 58], [785, 12], [786, 15], [786, 19], [786, 25], [786, 30], [786, 42], [786, 46], [786, 51], [788, 21], [788, 27], [789, 18], [789, 21], [789, 23], [790, 13], [791, 11], [791, 27], [791, 32], [792, 16], [795, 7], [795, 24], [795, 28], [796, 7], [796, 22], [797, 7], [797, 19], [797, 36], [797, 39], [797, 41], [797, 43], [798, 7], [798, 17], [799, 7], [799, 22], [800, 7], [800, 22], [801, 7], [801, 17], [801, 21], [801, 25], [802, 9], [802, 11], [802, 13], [802, 15], [802, 24], [802, 29], [803, 8], [803, 11], [803, 17], [803, 29], [804, 12], [804, 25], [804, 31], [804, 37], [804, 45], [804, 53], [804, 57], [804, 64], [805, 21], [805, 26], [805, 31], [806, 18], [806, 21], [806, 23], [807, 13], [808, 11], [808, 27], [808, 32], [809, 16], [812, 7], [813, 7], [813, 27], [814, 7], [814, 19], [814, 44], [814, 47], [814, 49], [815, 7], [815, 17], [816, 7], [816, 22], [817, 7], [817, 22], [818, 7], [818, 17], [818, 21], [818, 25], [819, 9], [819, 11], [819, 13], [819, 15], [819, 17], [819, 22], [819, 30], [819, 35], [819, 43], [820, 7], [820, 10], [820, 17], [820, 22], [821, 8], [821, 11], [821, 18], [821, 30], [822, 20], [823, 15], [823, 21], [823, 27], [823, 35], [823, 48], [823, 52], [823, 56], [824, 14], [825, 15], [825, 19], [825, 25], [825, 30], [825, 42], [825, 46], [825, 51], [827, 21], [827, 27], [828, 18], [828, 21], [828, 23], [829, 13], [830, 11], [830, 27], [830, 32], [831, 16], [834, 7], [834, 24], [834, 28], [835, 7], [835, 22], [836, 7], [836, 19], [836, 36], [836, 39], [836, 41], [836, 43], [837, 7], [837, 17], [838, 7], [838, 22], [839, 7], [839, 22], [840, 7], [840, 17], [840, 21], [840, 25], [841, 9], [841, 11], [841, 13], [841, 15], [841, 17], [841, 29], [842, 18], [842, 21], [842, 23], [843, 13], [844, 11], [844, 27], [844, 32], [845, 16], [848, 7], [849, 7], [850, 7], [850, 19], [850, 46], [850, 48], [851, 7], [851, 17], [852, 7], [852, 22], [853, 7], [853, 22], [854, 7], [854, 17], [854, 21], [854, 25], [856, 2]], "locations_src": ["z", "s", "a", "cs0", "us", "z", "s", "a", "cs0", "us", "l", "z", "a", "cs0", "us", "l", "z", "a", "cs0", "us", "l", "z", "s", "a", "cs0", "us", "l", "z", "ss", "a", "cs0", "us", "ss", "s", "l", "s", "a", "cs0", "us", "l", "s", "a", "cs0", "us", "l", "z", "s", "cs0", "us", "l", "z", "s", "cs0", "us", "l", "z", "s", "a", "cs0", "us", "us'", "n", "getStar", "us", "p", "cs''", "us''", "cs0", "r", "us'''", "p'", "getStar", "us'", "p'", "r", "us'''", "r", "p'", "r'", "stoi", "r", "p'", "r'", "us'", "cs0", "us'", "ms", "c", "cs", "us''", "ufmt", "ufmt", "cs''", "errorMissingArgument", "fmtWidth", "abs", "n", "fmtPrecision", "p", "fmtAdjust", "adjustment", "n", "p", "l", "z", "fmtSign", "s", "fmtAlternate", "a", "fmtModifiers", "ms", "fmtChar", "c", "cs", "us''", "l", "z", "s", "a", "cs0", "us", "p", "cs'", "us'", "cs0", "cs''", "us''", "p'", "getStar", "us", "p'", "cs''", "us''", "stoi", "cs0", "us", "ms", "c", "cs", "us'", "ufmt", "ufmt", "cs'", "errorMissingArgument", "fmtWidth", "fmtPrecision", "p", "fmtAdjust", "adjustment", "p", "l", "z", "fmtSign", "s", "fmtAlternate", "a", "fmtModifiers", "ms", "fmtChar", "c", "cs", "us'", "l", "z", "s", "a", "cs0", "c0", "us", "isDigit", "c0", "n", "cs'", "stoi", "cs0", "p", "cs''", "us'", "cs'", "r", "us''", "p'", "getStar", "us", "p'", "r", "us''", "r", "p'", "r'", "stoi", "r", "p'", "r'", "us", "cs'", "us", "ms", "c", "cs", "us'", "ufmt", "ufmt", "cs''", "errorMissingArgument", "fmtWidth", "abs", "n", "fmtPrecision", "p", "fmtAdjust", "adjustment", "n", "p", "l", "z", "fmtSign", "s", "fmtAlternate", "a", "fmtModifiers", "ms", "fmtChar", "c", "cs", "us'", "l", "z", "s", "a", "cs0", "us", "ms", "c", "cs", "us", "ufmt", "ufmt", "cs0", "errorMissingArgument", "fmtWidth", "fmtPrecision", "fmtAdjust", "adjustment", "l", "z", "fmtSign", "s", "fmtAlternate", "a", "fmtModifiers", "ms", "fmtChar", "c", "cs", "us", "errorShortFormat"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--getStar", "signature": "getStar :: [UPrintf] -> ([UPrintf], Int)", "code": "getStar us =\n  let ufmt = FieldFormat {\n        fmtWidth = Nothing,\n        fmtPrecision = Nothing,\n        fmtAdjust = Nothing,\n        fmtSign = Nothing,\n        fmtAlternate = False,\n        fmtModifiers = \"\",\n        fmtChar = 'd' } in\n  case us of\n    [] -> errorMissingArgument\n    (_, nu) : us' -> (us', read (nu ufmt \"\"))", "poly_type": "Monomorphic", "dependencies": "", "locations": [[860, 8], [861, 6], [862, 8], [863, 8], [864, 8], [865, 8], [866, 8], [867, 8], [868, 8], [869, 7], [870, 10], [871, 8], [871, 14], [871, 22], [871, 27], [871, 33], [871, 36]], "locations_src": ["us", "ufmt", "fmtWidth", "fmtPrecision", "fmtAdjust", "fmtSign", "fmtAlternate", "fmtModifiers", "fmtChar", "us", "errorMissingArgument", "nu", "us'", "us'", "read", "nu", "ufmt"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--dfmt", "signature": "dfmt :: (RealFloat a) => Char -> Maybe Int -> Bool -> a -> (String, String)", "code": "dfmt c p a d =\n  let caseConvert = if isUpper c then map toUpper else id\n      showFunction = case toLower c of\n        'e' -> showEFloat\n        'f' -> if a then showFFloatAlt else showFFloat\n        'g' -> if a then showGFloatAlt else showGFloat\n        _   -> perror \"internal error: impossible dfmt\"\n      result = caseConvert $ showFunction p d \"\"\n  in\n   case result of\n     '-' : cs -> (\"-\", cs)\n     cs       -> (\"\" , cs)", "poly_type": "Ad-hoc", "dependencies": "perror :: String -> a\na :: k\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b", "locations": [[875, 5], [875, 7], [875, 9], [875, 11], [876, 6], [876, 23], [876, 31], [876, 38], [876, 42], [876, 55], [877, 6], [877, 26], [877, 34], [878, 15], [879, 18], [879, 25], [879, 44], [880, 18], [880, 25], [880, 44], [881, 15], [882, 6], [882, 15], [882, 29], [882, 42], [882, 44], [884, 8], [885, 11], [885, 23], [886, 5], [886, 23], [882, 27]], "locations_src": ["c", "p", "a", "d", "caseConvert", "isUpper", "c", "map", "toUpper", "id", "showFunction", "toLower", "c", "showEFloat", "a", "showFFloatAlt", "showFFloat", "a", "showGFloatAlt", "showGFloat", "perror", "result", "caseConvert", "showFunction", "p", "d", "result", "cs", "cs", "cs", "cs", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--perror", "signature": "perror :: String -> a", "code": "perror s = errorWithoutStackTrace $ \"printf: \" ++ s", "poly_type": "Parametric", "dependencies": "", "locations": [[894, 7], [894, 11], [894, 50], [894, 34], [894, 47]], "locations_src": ["s", "errorWithoutStackTrace", "s", "$", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Text/Printf.hs--errorBadFormat", "signature": "errorBadFormat :: Char -> a", "code": "errorBadFormat c = perror $ \"bad formatting char \" ++ show c", "poly_type": "Parametric", "dependencies": "perror :: String -> a", "locations": [[901, 15], [901, 19], [901, 54], [901, 59], [901, 26], [901, 51]], "locations_src": ["c", "perror", "show", "c", "$", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldMap", "signature": "bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> m", "code": "bifoldMap _ g (Right b) = g b\nbifoldMap f _ (Const a) = f a\nbifoldMap f _ (K1 c) = f c\nbifoldMap f _ (Left a) = f a\nbifoldMap f g = bifoldr (mappend . f) (mappend . g) mempty\nbifoldMap f g ~(_,_,_,_,_,a,b) = f a `mappend` g b\nbifoldMap f g ~(_,_,_,_,a,b) = f a `mappend` g b\nbifoldMap f g ~(_,_,_,a,b) = f a `mappend` g b\nbifoldMap f g ~(_,_,a,b) = f a `mappend` g b\nbifoldMap f g ~(_,a,b) = f a `mappend` g b\nbifoldMap f g ~(a, b) = f a `mappend` g b", "poly_type": "Ad-hoc", "dependencies": "a :: k\nbifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> c", "locations": [[167, 12], [167, 14], [167, 18], [167, 27], [167, 37], [167, 41], [167, 51], [167, 54], [167, 35], [167, 49], [245, 12], [245, 14], [245, 18], [245, 21], [245, 26], [245, 28], [245, 31], [245, 40], [245, 42], [249, 12], [249, 23], [249, 28], [249, 30], [253, 12], [253, 20], [253, 25], [253, 27], [257, 12], [257, 14], [257, 20], [257, 22], [257, 27], [257, 29], [257, 32], [257, 41], [257, 43], [261, 12], [261, 14], [261, 22], [261, 24], [261, 29], [261, 31], [261, 34], [261, 43], [261, 45], [265, 12], [265, 14], [265, 24], [265, 26], [265, 31], [265, 33], [265, 36], [265, 45], [265, 47], [269, 12], [269, 14], [269, 26], [269, 28], [269, 33], [269, 35], [269, 38], [269, 47], [269, 49], [273, 12], [273, 14], [273, 28], [273, 30], [273, 35], [273, 37], [273, 40], [273, 49], [273, 51], [277, 12], [277, 22], [277, 27], [277, 29], [278, 14], [278, 23], [278, 28], [278, 30]], "locations_src": ["f", "g", "bifoldr", "mappend", "f", "mappend", "g", "mempty", ".", ".", "f", "g", "a", "b", "f", "a", "mappend", "g", "b", "f", "a", "f", "a", "f", "c", "f", "c", "f", "g", "a", "b", "f", "a", "mappend", "g", "b", "f", "g", "a", "b", "f", "a", "mappend", "g", "b", "f", "g", "a", "b", "f", "a", "mappend", "g", "b", "f", "g", "a", "b", "f", "a", "mappend", "g", "b", "f", "g", "a", "b", "f", "a", "mappend", "g", "b", "f", "a", "f", "a", "g", "b", "g", "b"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldr", "signature": "bifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> c", "code": "bifoldr f g z t = appEndo (bifoldMap (Endo #. f) (Endo #. g) t) z", "poly_type": "Parametric", "dependencies": "bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> m\n(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "locations": [[196, 10], [196, 12], [196, 14], [196, 16], [196, 20], [196, 29], [196, 48], [196, 60], [196, 63], [196, 66], [196, 45], [196, 57]], "locations_src": ["f", "g", "z", "t", "appEndo", "bifoldMap", "f", "g", "t", "z", "#.", "#."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldl", "signature": "bifoldl :: (c -> a -> c) -> (c -> b -> c) -> c -> p a b -> c", "code": "bifoldl f g z t = appEndo (getDual (bifoldMap (Dual . Endo . flip f)\n                                                (Dual . Endo . flip g) t)) z", "poly_type": "Parametric", "dependencies": "bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> m", "locations": [[230, 10], [230, 12], [230, 14], [230, 16], [230, 20], [230, 29], [230, 38], [230, 63], [230, 68], [231, 63], [231, 68], [231, 71], [231, 75], [230, 54], [230, 61], [231, 54], [231, 61]], "locations_src": ["f", "g", "z", "t", "appEndo", "getDual", "bifoldMap", "flip", "f", "flip", "g", "t", "z", ".", ".", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldr'", "signature": "bifoldr' :: Bifoldable t => (a -> c -> c) -> (b -> c -> c) -> c -> t a b -> c", "code": "bifoldr' f g z0 xs = bifoldl f' g' id xs z0 where\n  f' k x z = k $! f x z\n  g' k x z = k $! g x z", "poly_type": "Ad-hoc", "dependencies": "bifoldl :: (c -> a -> c) -> (c -> b -> c) -> c -> p a b -> c", "locations": [[285, 9], [285, 11], [285, 13], [285, 16], [285, 21], [285, 29], [285, 32], [285, 35], [285, 38], [285, 41], [286, 2], [286, 5], [286, 7], [286, 9], [286, 13], [286, 18], [286, 20], [286, 22], [287, 2], [287, 5], [287, 7], [287, 9], [287, 13], [287, 18], [287, 20], [287, 22], [286, 15], [287, 15]], "locations_src": ["f", "g", "z0", "xs", "bifoldl", "f'", "g'", "id", "xs", "z0", "f'", "k", "x", "z", "k", "f", "x", "z", "g'", "k", "x", "z", "k", "g", "x", "z", "$!", "$!"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldr1", "signature": "bifoldr1 :: Bifoldable t => (a -> a -> a) -> t a a -> a", "code": "bifoldr1 f xs = fromMaybe (error \"bifoldr1: empty structure\")\n                  (bifoldr mbf mbf Nothing xs)\n  where\n    mbf x m = Just (case m of\n                      Nothing -> x\n                      Just y  -> f x y)", "poly_type": "Ad-hoc", "dependencies": "bifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> c", "locations": [[321, 9], [321, 11], [321, 16], [321, 27], [322, 19], [322, 27], [322, 31], [322, 43], [324, 4], [324, 8], [324, 10], [324, 25], [325, 33], [326, 27], [326, 33], [326, 35], [326, 37]], "locations_src": ["f", "xs", "fromMaybe", "error", "bifoldr", "mbf", "mbf", "xs", "mbf", "x", "m", "m", "x", "y", "f", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldrM", "signature": "bifoldrM :: (Bifoldable t, Monad m)\n         => (a -> c -> m c) -> (b -> c -> m c) -> c -> t a b -> m c", "code": "bifoldrM f g z0 xs = bifoldl f' g' return xs z0 where\n  f' k x z = f x z >>= k\n  g' k x z = g x z >>= k", "poly_type": "Ad-hoc", "dependencies": "bifoldl :: (c -> a -> c) -> (c -> b -> c) -> c -> p a b -> c", "locations": [[333, 9], [333, 11], [333, 13], [333, 16], [333, 21], [333, 29], [333, 32], [333, 35], [333, 42], [333, 45], [334, 2], [334, 5], [334, 7], [334, 9], [334, 13], [334, 15], [334, 17], [334, 23], [335, 2], [335, 5], [335, 7], [335, 9], [335, 13], [335, 15], [335, 17], [335, 23], [334, 19], [335, 19]], "locations_src": ["f", "g", "z0", "xs", "bifoldl", "f'", "g'", "return", "xs", "z0", "f'", "k", "x", "z", "f", "x", "z", "k", "g'", "k", "x", "z", "g", "x", "z", "k", ">>=", ">>="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldl1", "signature": "bifoldl1 :: Bifoldable t => (a -> a -> a) -> t a a -> a", "code": "bifoldl1 f xs = fromMaybe (error \"bifoldl1: empty structure\")\n                  (bifoldl mbf mbf Nothing xs)\n  where\n    mbf m y = Just (case m of\n                      Nothing -> y\n                      Just x  -> f x y)", "poly_type": "Ad-hoc", "dependencies": "bifoldl :: (c -> a -> c) -> (c -> b -> c) -> c -> p a b -> c", "locations": [[383, 9], [383, 11], [383, 16], [383, 27], [384, 19], [384, 27], [384, 31], [384, 43], [386, 4], [386, 8], [386, 10], [386, 25], [387, 33], [388, 27], [388, 33], [388, 35], [388, 37]], "locations_src": ["f", "xs", "fromMaybe", "error", "bifoldl", "mbf", "mbf", "xs", "mbf", "m", "y", "m", "y", "x", "f", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifoldlM", "signature": "bifoldlM :: (Bifoldable t, Monad m)\n         => (a -> b -> m a) -> (a -> c -> m a) -> a -> t b c -> m a", "code": "bifoldlM f g z0 xs = bifoldr f' g' return xs z0 where\n  f' x k z = f z x >>= k\n  g' x k z = g z x >>= k", "poly_type": "Ad-hoc", "dependencies": "bifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> c", "locations": [[412, 9], [412, 11], [412, 13], [412, 16], [412, 21], [412, 29], [412, 32], [412, 35], [412, 42], [412, 45], [413, 2], [413, 5], [413, 7], [413, 9], [413, 13], [413, 15], [413, 17], [413, 23], [414, 2], [414, 5], [414, 7], [414, 9], [414, 13], [414, 15], [414, 17], [414, 23], [413, 19], [414, 19]], "locations_src": ["f", "g", "z0", "xs", "bifoldr", "f'", "g'", "return", "xs", "z0", "f'", "x", "k", "z", "f", "z", "x", "k", "g'", "x", "k", "z", "g", "z", "x", "k", ">>=", ">>="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bitraverse_", "signature": "bitraverse_ :: (Bifoldable t, Applicative f)\n            => (a -> f c) -> (b -> f d) -> t a b -> f ()", "code": "bitraverse_ f g = bifoldr ((*>) . f) ((*>) . g) (pure ())", "poly_type": "Ad-hoc", "dependencies": "bifoldr :: (a -> c -> c) -> (b -> c -> c) -> c -> p a b -> c", "locations": [[437, 12], [437, 14], [437, 18], [437, 34], [437, 45], [437, 49], [437, 28], [437, 32], [437, 39], [437, 43]], "locations_src": ["f", "g", "bifoldr", "f", "g", "pure", "*>", ".", "*>", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifor_", "signature": "bifor_ :: (Bifoldable t, Applicative f)\n       => t a b -> (a -> f c) -> (b -> f d) -> f ()", "code": "bifor_ t f g = bitraverse_ f g t", "poly_type": "Ad-hoc", "dependencies": "bitraverse_ :: (Bifoldable t, Applicative f)\n            => (a -> f c) -> (b -> f d) -> t a b -> f ()", "locations": [[459, 7], [459, 9], [459, 11], [459, 15], [459, 27], [459, 29], [459, 31]], "locations_src": ["t", "f", "g", "bitraverse_", "f", "g", "t"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bielem", "signature": "bielem :: (Bifoldable t, Eq a) => a -> t a a -> Bool", "code": "bielem x = biany (== x) (== x)", "poly_type": "Ad-hoc", "dependencies": "biany :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Bool", "locations": [[621, 7], [621, 11], [621, 21], [621, 28], [621, 18], [621, 25]], "locations_src": ["x", "biany", "x", "x", "==", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--biany", "signature": "biany :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Bool", "code": "biany p q = getAny #. bifoldMap (Any . p) (Any . q)", "poly_type": "Ad-hoc", "dependencies": "bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> m\n(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "locations": [[895, 6], [895, 8], [895, 12], [895, 22], [895, 39], [895, 49], [895, 19], [895, 37], [895, 47]], "locations_src": ["p", "q", "getAny", "bifoldMap", "p", "q", "#.", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--biall", "signature": "biall :: Bifoldable t => (a -> Bool) -> (b -> Bool) -> t a b -> Bool", "code": "biall p q = getAll #. bifoldMap (All . p) (All . q)", "poly_type": "Ad-hoc", "dependencies": "bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> m\n(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "locations": [[926, 6], [926, 8], [926, 12], [926, 22], [926, 39], [926, 49], [926, 19], [926, 37], [926, 47]], "locations_src": ["p", "q", "getAll", "bifoldMap", "p", "q", "#.", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bimaximumBy", "signature": "bimaximumBy :: Bifoldable t => (a -> a -> Ordering) -> t a a -> a", "code": "bimaximumBy cmp = bifoldr1 max'\n  where max' x y = case cmp x y of\n                        GT -> x\n                        _  -> y", "poly_type": "Ad-hoc", "dependencies": "bifoldr1 :: Bifoldable t => (a -> a -> a) -> t a a -> a", "locations": [[952, 12], [952, 18], [952, 27], [953, 8], [953, 13], [953, 15], [953, 24], [953, 28], [953, 30], [954, 30], [955, 30]], "locations_src": ["cmp", "bifoldr1", "max'", "max'", "x", "y", "cmp", "x", "y", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--biminimumBy", "signature": "biminimumBy :: Bifoldable t => (a -> a -> Ordering) -> t a a -> a", "code": "biminimumBy cmp = bifoldr1 min'\n  where min' x y = case cmp x y of\n                        GT -> y\n                        _  -> x", "poly_type": "Ad-hoc", "dependencies": "bifoldr1 :: Bifoldable t => (a -> a -> a) -> t a a -> a", "locations": [[981, 12], [981, 18], [981, 27], [982, 8], [982, 13], [982, 15], [982, 24], [982, 28], [982, 30], [983, 30], [984, 30]], "locations_src": ["cmp", "bifoldr1", "min'", "min'", "x", "y", "cmp", "x", "y", "y", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--binotElem", "signature": "binotElem :: (Bifoldable t, Eq a) => a -> t a a-> Bool", "code": "binotElem x =  not . bielem x", "poly_type": "Ad-hoc", "dependencies": "bielem :: (Bifoldable t, Eq a) => a -> t a a -> Bool", "locations": [[1012, 10], [1012, 15], [1012, 21], [1012, 28], [1012, 19]], "locations_src": ["x", "not", "bielem", "x", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable.hs--bifind", "signature": "bifind :: Bifoldable t => (a -> Bool) -> t a a -> Maybe a", "code": "bifind p = getFirst . bifoldMap finder finder\n  where finder x = First (if p x then Just x else Nothing)", "poly_type": "Ad-hoc", "dependencies": "bifoldMap :: Monoid m => (a -> m) -> (b -> m) -> p a b -> m", "locations": [[1038, 7], [1038, 11], [1038, 22], [1038, 32], [1038, 39], [1039, 8], [1039, 15], [1039, 29], [1039, 31], [1039, 43], [1038, 20]], "locations_src": ["p", "getFirst", "bifoldMap", "finder", "finder", "finder", "x", "p", "x", "x", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Complex.hs--realPart", "signature": "realPart :: Complex a -> a", "code": "realPart (x :+ _) =  x", "poly_type": "Parametric", "dependencies": "", "locations": [[115, 10], [115, 21]], "locations_src": ["x", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Complex.hs--imagPart", "signature": "imagPart :: Complex a -> a", "code": "imagPart (_ :+ y) =  y", "poly_type": "Parametric", "dependencies": "", "locations": [[127, 15], [127, 21]], "locations_src": ["y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Complex.hs--magnitude", "signature": "magnitude :: (RealFloat a) => Complex a -> a", "code": "magnitude (x:+y) =  scaleFloat k\n                     (sqrt (sqr (scaleFloat mk x) + sqr (scaleFloat mk y)))\n                    where k  = max (exponent x) (exponent y)\n                          mk = - k\n                          sqr z = z * z", "poly_type": "Ad-hoc", "dependencies": "max :: a -> a -> a", "locations": [[215, 11], [215, 14], [215, 20], [215, 31], [216, 22], [216, 28], [216, 33], [216, 44], [216, 47], [216, 52], [216, 57], [216, 68], [216, 71], [217, 26], [217, 31], [217, 36], [217, 45], [217, 49], [217, 58], [218, 26], [218, 33], [219, 26], [219, 30], [219, 34], [219, 38], [216, 50], [219, 36]], "locations_src": ["x", "y", "scaleFloat", "k", "sqrt", "sqr", "scaleFloat", "mk", "x", "sqr", "scaleFloat", "mk", "y", "k", "max", "exponent", "x", "exponent", "y", "mk", "k", "sqr", "z", "z", "z", "+", "*"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Complex.hs--phase", "signature": "phase :: (RealFloat a) => Complex a -> a", "code": "phase (0 :+ 0)   = 0\nphase (x:+y)     = atan2 y x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[234, 7], [234, 10], [234, 19], [234, 25], [234, 27]], "locations_src": ["x", "y", "atan2", "y", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Ratio.hs--approxRational", "signature": "approxRational :: (RealFrac a) => a -> a -> Rational", "code": "approxRational rat eps =\n    -- We convert rat and eps to rational *before* subtracting/adding since\n    -- otherwise we may overflow. This was the cause of #14425.\n    simplest (toRational rat - toRational eps) (toRational rat + toRational eps)\n  where\n    simplest x y\n      | y < x      =  simplest y x\n      | x == y     =  xr\n      | x > 0      =  simplest' n d n' d'\n      | y < 0      =  - simplest' (-n') d' (-n) d\n      | otherwise  =  0 :% 1\n      where xr  = toRational x\n            n   = numerator xr\n            d   = denominator xr\n            nd' = toRational y\n            n'  = numerator nd'\n            d'  = denominator nd'\n\n    simplest' n d n' d'       -- assumes 0 < n%d < n'%d'\n      | r == 0     =  q :% 1\n      | q /= q'    =  (q+1) :% 1\n      | otherwise  =  (q*n''+d'') :% n''\n      where (q,r)      =  quotRem n d\n            (q',r')    =  quotRem n' d'\n            nd''       =  simplest' d' r' d r\n            n''        =  numerator nd''\n            d''        =  denominator nd''", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[51, 15], [51, 19], [54, 4], [54, 14], [54, 25], [54, 31], [54, 42], [54, 48], [54, 59], [54, 65], [54, 76], [56, 4], [56, 13], [56, 15], [57, 8], [57, 12], [57, 22], [57, 31], [57, 33], [58, 8], [58, 13], [58, 22], [59, 8], [59, 22], [59, 32], [59, 34], [59, 36], [59, 39], [60, 8], [60, 24], [60, 36], [60, 40], [60, 45], [60, 48], [61, 8], [62, 12], [62, 18], [62, 29], [63, 12], [63, 18], [63, 28], [64, 12], [64, 18], [64, 30], [65, 12], [65, 18], [65, 29], [66, 12], [66, 18], [66, 28], [67, 12], [67, 18], [67, 30], [69, 4], [69, 14], [69, 16], [69, 18], [69, 21], [70, 8], [70, 22], [71, 8], [71, 13], [71, 23], [72, 8], [72, 23], [72, 25], [72, 29], [72, 37], [73, 13], [73, 15], [73, 26], [73, 34], [73, 36], [74, 13], [74, 16], [74, 26], [74, 34], [74, 37], [75, 12], [75, 26], [75, 36], [75, 39], [75, 42], [75, 44], [76, 12], [76, 26], [76, 36], [77, 12], [77, 26], [77, 38], [54, 29], [54, 63], [57, 10], [58, 10], [59, 10], [60, 10], [70, 10], [71, 10], [71, 24], [72, 24], [72, 28]], "locations_src": ["rat", "eps", "simplest", "toRational", "rat", "toRational", "eps", "toRational", "rat", "toRational", "eps", "simplest", "x", "y", "y", "x", "simplest", "y", "x", "x", "y", "xr", "x", "simplest'", "n", "d", "n'", "d'", "y", "simplest'", "n'", "d'", "n", "d", "otherwise", "xr", "toRational", "x", "n", "numerator", "xr", "d", "denominator", "xr", "nd'", "toRational", "y", "n'", "numerator", "nd'", "d'", "denominator", "nd'", "simplest'", "n", "d", "n'", "d'", "r", "q", "q", "q'", "q", "otherwise", "q", "n''", "d''", "n''", "q", "r", "quotRem", "n", "d", "q'", "r'", "quotRem", "n'", "d'", "nd''", "simplest'", "d'", "r'", "d", "r", "n''", "numerator", "nd''", "d''", "denominator", "nd''", "-", "+", "<", "==", ">", "<", "==", "/=", "+", "*", "+"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bitraversable.hs--bitraverse", "signature": "bitraverse :: Applicative f => (a -> f c) -> (b -> f d) -> t a b -> f (t c d)", "code": "bitraverse _ g (Right b) = Right <$> g b\nbitraverse f _ (Const a) = Const <$> f a\nbitraverse f _ (K1 c) = K1 <$> f c\nbitraverse f _ (Left a) = Left <$> f a\nbitraverse f g ~(a, b) = liftA2 (,) (f a) (g b)\nbitraverse f g ~(x, a, b) = liftA2 ((,,) x) (f a) (g b)\nbitraverse f g ~(x, y, a, b) = liftA2 ((,,,) x y) (f a) (g b)\nbitraverse f g ~(x, y, z, a, b) = liftA2 ((,,,,) x y z) (f a) (g b)\nbitraverse f g ~(x, y, z, w, a, b) = liftA2 ((,,,,,) x y z w) (f a) (g b)\nbitraverse f g ~(x, y, z, w, v, a, b) =\n    liftA2 ((,,,,,,) x y z w v) (f a) (g b)", "poly_type": "Ad-hoc", "dependencies": "a :: k", "locations": [[186, 13], [186, 15], [186, 19], [186, 22], [186, 27], [186, 39], [186, 41], [186, 45], [186, 47], [190, 13], [190, 15], [190, 19], [190, 22], [190, 25], [190, 30], [190, 43], [190, 47], [190, 49], [190, 53], [190, 55], [194, 13], [194, 15], [194, 19], [194, 22], [194, 25], [194, 28], [194, 33], [194, 47], [194, 49], [194, 53], [194, 55], [194, 59], [194, 61], [198, 13], [198, 15], [198, 19], [198, 22], [198, 25], [198, 28], [198, 31], [198, 36], [198, 51], [198, 53], [198, 55], [198, 59], [198, 61], [198, 65], [198, 67], [202, 13], [202, 15], [202, 19], [202, 22], [202, 25], [202, 28], [202, 31], [202, 34], [202, 39], [202, 55], [202, 57], [202, 59], [202, 61], [202, 65], [202, 67], [202, 71], [202, 73], [206, 13], [206, 15], [206, 19], [206, 22], [206, 25], [206, 28], [206, 31], [206, 34], [206, 37], [207, 4], [207, 21], [207, 23], [207, 25], [207, 27], [207, 29], [207, 33], [207, 35], [207, 39], [207, 41], [211, 13], [211, 23], [211, 37], [211, 39], [211, 33], [212, 15], [212, 24], [212, 39], [212, 41], [212, 35], [216, 13], [216, 24], [216, 39], [216, 41], [216, 35], [220, 13], [220, 21], [220, 33], [220, 35], [220, 29]], "locations_src": ["f", "g", "a", "b", "liftA2", "f", "a", "g", "b", "f", "g", "x", "a", "b", "liftA2", "x", "f", "a", "g", "b", "f", "g", "x", "y", "a", "b", "liftA2", "x", "y", "f", "a", "g", "b", "f", "g", "x", "y", "z", "a", "b", "liftA2", "x", "y", "z", "f", "a", "g", "b", "f", "g", "x", "y", "z", "w", "a", "b", "liftA2", "x", "y", "z", "w", "f", "a", "g", "b", "f", "g", "x", "y", "z", "w", "v", "a", "b", "liftA2", "x", "y", "z", "w", "v", "f", "a", "g", "b", "f", "a", "f", "a", "<$>", "g", "b", "g", "b", "<$>", "f", "a", "f", "a", "<$>", "f", "c", "f", "c", "<$>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bitraversable.hs--bifor", "signature": "bifor :: (Bitraversable t, Applicative f)\n      => t a b -> (a -> f c) -> (b -> f d) -> f (t c d)", "code": "bifor t f g = bitraverse f g t", "poly_type": "Ad-hoc", "dependencies": "bitraverse :: (a -> Const m ())\n              -> (b -> Const m ()) -> t a b -> Const m (t () ())", "locations": [[247, 6], [247, 8], [247, 10], [247, 14], [247, 25], [247, 27], [247, 29]], "locations_src": ["t", "f", "g", "bitraverse", "f", "g", "t"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bitraversable.hs--bimapAccumL", "signature": "bimapAccumL :: Bitraversable t => (a -> b -> (a, c)) -> (a -> d -> (a, e))\n            -> a -> t b d -> (a, t c e)", "code": "bimapAccumL f g s t\n  = runStateL (bitraverse (StateL . flip f) (StateL . flip g) t) s", "poly_type": "Ad-hoc", "dependencies": "bitraverse :: (a -> Const m ())\n              -> (b -> Const m ()) -> t a b -> Const m (t () ())", "locations": [[271, 12], [271, 14], [271, 16], [271, 18], [272, 4], [272, 15], [272, 36], [272, 41], [272, 54], [272, 59], [272, 62], [272, 65], [272, 34], [272, 52]], "locations_src": ["f", "g", "s", "t", "runStateL", "bitraverse", "flip", "f", "flip", "g", "t", "s", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bitraversable.hs--bimapAccumR", "signature": "bimapAccumR :: Bitraversable t => (a -> b -> (a, c)) -> (a -> d -> (a, e))\n            -> a -> t b d -> (a, t c e)", "code": "bimapAccumR f g s t\n  = runStateR (bitraverse (StateR . flip f) (StateR . flip g) t) s", "poly_type": "Ad-hoc", "dependencies": "bitraverse :: (a -> Const m ())\n              -> (b -> Const m ()) -> t a b -> Const m (t () ())", "locations": [[289, 12], [289, 14], [289, 16], [289, 18], [290, 4], [290, 15], [290, 36], [290, 41], [290, 54], [290, 59], [290, 62], [290, 65], [290, 34], [290, 52]], "locations_src": ["f", "g", "s", "t", "runStateR", "bitraverse", "flip", "f", "flip", "g", "t", "s", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bitraversable.hs--bitraverse", "signature": "bitraverse :: (a -> Identity b)\n              -> (c -> Identity d) -> t a c -> Identity (t b d)", "code": "bitraverse _ g (Right b) = Right <$> g b\nbitraverse f _ (Const a) = Const <$> f a\nbitraverse f _ (K1 c) = K1 <$> f c\nbitraverse f _ (Left a) = Left <$> f a\nbitraverse f g ~(a, b) = liftA2 (,) (f a) (g b)\nbitraverse f g ~(x, a, b) = liftA2 ((,,) x) (f a) (g b)\nbitraverse f g ~(x, y, a, b) = liftA2 ((,,,) x y) (f a) (g b)\nbitraverse f g ~(x, y, z, a, b) = liftA2 ((,,,,) x y z) (f a) (g b)\nbitraverse f g ~(x, y, z, w, a, b) = liftA2 ((,,,,,) x y z w) (f a) (g b)\nbitraverse f g ~(x, y, z, w, v, a, b) =\n    liftA2 ((,,,,,,) x y z w v) (f a) (g b)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[186, 13], [186, 15], [186, 19], [186, 22], [186, 27], [186, 39], [186, 41], [186, 45], [186, 47], [190, 13], [190, 15], [190, 19], [190, 22], [190, 25], [190, 30], [190, 43], [190, 47], [190, 49], [190, 53], [190, 55], [194, 13], [194, 15], [194, 19], [194, 22], [194, 25], [194, 28], [194, 33], [194, 47], [194, 49], [194, 53], [194, 55], [194, 59], [194, 61], [198, 13], [198, 15], [198, 19], [198, 22], [198, 25], [198, 28], [198, 31], [198, 36], [198, 51], [198, 53], [198, 55], [198, 59], [198, 61], [198, 65], [198, 67], [202, 13], [202, 15], [202, 19], [202, 22], [202, 25], [202, 28], [202, 31], [202, 34], [202, 39], [202, 55], [202, 57], [202, 59], [202, 61], [202, 65], [202, 67], [202, 71], [202, 73], [206, 13], [206, 15], [206, 19], [206, 22], [206, 25], [206, 28], [206, 31], [206, 34], [206, 37], [207, 4], [207, 21], [207, 23], [207, 25], [207, 27], [207, 29], [207, 33], [207, 35], [207, 39], [207, 41], [211, 13], [211, 23], [211, 37], [211, 39], [211, 33], [212, 15], [212, 24], [212, 39], [212, 41], [212, 35], [216, 13], [216, 24], [216, 39], [216, 41], [216, 35], [220, 13], [220, 21], [220, 33], [220, 35], [220, 29]], "locations_src": ["f", "g", "a", "b", "liftA2", "f", "a", "g", "b", "f", "g", "x", "a", "b", "liftA2", "x", "f", "a", "g", "b", "f", "g", "x", "y", "a", "b", "liftA2", "x", "y", "f", "a", "g", "b", "f", "g", "x", "y", "z", "a", "b", "liftA2", "x", "y", "z", "f", "a", "g", "b", "f", "g", "x", "y", "z", "w", "a", "b", "liftA2", "x", "y", "z", "w", "f", "a", "g", "b", "f", "g", "x", "y", "z", "w", "v", "a", "b", "liftA2", "x", "y", "z", "w", "v", "f", "a", "g", "b", "f", "a", "f", "a", "<$>", "g", "b", "g", "b", "<$>", "f", "a", "f", "a", "<$>", "f", "c", "f", "c", "<$>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bitraversable.hs--bitraverse", "signature": "bitraverse :: (a -> Const m ())\n              -> (b -> Const m ()) -> t a b -> Const m (t () ())", "code": "bitraverse _ g (Right b) = Right <$> g b\nbitraverse f _ (Const a) = Const <$> f a\nbitraverse f _ (K1 c) = K1 <$> f c\nbitraverse f _ (Left a) = Left <$> f a\nbitraverse f g ~(a, b) = liftA2 (,) (f a) (g b)\nbitraverse f g ~(x, a, b) = liftA2 ((,,) x) (f a) (g b)\nbitraverse f g ~(x, y, a, b) = liftA2 ((,,,) x y) (f a) (g b)\nbitraverse f g ~(x, y, z, a, b) = liftA2 ((,,,,) x y z) (f a) (g b)\nbitraverse f g ~(x, y, z, w, a, b) = liftA2 ((,,,,,) x y z w) (f a) (g b)\nbitraverse f g ~(x, y, z, w, v, a, b) =\n    liftA2 ((,,,,,,) x y z w v) (f a) (g b)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[186, 13], [186, 15], [186, 19], [186, 22], [186, 27], [186, 39], [186, 41], [186, 45], [186, 47], [190, 13], [190, 15], [190, 19], [190, 22], [190, 25], [190, 30], [190, 43], [190, 47], [190, 49], [190, 53], [190, 55], [194, 13], [194, 15], [194, 19], [194, 22], [194, 25], [194, 28], [194, 33], [194, 47], [194, 49], [194, 53], [194, 55], [194, 59], [194, 61], [198, 13], [198, 15], [198, 19], [198, 22], [198, 25], [198, 28], [198, 31], [198, 36], [198, 51], [198, 53], [198, 55], [198, 59], [198, 61], [198, 65], [198, 67], [202, 13], [202, 15], [202, 19], [202, 22], [202, 25], [202, 28], [202, 31], [202, 34], [202, 39], [202, 55], [202, 57], [202, 59], [202, 61], [202, 65], [202, 67], [202, 71], [202, 73], [206, 13], [206, 15], [206, 19], [206, 22], [206, 25], [206, 28], [206, 31], [206, 34], [206, 37], [207, 4], [207, 21], [207, 23], [207, 25], [207, 27], [207, 29], [207, 33], [207, 35], [207, 39], [207, 41], [211, 13], [211, 23], [211, 37], [211, 39], [211, 33], [212, 15], [212, 24], [212, 39], [212, 41], [212, 35], [216, 13], [216, 24], [216, 39], [216, 41], [216, 35], [220, 13], [220, 21], [220, 33], [220, 35], [220, 29]], "locations_src": ["f", "g", "a", "b", "liftA2", "f", "a", "g", "b", "f", "g", "x", "a", "b", "liftA2", "x", "f", "a", "g", "b", "f", "g", "x", "y", "a", "b", "liftA2", "x", "y", "f", "a", "g", "b", "f", "g", "x", "y", "z", "a", "b", "liftA2", "x", "y", "z", "f", "a", "g", "b", "f", "g", "x", "y", "z", "w", "a", "b", "liftA2", "x", "y", "z", "w", "f", "a", "g", "b", "f", "g", "x", "y", "z", "w", "v", "a", "b", "liftA2", "x", "y", "z", "w", "v", "f", "a", "g", "b", "f", "a", "f", "a", "<$>", "g", "b", "g", "b", "<$>", "f", "a", "f", "a", "<$>", "f", "c", "f", "c", "<$>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Semigroup.hs--cycle1", "signature": "cycle1 :: Semigroup m => m -> m", "code": "cycle1 xs = xs' where xs' = xs <> xs'", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[139, 7], [139, 12], [139, 22], [139, 28], [139, 34], [139, 31]], "locations_src": ["xs", "xs'", "xs'", "xs", "xs'", "<>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Semigroup.hs--min", "signature": "min :: a -> a -> a", "code": "min x@(Arg a _) y@(Arg b _)\n    | a <= b    = x\n    | otherwise = y", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[401, 6], [401, 13], [401, 18], [401, 25], [402, 6], [402, 11], [402, 18], [403, 6], [403, 18], [402, 8]], "locations_src": ["x", "a", "y", "b", "a", "b", "x", "otherwise", "y", "<="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Semigroup.hs--max", "signature": "max :: a -> a -> a", "code": "max x@(Arg a _) y@(Arg b _)\n    | a >= b    = x\n    | otherwise = y", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[404, 6], [404, 13], [404, 18], [404, 25], [405, 6], [405, 11], [405, 18], [406, 6], [406, 18], [405, 8]], "locations_src": ["x", "a", "y", "b", "a", "b", "x", "otherwise", "y", ">="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Semigroup.hs--mtimesDefault", "signature": "mtimesDefault :: (Integral b, Monoid a) => b -> a -> a", "code": "mtimesDefault n x\n  | n == 0    = mempty\n  | otherwise = stimes n x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[636, 14], [636, 16], [637, 4], [637, 16], [638, 4], [638, 16], [638, 23], [638, 25], [637, 6]], "locations_src": ["n", "x", "n", "mempty", "otherwise", "stimes", "n", "x", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--div'", "signature": "div' :: (Real a,Integral b) => a -> a -> b", "code": "div' n d = floor ((toRational n) / (toRational d))", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[99, 5], [99, 7], [99, 11], [99, 19], [99, 30], [99, 36], [99, 47], [99, 33]], "locations_src": ["n", "d", "floor", "toRational", "n", "toRational", "d", "/"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--divMod'", "signature": "divMod' :: (Real a,Integral b) => a -> a -> (b,a)", "code": "divMod' n d = (f,n - (fromIntegral f) * d) where\n    f = div' n d", "poly_type": "Ad-hoc", "dependencies": "div' :: (Real a,Integral b) => a -> a -> b", "locations": [[103, 8], [103, 10], [103, 15], [103, 17], [103, 22], [103, 35], [103, 40], [104, 4], [104, 8], [104, 13], [104, 15], [103, 19], [103, 38]], "locations_src": ["n", "d", "f", "n", "fromIntegral", "f", "d", "f", "div'", "n", "d", "-", "*"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--mod'", "signature": "mod' :: (Real a) => a -> a -> a", "code": "mod' n d = n - (fromInteger f) * d where\n    f = div' n d", "poly_type": "Ad-hoc", "dependencies": "div' :: (Real a,Integral b) => a -> a -> b", "locations": [[108, 5], [108, 7], [108, 11], [108, 16], [108, 28], [108, 33], [109, 4], [109, 8], [109, 13], [109, 15], [108, 13], [108, 31]], "locations_src": ["n", "d", "n", "fromInteger", "f", "d", "f", "div'", "n", "d", "-", "*"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--a", "signature": "a :: k", "code": "a -> (b,a)\na -> a\na -> a -> (b,a)\na -> a -> a\na -> a -> b\na -> b", "poly_type": "Monomorphic", "dependencies": "", "locations": [[98, 41], [98, 41], [102, 45], [102, 45]], "locations_src": ["b", "b", "b", "b"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--resolution", "signature": "resolution :: p a -> Integer", "code": "resolution _ = 1\nresolution _ = 10\nresolution _ = 100\nresolution _ = 1000\nresolution _ = 1000000\nresolution _ = 1000000000\nresolution _ = 1000000000000\nresolution _ = natVal (Proxy :: Proxy n)", "poly_type": "Parametric", "dependencies": "", "locations": [[146, 19], [146, 42]], "locations_src": ["natVal", "n"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--Proxy", "signature": "Proxy :: Proxy n", "code": "Proxy a -> f a", "poly_type": "Monomorphic", "dependencies": "a :: k", "locations": [[148, 19], [148, 24], [148, 26]], "locations_src": ["a", "f", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--withType", "signature": "withType :: (Proxy a -> f a) -> f a", "code": "withType foo = foo Proxy", "poly_type": "Parametric", "dependencies": "", "locations": [[149, 9], [149, 15]], "locations_src": ["foo", "foo"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--withResolution", "signature": "withResolution :: (HasResolution a) => (Integer -> f a) -> f a", "code": "withResolution foo = withType (foo . resolution)", "poly_type": "Ad-hoc", "dependencies": "resolution :: p a -> Integer\nwithType :: (Proxy a -> f a) -> f a", "locations": [[152, 15], [152, 21], [152, 31], [152, 37], [152, 35]], "locations_src": ["foo", "withType", "foo", "resolution", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--chopZeros", "signature": "chopZeros :: Integer -> String", "code": "chopZeros 0 = \"\"\nchopZeros a = show a\nchopZeros a | mod a 10 == 0 = chopZeros (div a 10)", "poly_type": "Monomorphic", "dependencies": "a :: k", "locations": [[256, 10], [256, 14], [256, 18], [256, 41], [256, 45], [256, 23], [257, 10], [257, 14], [257, 19]], "locations_src": ["a", "mod", "a", "div", "a", "==", "a", "show", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--showIntegerZeros", "signature": "showIntegerZeros :: Bool -> Int -> Integer -> String", "code": "showIntegerZeros True _ 0 = \"\"\nshowIntegerZeros chopTrailingZeros digits a = replicate (digits - length s) '0' ++ s' where\n    s = show a\n    s' = if chopTrailingZeros then chopZeros a else s", "poly_type": "Monomorphic", "dependencies": "a :: k\nlength :: NonEmpty a -> Int\nchopZeros :: Integer -> String", "locations": [[262, 17], [262, 35], [262, 42], [262, 46], [262, 57], [262, 66], [262, 73], [262, 83], [263, 4], [263, 8], [263, 13], [264, 4], [264, 12], [264, 35], [264, 45], [264, 52], [262, 64], [262, 80]], "locations_src": ["chopTrailingZeros", "digits", "a", "replicate", "digits", "length", "s", "s'", "s", "show", "a", "s'", "chopTrailingZeros", "chopZeros", "a", "s", "-", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--withDot", "signature": "withDot :: String -> String", "code": "withDot \"\" = \"\"\nwithDot s = '.':s", "poly_type": "Monomorphic", "dependencies": "", "locations": [[268, 8], [268, 16]], "locations_src": ["s", "s"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--showFixed", "signature": "showFixed :: (HasResolution a) => Bool -> Fixed a -> String", "code": "showFixed chopTrailingZeros fa@(MkFixed a) = (show i) ++ (withDot (showIntegerZeros chopTrailingZeros digits fracNum)) where\n    res = resolution fa\n    (i,d) = divMod a res\n    -- enough digits to be unambiguous\n    digits = ceiling (logBase 10 (fromInteger res) :: Double)\n    maxnum = 10 ^ digits\n    -- read floors, so show must ceil for `read . show = id` to hold. See #9240\n    fracNum = divCeil (d * maxnum) res\n    divCeil x y = (x + y - 1) `div` y\nshowFixed chopTrailingZeros fa@(MkFixed a) | a < 0 = \"-\" ++ (showFixed chopTrailingZeros (asTypeOf (MkFixed (negate a)) fa))", "poly_type": "Ad-hoc", "dependencies": "a :: k\nresolution :: p a -> Integer\nshowIntegerZeros :: Bool -> Int -> Integer -> String\nwithDot :: String -> String", "locations": [[281, 10], [281, 28], [281, 40], [281, 45], [281, 71], [281, 90], [281, 109], [281, 116], [281, 120], [281, 47], [281, 57], [282, 10], [282, 28], [282, 40], [282, 46], [282, 51], [282, 58], [282, 67], [282, 84], [282, 102], [282, 109], [283, 4], [283, 10], [283, 21], [284, 5], [284, 7], [284, 12], [284, 19], [284, 21], [286, 4], [286, 13], [286, 22], [286, 34], [286, 46], [287, 4], [287, 18], [289, 4], [289, 14], [289, 23], [289, 27], [289, 35], [290, 4], [290, 12], [290, 14], [290, 19], [290, 23], [290, 31], [290, 36], [282, 54], [287, 16], [289, 25], [290, 21], [290, 25]], "locations_src": ["chopTrailingZeros", "fa", "a", "a", "chopTrailingZeros", "asTypeOf", "negate", "a", "fa", "<", "++", "chopTrailingZeros", "fa", "a", "show", "i", "withDot", "showIntegerZeros", "chopTrailingZeros", "digits", "fracNum", "res", "resolution", "fa", "i", "d", "divMod", "a", "res", "digits", "ceiling", "logBase", "fromInteger", "res", "maxnum", "digits", "fracNum", "divCeil", "d", "maxnum", "res", "divCeil", "x", "y", "x", "y", "div", "y", "++", "^", "*", "+", "-"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--convertFixed", "signature": "convertFixed :: forall a . HasResolution a => Lexeme -> ReadPrec (Fixed a)", "code": "convertFixed (Number n)\n | Just (i, f) <- numberToFixed e n =\n    return (fromInteger i + (fromInteger f / (10 ^ e)))\n    where r = resolution (Proxy :: Proxy a)\n          -- round 'e' up to help make the 'read . show == id' property\n          -- possible also for cases where 'resolution' is not a\n          -- power-of-10, such as e.g. when 'resolution = 128'\n          e = ceiling (logBase 10 (fromInteger r) :: Double)\nconvertFixed _ = pfail", "poly_type": "Arbitrary-rank", "dependencies": "a :: k\nresolution :: p a -> Integer", "locations": [[303, 21], [304, 9], [304, 12], [304, 18], [304, 32], [304, 34], [305, 4], [305, 12], [305, 24], [305, 29], [305, 41], [305, 51], [306, 10], [306, 14], [306, 41], [310, 10], [310, 14], [310, 23], [310, 35], [310, 47], [305, 26], [305, 43], [305, 49], [311, 17]], "locations_src": ["n", "i", "f", "numberToFixed", "e", "n", "return", "fromInteger", "i", "fromInteger", "f", "e", "r", "resolution", "a", "e", "ceiling", "logBase", "fromInteger", "r", "+", "/", "^", "pfail"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Fixed.hs--Proxy", "signature": "Proxy :: Proxy a", "code": "Proxy a -> f a", "poly_type": "Monomorphic", "dependencies": "a :: k", "locations": [[148, 19], [148, 24], [148, 26]], "locations_src": ["a", "f", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifoldable1.hs--bifoldMap1", "signature": "bifoldMap1 :: Semigroup m => (a -> m) -> (b -> m) -> t a b -> m", "code": "bifoldMap1 _ g (Right b) = g b\nbifoldMap1 f _ (Const a) = f a\nbifoldMap1 f _ (Left a) = f a\nbifoldMap1 f g (Arg a b) = f a <> g b\nbifoldMap1 f g (_,_,_,a,b) = f a <> g b\nbifoldMap1 f g (_,_,a,b) = f a <> g b\nbifoldMap1 f g (_,a,b) = f a <> g b\nbifoldMap1 f g (a, b) = f a <> g b", "poly_type": "Ad-hoc", "dependencies": "a :: k", "locations": [[23, 15], [23, 17], [23, 24], [23, 26], [23, 31], [23, 33], [23, 38], [23, 40], [23, 35], [26, 15], [26, 25], [26, 30], [26, 32], [27, 17], [27, 26], [27, 31], [27, 33], [31, 15], [31, 17], [31, 20], [31, 23], [31, 28], [31, 30], [31, 35], [31, 37], [31, 32], [35, 15], [35, 17], [35, 22], [35, 24], [35, 29], [35, 31], [35, 36], [35, 38], [35, 33], [39, 15], [39, 17], [39, 24], [39, 26], [39, 31], [39, 33], [39, 38], [39, 40], [39, 35], [43, 15], [43, 17], [43, 26], [43, 28], [43, 33], [43, 35], [43, 40], [43, 42], [43, 37], [47, 15], [47, 26], [47, 31], [47, 33]], "locations_src": ["f", "g", "a", "b", "f", "a", "g", "b", "<>", "f", "a", "f", "a", "g", "b", "g", "b", "f", "g", "a", "b", "f", "a", "g", "b", "<>", "f", "g", "a", "b", "f", "a", "g", "b", "<>", "f", "g", "a", "b", "f", "a", "g", "b", "<>", "f", "g", "a", "b", "f", "a", "g", "b", "<>", "f", "a", "f", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifunctor.hs--bimap", "signature": "bimap :: (a -> b) -> (c -> d) -> p a c -> p b d", "code": "bimap _ g (Right b) = Right (g b)\nbimap f _ (Const a) = Const (f a)\nbimap f _ (K1 c) = K1 (f c)\nbimap f _ (Left a) = Left (f a)\nbimap f g = first f . second g\nbimap f g ~(a, b) = (f a, g b)\nbimap f g ~(x1, a, b) = (x1, f a, g b)\nbimap f g ~(x1, x2, a, b) = (x1, x2, f a, g b)\nbimap f g ~(x1, x2, x3, a, b) = (x1, x2, x3, f a, g b)\nbimap f g ~(x1, x2, x3, x4, a, b) = (x1, x2, x3, x4, f a, g b)\nbimap f g ~(x1, x2, x3, x4, x5, a, b) = (x1, x2, x3, x4, x5, f a, g b)", "poly_type": "Parametric", "dependencies": "a :: k\nfirst :: (a -> b) -> p a c -> p b c", "locations": [[104, 10], [104, 12], [104, 16], [104, 22], [104, 26], [104, 33], [104, 24], [147, 10], [147, 12], [147, 16], [147, 19], [147, 25], [147, 27], [147, 30], [147, 32], [151, 10], [151, 12], [151, 16], [151, 20], [151, 23], [151, 29], [151, 33], [151, 35], [151, 38], [151, 40], [155, 10], [155, 12], [155, 16], [155, 20], [155, 24], [155, 27], [155, 33], [155, 37], [155, 41], [155, 43], [155, 46], [155, 48], [159, 10], [159, 12], [159, 16], [159, 20], [159, 24], [159, 28], [159, 31], [159, 37], [159, 41], [159, 45], [159, 49], [159, 51], [159, 54], [159, 56], [163, 10], [163, 12], [163, 16], [163, 20], [163, 24], [163, 28], [163, 32], [163, 35], [163, 41], [163, 45], [163, 49], [163, 53], [163, 57], [163, 59], [163, 62], [163, 64], [167, 10], [167, 12], [167, 16], [167, 20], [167, 24], [167, 28], [167, 32], [167, 36], [167, 39], [167, 45], [167, 49], [167, 53], [167, 57], [167, 61], [167, 65], [167, 67], [167, 70], [167, 72], [172, 10], [172, 20], [172, 31], [172, 33], [173, 12], [173, 21], [173, 33], [173, 35], [177, 10], [177, 21], [177, 33], [177, 35], [181, 10], [181, 18], [181, 27], [181, 29]], "locations_src": ["f", "g", "first", "f", "second", "g", ".", "f", "g", "a", "b", "f", "a", "g", "b", "f", "g", "x1", "a", "b", "x1", "f", "a", "g", "b", "f", "g", "x1", "x2", "a", "b", "x1", "x2", "f", "a", "g", "b", "f", "g", "x1", "x2", "x3", "a", "b", "x1", "x2", "x3", "f", "a", "g", "b", "f", "g", "x1", "x2", "x3", "x4", "a", "b", "x1", "x2", "x3", "x4", "f", "a", "g", "b", "f", "g", "x1", "x2", "x3", "x4", "x5", "a", "b", "x1", "x2", "x3", "x4", "x5", "f", "a", "g", "b", "f", "a", "f", "a", "g", "b", "g", "b", "f", "a", "f", "a", "f", "c", "f", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Bifunctor.hs--first", "signature": "first :: (a -> b) -> p a c -> p b c", "code": "first f = bimap f id", "poly_type": "Parametric", "dependencies": "bimap :: (a -> b) -> (c -> d) -> p a c -> p b d", "locations": [[118, 10], [118, 14], [118, 20], [118, 22]], "locations_src": ["f", "bimap", "f", "id"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Char.hs--digitToInt", "signature": "digitToInt :: Char -> Int", "code": "digitToInt c\n  | (fromIntegral dec::Word) <= 9 = dec\n  | (fromIntegral hexl::Word) <= 5 = hexl + 10\n  | (fromIntegral hexu::Word) <= 5 = hexu + 10\n  | otherwise = errorWithoutStackTrace (\"Char.digitToInt: not a digit \" ++ show c) -- sigh\n  where\n    dec = ord c - ord '0'\n    hexl = ord c - ord 'a'\n    hexu = ord c - ord 'A'", "poly_type": "Monomorphic", "dependencies": "", "locations": [[95, 11], [96, 5], [96, 18], [96, 36], [97, 5], [97, 18], [97, 37], [98, 5], [98, 18], [98, 37], [99, 4], [99, 16], [99, 75], [99, 80], [101, 4], [101, 10], [101, 14], [101, 18], [102, 4], [102, 11], [102, 15], [102, 19], [103, 4], [103, 11], [103, 15], [103, 19], [96, 29], [97, 30], [97, 42], [98, 30], [98, 42], [99, 72], [101, 16], [102, 17], [103, 17]], "locations_src": ["c", "fromIntegral", "dec", "dec", "fromIntegral", "hexl", "hexl", "fromIntegral", "hexu", "hexu", "otherwise", "errorWithoutStackTrace", "show", "c", "dec", "ord", "c", "ord", "hexl", "ord", "c", "ord", "hexu", "ord", "c", "ord", "<=", "<=", "+", "<=", "+", "++", "-", "-", "-"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Char.hs--isLetter", "signature": "isLetter :: Char -> Bool", "code": "isLetter c = case generalCategory c of\n        UppercaseLetter         -> True\n        LowercaseLetter         -> True\n        TitlecaseLetter         -> True\n        ModifierLetter          -> True\n        OtherLetter             -> True\n        _                       -> False", "poly_type": "Monomorphic", "dependencies": "", "locations": [[154, 9], [154, 18], [154, 34]], "locations_src": ["c", "generalCategory", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Char.hs--isMark", "signature": "isMark :: Char -> Bool", "code": "isMark c = case generalCategory c of\n        NonSpacingMark          -> True\n        SpacingCombiningMark    -> True\n        EnclosingMark           -> True\n        _                       -> False", "poly_type": "Monomorphic", "dependencies": "", "locations": [[198, 7], [198, 16], [198, 32]], "locations_src": ["c", "generalCategory", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Char.hs--isNumber", "signature": "isNumber :: Char -> Bool", "code": "isNumber c = case generalCategory c of\n        DecimalNumber           -> True\n        LetterNumber            -> True\n        OtherNumber             -> True\n        _                       -> False", "poly_type": "Monomorphic", "dependencies": "", "locations": [[241, 9], [241, 18], [241, 34]], "locations_src": ["c", "generalCategory", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Char.hs--isSeparator", "signature": "isSeparator :: Char -> Bool", "code": "isSeparator c = case generalCategory c of\n        Space                   -> True\n        LineSeparator           -> True\n        ParagraphSeparator      -> True\n        _                       -> False", "poly_type": "Monomorphic", "dependencies": "", "locations": [[286, 12], [286, 21], [286, 37]], "locations_src": ["c", "generalCategory", "c"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldMap1", "signature": "foldMap1 :: Semigroup m => (a -> m) -> t a -> m", "code": "foldMap1 _ x = x `seq` error \"foldMap1 @V1\"\nfoldMap1 f (Functor.InL x) = foldMap1 f x\nfoldMap1 f (Functor.InR y) = foldMap1 f y\nfoldMap1 f (Functor.Pair x y)    = foldMap1 f x <> foldMap1 f y\nfoldMap1 f (L1 x) = foldMap1 f x\nfoldMap1 f (MkSolo y) = f y\nfoldMap1 f (R1 y) = foldMap1 f y\nfoldMap1 f (_, y) = f y\nfoldMap1 f (x :*: y) = foldMap1 f x <> foldMap1 f y\nfoldMap1 f (x :+ y) = f x <> f y\nfoldMap1 f (x :| xs) = go (f x) xs where\n        go y [] = y\n        go y (z : zs) = y <> go (f z) zs\nfoldMap1 f = foldMap1 (foldMap1 f) . getCompose\nfoldMap1 f = foldMap1 (foldMap1 f) . unComp1\nfoldMap1 f = foldrMap1 f (\\a m -> f a <> m)", "poly_type": "Ad-hoc", "dependencies": "foldrMap1 :: (a -> b) -> (a -> b -> b) -> t a -> b\na :: k", "locations": [[107, 13], [107, 17], [107, 27], [107, 31], [107, 33], [107, 38], [107, 40], [107, 45], [107, 42], [421, 13], [421, 16], [421, 21], [421, 27], [421, 31], [421, 33], [421, 36], [422, 8], [422, 11], [422, 18], [423, 8], [423, 11], [423, 14], [423, 18], [423, 24], [423, 29], [423, 33], [423, 35], [423, 38], [423, 26], [445, 13], [445, 16], [445, 21], [445, 26], [445, 28], [445, 33], [445, 35], [445, 30], [457, 13], [457, 23], [457, 28], [457, 30], [466, 13], [466, 19], [466, 24], [466, 26], [517, 15], [517, 19], [517, 22], [517, 27], [531, 13], [531, 19], [531, 33], [531, 35], [532, 13], [532, 19], [532, 33], [532, 35], [536, 13], [536, 16], [536, 22], [536, 36], [536, 38], [536, 52], [536, 54], [536, 40], [540, 13], [540, 36], [540, 41], [540, 39], [565, 13], [565, 29], [565, 31], [565, 48], [565, 50], [565, 64], [565, 66], [565, 52], [573, 13], [573, 28], [573, 42], [573, 44], [574, 13], [574, 28], [574, 42], [574, 44], [594, 13], [594, 36], [594, 41], [594, 39]], "locations_src": ["f", "foldrMap1", "f", "a", "m", "f", "a", "m", "<>", "f", "x", "xs", "go", "f", "x", "xs", "go", "y", "y", "go", "y", "z", "zs", "y", "go", "f", "z", "zs", "<>", "f", "x", "y", "f", "x", "f", "y", "<>", "f", "y", "f", "y", "f", "y", "f", "y", "x", "x", "seq", "error", "f", "x", "f", "x", "f", "y", "f", "y", "f", "x", "y", "f", "x", "f", "y", "<>", "f", "f", "unComp1", ".", "f", "x", "y", "f", "x", "f", "y", "<>", "f", "x", "f", "x", "f", "y", "f", "y", "f", "f", "getCompose", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldMap1'", "signature": "foldMap1' :: Semigroup m => (a -> m) -> t a -> m", "code": "foldMap1' f (x :| xs) = foldl' (\\m y -> m <> f y) (f x) xs\nfoldMap1' f = foldlMap1' f (\\m a -> m <> f a)", "poly_type": "Ad-hoc", "dependencies": "a :: k\nfoldlMap1' :: (a -> b) -> (b -> a -> b) -> t a -> b", "locations": [[118, 14], [118, 18], [118, 29], [118, 33], [118, 35], [118, 40], [118, 45], [118, 47], [118, 42], [425, 14], [425, 17], [425, 22], [425, 28], [425, 37], [425, 39], [425, 44], [425, 49], [425, 51], [425, 55], [425, 57], [425, 60], [425, 46]], "locations_src": ["f", "foldlMap1'", "f", "m", "a", "m", "f", "a", "<>", "f", "x", "xs", "foldl'", "m", "y", "m", "f", "y", "f", "x", "xs", "<>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--toNonEmpty", "signature": "toNonEmpty :: t a -> NonEmpty a", "code": "toNonEmpty (Functor.InL x) = toNonEmpty x\ntoNonEmpty (Functor.InR y) = toNonEmpty y\ntoNonEmpty (Identity x) = x :| []\ntoNonEmpty (MkSolo x) = x :| []\ntoNonEmpty (_, x) = x :| []\ntoNonEmpty (x :+ y) = x :| y : []", "poly_type": "Parametric", "dependencies": "", "locations": [[447, 16], [447, 21], [447, 26], [447, 31], [458, 23], [458, 28], [467, 19], [467, 24], [555, 25], [555, 30], [579, 28], [579, 44], [580, 28], [580, 44]], "locations_src": ["x", "y", "x", "y", "x", "x", "x", "x", "x", "x", "x", "x", "y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--maximum", "signature": "maximum :: Ord a => t a -> a", "code": "maximum (Functor.InL x) = maximum x\nmaximum (Functor.InR y) = maximum y\nmaximum (MkSolo x) = x\nmaximum (_, x) = x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[460, 20], [460, 25], [469, 16], [469, 21], [589, 25], [589, 38], [590, 25], [590, 38]], "locations_src": ["x", "x", "x", "x", "x", "x", "y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--minimum", "signature": "minimum :: Ord a => t a -> a", "code": "minimum (Functor.InL x) = minimum x\nminimum (Functor.InR y) = minimum y\nminimum (MkSolo x) = x\nminimum (_, x) = x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[459, 20], [459, 25], [468, 16], [468, 21], [587, 25], [587, 38], [588, 25], [588, 38]], "locations_src": ["x", "x", "x", "x", "x", "x", "y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--head", "signature": "head :: t a -> a", "code": "head (Functor.InL x) = head x\nhead (Functor.InR y) = head y\nhead (Functor.Pair x _) = head x\nhead (MkSolo x) = x\nhead (_, x) = x", "poly_type": "Parametric", "dependencies": "", "locations": [[461, 17], [461, 22], [470, 13], [470, 18], [568, 23], [568, 35], [582, 22], [582, 32], [583, 22], [583, 32]], "locations_src": ["x", "x", "x", "x", "x", "x", "x", "x", "y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--last", "signature": "last :: t a -> a", "code": "last (Functor.InL x) = last x\nlast (Functor.InR y) = last y\nlast (Functor.Pair _ y) = last y\nlast (MkSolo x) = x\nlast (_, x) = x", "poly_type": "Parametric", "dependencies": "", "locations": [[462, 17], [462, 22], [471, 13], [471, 18], [569, 25], [569, 35], [584, 22], [584, 32], [585, 22], [585, 32]], "locations_src": ["x", "x", "x", "x", "y", "y", "x", "x", "y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldrMap1", "signature": "foldrMap1 :: (a -> b) -> (a -> b -> b) -> t a -> b", "code": "foldrMap1  g _ = coerce g\nfoldrMap1 f g = foldrMap1 (foldrMap1 f g) (\\xs x -> foldr g x xs) . getCompose\nfoldrMap1 f g xs =\n        appFromMaybe (foldMap1 (FromMaybe #. h) xs) Nothing\n      where\n        h a Nothing  = f a\n        h a (Just b) = g a b\nfoldrMap1 g f (Functor.InL x) = foldrMap1 g f x\nfoldrMap1 g f (Functor.InR y) = foldrMap1 g f y\nfoldrMap1 g f (Functor.Pair x y) = foldr f (foldrMap1 g f y) x\nfoldrMap1 g f (x :| xs) = go x xs where\n        go y [] = g y\n        go y (z : zs) = f y (go z zs)", "poly_type": "Parametric", "dependencies": "a :: k\nfoldMap1 :: Semigroup m => (a -> m) -> t a -> m\n(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "locations": [[185, 14], [185, 16], [185, 18], [186, 8], [186, 22], [186, 45], [186, 48], [188, 8], [188, 10], [188, 23], [188, 25], [189, 8], [189, 10], [189, 18], [189, 23], [189, 25], [189, 27], [186, 42], [429, 14], [429, 16], [429, 19], [429, 24], [429, 30], [429, 33], [429, 35], [430, 8], [430, 11], [430, 18], [430, 20], [431, 8], [431, 11], [431, 14], [431, 18], [431, 24], [431, 26], [431, 29], [431, 32], [431, 34], [550, 15], [550, 21], [550, 28], [566, 14], [566, 16], [566, 32], [566, 34], [566, 39], [566, 45], [566, 58], [566, 60], [566, 62], [566, 65], [576, 14], [576, 16], [576, 31], [576, 46], [576, 48], [576, 50], [577, 14], [577, 16], [577, 31], [577, 46], [577, 48], [577, 50], [596, 14], [596, 16], [596, 41], [596, 43], [596, 48], [596, 51], [596, 56], [596, 62], [596, 64], [596, 66], [596, 72], [596, 70]], "locations_src": ["f", "g", "xs", "appFromMaybe", "foldMap1", "h", "xs", "h", "a", "f", "a", "h", "a", "b", "g", "a", "b", "#.", "g", "f", "x", "xs", "go", "x", "xs", "go", "y", "g", "y", "go", "y", "z", "zs", "f", "y", "go", "z", "zs", "g", "coerce", "g", "g", "f", "x", "y", "foldr", "f", "g", "f", "y", "x", "g", "f", "x", "g", "f", "x", "g", "f", "y", "g", "f", "y", "f", "g", "f", "g", "xs", "x", "foldr", "g", "x", "xs", "getCompose", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldlMap1'", "signature": "foldlMap1' :: (a -> b) -> (b -> a -> b) -> t a -> b", "code": "foldlMap1' f g xs =\n        foldrMap1 f' g' xs SNothing\n      where\n        -- f' :: a -> SMaybe b -> b\n        f' a SNothing  = f a\n        f' a (SJust b) = g b a\n\n        -- g' :: a -> (SMaybe b -> b) -> SMaybe b -> b\n        g' a x SNothing  = x $! SJust (f a)\n        g' a x (SJust b) = x $! SJust (g b a)\nfoldlMap1' g _ = coerce g\nfoldlMap1' g f (x :| xs) = let gx = g x in gx `seq` foldl' f gx xs", "poly_type": "Parametric", "dependencies": "a :: k\nfoldrMap1 :: (a -> b) -> (a -> b -> b) -> t a -> b", "locations": [[206, 15], [206, 17], [206, 19], [207, 8], [207, 18], [207, 21], [207, 24], [210, 8], [210, 11], [210, 25], [210, 27], [211, 8], [211, 11], [211, 20], [211, 25], [211, 27], [211, 29], [214, 8], [214, 11], [214, 13], [214, 27], [214, 39], [214, 41], [215, 8], [215, 11], [215, 13], [215, 22], [215, 27], [215, 39], [215, 41], [215, 43], [214, 29], [215, 29], [434, 15], [434, 17], [434, 20], [434, 25], [434, 35], [434, 40], [434, 42], [434, 47], [434, 51], [434, 56], [434, 63], [434, 65], [434, 68], [553, 15], [553, 21], [553, 28]], "locations_src": ["f", "g", "xs", "foldrMap1", "f'", "g'", "xs", "f'", "a", "f", "a", "f'", "a", "b", "g", "b", "a", "g'", "a", "x", "x", "f", "a", "g'", "a", "x", "b", "x", "g", "b", "a", "$!", "$!", "g", "f", "x", "xs", "gx", "g", "x", "gx", "seq", "foldl'", "f", "gx", "xs", "g", "coerce", "g"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldlMap1", "signature": "foldlMap1 :: (a -> b) -> (b -> a -> b) -> t a -> b", "code": "foldlMap1  g _ = coerce g\nfoldlMap1  g f (x :| xs) = foldl f (g x) xs\nfoldlMap1 f g xs =\n        appFromMaybe (getDual (foldMap1 ((Dual . FromMaybe) #. h) xs)) Nothing\n      where\n        h a Nothing  = f a\n        h a (Just b) = g b a", "poly_type": "Parametric", "dependencies": "a :: k\nfoldMap1 :: Semigroup m => (a -> m) -> t a -> m\n(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "locations": [[246, 14], [246, 16], [246, 18], [247, 8], [247, 22], [247, 31], [247, 63], [247, 66], [249, 8], [249, 10], [249, 23], [249, 25], [250, 8], [250, 10], [250, 18], [250, 23], [250, 25], [250, 27], [247, 47], [247, 60], [433, 15], [433, 17], [433, 20], [433, 25], [433, 31], [433, 37], [433, 40], [433, 42], [433, 45], [552, 15], [552, 21], [552, 28]], "locations_src": ["f", "g", "xs", "appFromMaybe", "getDual", "foldMap1", "h", "xs", "h", "a", "f", "a", "h", "a", "b", "g", "b", "a", ".", "#.", "g", "f", "x", "xs", "foldl", "f", "g", "x", "xs", "g", "coerce", "g"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldrMap1'", "signature": "foldrMap1' :: (a -> b) -> (a -> b -> b) -> t a -> b", "code": "foldrMap1' f g xs =\n        foldlMap1 f' g' xs SNothing\n      where\n        f' a SNothing  = f a\n        f' a (SJust b) = g a b\n\n        g' bb a SNothing  = bb $! SJust (f a)\n        g' bb a (SJust b) = bb $! SJust (g a b)\nfoldrMap1' g _ = coerce g", "poly_type": "Parametric", "dependencies": "a :: k\nfoldlMap1 :: (a -> b) -> (b -> a -> b) -> t a -> b", "locations": [[269, 15], [269, 17], [269, 19], [270, 8], [270, 18], [270, 21], [270, 24], [272, 8], [272, 11], [272, 25], [272, 27], [273, 8], [273, 11], [273, 20], [273, 25], [273, 27], [273, 29], [275, 8], [275, 11], [275, 14], [275, 28], [275, 41], [275, 43], [276, 8], [276, 11], [276, 14], [276, 23], [276, 28], [276, 41], [276, 43], [276, 45], [275, 31], [276, 31], [551, 15], [551, 21], [551, 28]], "locations_src": ["f", "g", "xs", "foldlMap1", "f'", "g'", "xs", "f'", "a", "f", "a", "f'", "a", "b", "g", "a", "b", "g'", "bb", "a", "bb", "f", "a", "g'", "bb", "a", "b", "bb", "g", "a", "b", "$!", "$!", "g", "coerce", "g"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--intercalateMap1", "signature": "intercalateMap1 :: (Foldable1 t, Semigroup m) => m -> (a -> m) -> t a -> m", "code": "intercalateMap1 j f = flip joinee j . foldMap1 (JoinWith . const . f)", "poly_type": "Ad-hoc", "dependencies": "foldMap1 :: Semigroup m => (a -> m) -> t a -> m", "locations": [[326, 16], [326, 18], [326, 22], [326, 27], [326, 34], [326, 38], [326, 59], [326, 67], [326, 36], [326, 57], [326, 65]], "locations_src": ["j", "f", "flip", "joinee", "j", "foldMap1", "const", "f", ".", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldrMapM1", "signature": "foldrMapM1 :: (Foldable1 t, Monad m) => (a -> m b) -> (a -> b -> m b) -> t a -> m b", "code": "foldrMapM1 g f = go . toNonEmpty\n  where\n    go (e:|es) =\n      case es of\n        []   -> g e\n        x:xs -> f e =<< go (x:|xs)", "poly_type": "Ad-hoc", "dependencies": "toNonEmpty :: t a -> NonEmpty a", "locations": [[339, 11], [339, 13], [339, 17], [339, 22], [341, 4], [341, 8], [341, 11], [342, 11], [343, 16], [343, 18], [344, 8], [344, 10], [344, 16], [344, 18], [344, 24], [344, 28], [344, 31], [339, 20], [344, 20]], "locations_src": ["g", "f", "go", "toNonEmpty", "go", "e", "es", "es", "g", "e", "x", "xs", "f", "e", "go", "x", "xs", ".", "=<<"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--foldlMapM1", "signature": "foldlMapM1 :: (Foldable1 t, Monad m) => (a -> m b) -> (b -> a -> m b) -> t a -> m b", "code": "foldlMapM1 g f t = g x >>= \\y -> foldlM f y xs\n  where x:|xs = toNonEmpty t", "poly_type": "Ad-hoc", "dependencies": "toNonEmpty :: t a -> NonEmpty a", "locations": [[357, 11], [357, 13], [357, 15], [357, 19], [357, 21], [357, 28], [357, 33], [357, 40], [357, 42], [357, 44], [358, 8], [358, 11], [358, 16], [358, 27], [357, 23]], "locations_src": ["g", "f", "t", "g", "x", "y", "foldlM", "f", "y", "xs", "x", "xs", "toNonEmpty", "t", ">>="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--maximumBy", "signature": "maximumBy :: Foldable1 t => (a -> a -> Ordering) -> t a -> a", "code": "maximumBy cmp = foldl1' max'\n  where max' x y = case cmp x y of\n                        GT -> x\n                        _  -> y", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[365, 10], [365, 16], [365, 24], [366, 8], [366, 13], [366, 15], [366, 24], [366, 28], [366, 30], [367, 30], [368, 30]], "locations_src": ["cmp", "foldl1'", "max'", "max'", "x", "y", "cmp", "x", "y", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--minimumBy", "signature": "minimumBy :: Foldable1 t => (a -> a -> Ordering) -> t a -> a", "code": "minimumBy cmp = foldl1' min'\n  where min' x y = case cmp x y of\n                        GT -> y\n                        _  -> x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[375, 10], [375, 16], [375, 24], [376, 8], [376, 13], [376, 15], [376, 24], [376, 28], [376, 30], [377, 30], [378, 30]], "locations_src": ["cmp", "foldl1'", "min'", "min'", "x", "y", "cmp", "x", "y", "y", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Foldable1.hs--(#.)", "signature": "(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "code": "(#.) _f = coerce", "poly_type": "Ad-hoc", "dependencies": "(#.) :: Coercible b c => (b -> c) -> (a -> b) -> a -> c", "locations": [[602, 5], [602, 10], [602, 1]], "locations_src": ["_f", "coerce", "#."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--length", "signature": "length :: NonEmpty a -> Int", "code": "length (_ :| xs) = 1 + Prelude.length xs", "poly_type": "Parametric", "dependencies": "", "locations": [[126, 13], [126, 38], [126, 21]], "locations_src": ["xs", "xs", "+"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--xor", "signature": "xor :: NonEmpty Bool -> Bool", "code": "xor (x :| xs)   = foldr xor' x xs\n  where xor' True y  = not y\n        xor' False y = y", "poly_type": "Monomorphic", "dependencies": "", "locations": [[130, 5], [130, 10], [130, 18], [130, 24], [130, 29], [130, 31], [131, 8], [131, 18], [131, 23], [131, 27], [132, 8], [132, 19], [132, 23]], "locations_src": ["x", "xs", "foldr", "xor'", "x", "xs", "xor'", "y", "not", "y", "xor'", "y", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--unfold", "signature": "unfold :: (a -> (b, Maybe a)) -> a -> NonEmpty b", "code": "unfold f a = case f a of\n  (b, Nothing) -> b :| []\n  (b, Just c)  -> b <| unfold f c", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[139, 7], [139, 9], [139, 18], [139, 20], [140, 3], [140, 18], [141, 3], [141, 11], [141, 18], [141, 30], [141, 32], [141, 20]], "locations_src": ["f", "a", "f", "a", "b", "b", "b", "c", "b", "f", "c", "<|"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--nonEmpty", "signature": "nonEmpty :: [a] -> Maybe (NonEmpty a)", "code": "nonEmpty (a:as) = Just (a :| as)\nnonEmpty []     = Nothing", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[149, 10], [149, 12], [149, 24], [149, 29]], "locations_src": ["a", "as", "a", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--uncons", "signature": "uncons :: NonEmpty a -> (a, Maybe (NonEmpty a))", "code": "uncons ~(a :| as) = (a, nonEmpty as)", "poly_type": "Parametric", "dependencies": "nonEmpty :: [a] -> Maybe (NonEmpty a)\na :: k", "locations": [[154, 9], [154, 14], [154, 21], [154, 24], [154, 33]], "locations_src": ["a", "as", "a", "nonEmpty", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--unfoldr", "signature": "unfoldr :: (a -> (b, Maybe a)) -> a -> NonEmpty b", "code": "unfoldr f a = case f a of\n  (b, mc) -> b :| maybe [] go mc\n where\n    go c = case f c of\n      (d, me) -> d : maybe [] go me", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[159, 8], [159, 10], [159, 19], [159, 21], [160, 3], [160, 6], [160, 13], [160, 18], [160, 27], [160, 30], [162, 4], [162, 7], [162, 16], [162, 18], [163, 7], [163, 10], [163, 17], [163, 21], [163, 30], [163, 33]], "locations_src": ["f", "a", "f", "a", "b", "mc", "b", "maybe", "go", "mc", "go", "c", "f", "c", "d", "me", "d", "maybe", "go", "me"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--head", "signature": "head :: NonEmpty a -> a", "code": "head (a :| _) = a", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[167, 6], [167, 16]], "locations_src": ["a", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--tail", "signature": "tail :: NonEmpty a -> [a]", "code": "tail (_ :| as) = as", "poly_type": "Parametric", "dependencies": "", "locations": [[171, 11], [171, 17]], "locations_src": ["as", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--last", "signature": "last :: NonEmpty a -> a", "code": "last ~(a :| as) = List.last (a : as)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[175, 7], [175, 12], [175, 29], [175, 33]], "locations_src": ["a", "as", "a", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--init", "signature": "init :: NonEmpty a -> [a]", "code": "init ~(a :| as) = List.init (a : as)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[179, 7], [179, 12], [179, 29], [179, 33]], "locations_src": ["a", "as", "a", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--singleton", "signature": "singleton :: a -> NonEmpty a", "code": "singleton a = a :| []", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[185, 10], [185, 14]], "locations_src": ["a", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--sortOn", "signature": "sortOn :: Ord b => (a -> b) -> NonEmpty a -> NonEmpty a", "code": "sortOn f = lift (List.sortOn f)", "poly_type": "Ad-hoc", "dependencies": "lift :: Foldable f => ([a] -> [b]) -> f a -> NonEmpty b", "locations": [[230, 7], [230, 11], [230, 29]], "locations_src": ["f", "lift", "f"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--fromList", "signature": "fromList :: HasCallStack => [a] -> NonEmpty a", "code": "fromList (a:as) = a :| as\nfromList [] = error \"NonEmpty.fromList: empty list\"", "poly_type": "Ad-hoc", "dependencies": "a :: k", "locations": [[236, 10], [236, 12], [236, 18], [236, 23], [237, 14]], "locations_src": ["a", "as", "a", "as", "error"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--toList", "signature": "toList :: NonEmpty a -> [a]", "code": "toList ~(a :| as) = a : as", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[241, 9], [241, 14], [241, 20], [241, 24]], "locations_src": ["a", "as", "a", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--lift", "signature": "lift :: Foldable f => ([a] -> [b]) -> f a -> NonEmpty b", "code": "lift f = fromList . f . Foldable.toList", "poly_type": "Ad-hoc", "dependencies": "fromList :: HasCallStack => [a] -> NonEmpty a\ntoList :: NonEmpty a -> [a]", "locations": [[248, 5], [248, 9], [248, 20], [248, 33], [248, 18], [248, 22]], "locations_src": ["f", "fromList", "f", "toList", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--map", "signature": "map :: (a -> b) -> NonEmpty a -> NonEmpty b", "code": "map f ~(a :| as) = f a :| fmap f as", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[252, 4], [252, 8], [252, 13], [252, 19], [252, 21], [252, 26], [252, 31], [252, 33]], "locations_src": ["f", "a", "as", "f", "a", "fmap", "f", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--some1", "signature": "some1 :: Alternative f => f a -> f (NonEmpty a)", "code": "some1 x = liftA2 (:|) x (many x)", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[319, 6], [319, 10], [319, 22], [319, 25], [319, 30]], "locations_src": ["x", "liftA2", "x", "many", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--scanl1", "signature": "scanl1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty a", "code": "scanl1 f ~(a :| as) = fromList (List.scanl f a as)", "poly_type": "Parametric", "dependencies": "a :: k\nfromList :: HasCallStack => [a] -> NonEmpty a", "locations": [[343, 7], [343, 11], [343, 16], [343, 22], [343, 37], [343, 43], [343, 45], [343, 47]], "locations_src": ["f", "a", "as", "fromList", "scanl", "f", "a", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--scanr1", "signature": "scanr1 :: (a -> a -> a) -> NonEmpty a -> NonEmpty a", "code": "scanr1 f ~(a :| as) = fromList (List.scanr1 f (a:as))", "poly_type": "Parametric", "dependencies": "fromList :: HasCallStack => [a] -> NonEmpty a\na :: k", "locations": [[347, 7], [347, 11], [347, 16], [347, 22], [347, 44], [347, 47], [347, 49]], "locations_src": ["f", "a", "as", "fromList", "f", "a", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--intersperse", "signature": "intersperse :: a -> NonEmpty a -> NonEmpty a", "code": "intersperse a ~(b :| bs) = b :| case bs of\n    [] -> []\n    _ -> a : List.intersperse a bs", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[353, 12], [353, 16], [353, 21], [353, 27], [353, 37], [355, 9], [355, 30], [355, 32]], "locations_src": ["a", "b", "bs", "b", "bs", "a", "a", "bs"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--iterate", "signature": "iterate :: (a -> a) -> a -> NonEmpty a", "code": "iterate f a = a :| List.iterate f (f a)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[362, 8], [362, 10], [362, 14], [362, 32], [362, 35], [362, 37]], "locations_src": ["f", "a", "a", "f", "f", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--repeat", "signature": "repeat :: a -> NonEmpty a", "code": "repeat a = a :| List.repeat a", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[377, 7], [377, 11], [377, 28]], "locations_src": ["a", "a", "a"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--take", "signature": "take :: Int -> NonEmpty a -> [a]", "code": "take n = List.take n . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[381, 5], [381, 19], [381, 23], [381, 21]], "locations_src": ["n", "n", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--drop", "signature": "drop :: Int -> NonEmpty a -> [a]", "code": "drop n = List.drop n . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[386, 5], [386, 19], [386, 23], [386, 21]], "locations_src": ["n", "n", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--splitAt", "signature": "splitAt :: Int -> NonEmpty a -> ([a],[a])", "code": "splitAt n = List.splitAt n . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[394, 8], [394, 25], [394, 29], [394, 27]], "locations_src": ["n", "n", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--takeWhile", "signature": "takeWhile :: (a -> Bool) -> NonEmpty a -> [a]", "code": "takeWhile p = List.takeWhile p . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[399, 10], [399, 29], [399, 33], [399, 31]], "locations_src": ["p", "p", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--dropWhile", "signature": "dropWhile :: (a -> Bool) -> NonEmpty a -> [a]", "code": "dropWhile p = List.dropWhile p . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[404, 10], [404, 29], [404, 33], [404, 31]], "locations_src": ["p", "p", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--span", "signature": "span :: (a -> Bool) -> NonEmpty a -> ([a], [a])", "code": "span p = List.span p . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[412, 5], [412, 19], [412, 23], [412, 21]], "locations_src": ["p", "p", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--break", "signature": "break :: (a -> Bool) -> NonEmpty a -> ([a], [a])", "code": "break p = span (not . p)", "poly_type": "Parametric", "dependencies": "span :: (a -> Bool) -> NonEmpty a -> ([a], [a])", "locations": [[416, 6], [416, 10], [416, 16], [416, 22], [416, 20]], "locations_src": ["p", "span", "not", "p", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--filter", "signature": "filter :: (a -> Bool) -> NonEmpty a -> [a]", "code": "filter p = List.filter p . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[420, 7], [420, 23], [420, 27], [420, 25]], "locations_src": ["p", "p", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--partition", "signature": "partition :: (a -> Bool) -> NonEmpty a -> ([a], [a])", "code": "partition p = List.partition p . toList", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[429, 10], [429, 29], [429, 33], [429, 31]], "locations_src": ["p", "p", "toList", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--groupBy", "signature": "groupBy :: Foldable f => (a -> a -> Bool) -> f a -> [NonEmpty a]", "code": "groupBy eq0 = go eq0 . Foldable.toList\n  where\n    go _  [] = []\n    go eq (x : xs) = (x :| ys) : groupBy eq zs\n      where (ys, zs) = List.span (eq x) xs", "poly_type": "Ad-hoc", "dependencies": "span :: (a -> Bool) -> NonEmpty a -> ([a], [a])\ntoList :: NonEmpty a -> [a]", "locations": [[446, 8], [446, 14], [446, 17], [446, 32], [448, 4], [449, 4], [449, 7], [449, 11], [449, 15], [449, 22], [449, 27], [449, 41], [449, 44], [450, 13], [450, 17], [450, 28], [450, 34], [450, 37], [450, 40], [446, 21]], "locations_src": ["eq0", "go", "eq0", "toList", "go", "go", "eq", "x", "xs", "x", "ys", "eq", "zs", "ys", "zs", "span", "eq", "x", "xs", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--groupWith", "signature": "groupWith :: (Foldable f, Eq b) => (a -> b) -> f a -> [NonEmpty a]", "code": "groupWith f = groupBy ((==) `on` f)", "poly_type": "Ad-hoc", "dependencies": "groupBy :: Foldable f => (a -> a -> Bool) -> f a -> [NonEmpty a]", "locations": [[455, 10], [455, 14], [455, 29], [455, 33], [455, 24]], "locations_src": ["f", "groupBy", "on", "f", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--groupAllWith", "signature": "groupAllWith :: (Ord b) => (a -> b) -> [a] -> [NonEmpty a]", "code": "groupAllWith f = groupWith f . List.sortBy (compare `on` f)", "poly_type": "Ad-hoc", "dependencies": "sortBy :: (a -> a -> Ordering) -> NonEmpty a -> NonEmpty a\ngroupWith :: (Foldable f, Eq b) => (a -> b) -> f a -> [NonEmpty a]", "locations": [[461, 13], [461, 17], [461, 27], [461, 36], [461, 44], [461, 53], [461, 57], [461, 29]], "locations_src": ["f", "groupWith", "f", "sortBy", "compare", "on", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--groupBy1", "signature": "groupBy1 :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty (NonEmpty a)", "code": "groupBy1 eq (x :| xs) = (x :| ys) :| groupBy eq zs\n  where (ys, zs) = List.span (eq x) xs", "poly_type": "Parametric", "dependencies": "span :: (a -> Bool) -> NonEmpty a -> ([a], [a])\ngroupBy :: Foldable f => (a -> a -> Bool) -> f a -> [NonEmpty a]", "locations": [[470, 9], [470, 13], [470, 18], [470, 25], [470, 30], [470, 37], [470, 45], [470, 48], [471, 9], [471, 13], [471, 24], [471, 30], [471, 33], [471, 36]], "locations_src": ["eq", "x", "xs", "x", "ys", "groupBy", "eq", "zs", "ys", "zs", "span", "eq", "x", "xs"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--groupWith1", "signature": "groupWith1 :: (Eq b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)", "code": "groupWith1 f = groupBy1 ((==) `on` f)", "poly_type": "Ad-hoc", "dependencies": "groupBy1 :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty (NonEmpty a)", "locations": [[475, 11], [475, 15], [475, 31], [475, 35], [475, 26]], "locations_src": ["f", "groupBy1", "on", "f", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--groupAllWith1", "signature": "groupAllWith1 :: (Ord b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)", "code": "groupAllWith1 f = groupWith1 f . sortWith f", "poly_type": "Ad-hoc", "dependencies": "groupWith1 :: (Eq b) => (a -> b) -> NonEmpty a -> NonEmpty (NonEmpty a)", "locations": [[479, 14], [479, 18], [479, 29], [479, 33], [479, 42], [479, 31]], "locations_src": ["f", "groupWith1", "f", "sortWith", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--permutations1", "signature": "permutations1 :: NonEmpty a -> NonEmpty (NonEmpty a)", "code": "permutations1 xs = fromList <$> permutations (toList xs)", "poly_type": "Parametric", "dependencies": "fromList :: HasCallStack => [a] -> NonEmpty a\ntoList :: NonEmpty a -> [a]", "locations": [[503, 14], [503, 19], [503, 32], [503, 46], [503, 53], [503, 28]], "locations_src": ["xs", "fromList", "permutations", "toList", "xs", "<$>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--isPrefixOf", "signature": "isPrefixOf :: Eq a => [a] -> NonEmpty a -> Bool", "code": "isPrefixOf (y:ys) (x :| xs) = (y == x) && List.isPrefixOf ys xs\nisPrefixOf [] _ = True", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[509, 12], [509, 14], [509, 19], [509, 24], [509, 31], [509, 36], [509, 58], [509, 61], [509, 33], [509, 39]], "locations_src": ["y", "ys", "x", "xs", "y", "x", "ys", "xs", "==", "&&"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--(!!)", "signature": "(!!) :: HasCallStack => NonEmpty a -> Int -> a", "code": "(!!) ~(x :| xs) n\n  | n == 0 = x\n  | n > 0  = xs List.!! (n - 1)\n  | otherwise = error \"NonEmpty.!! negative index\"", "poly_type": "Ad-hoc", "dependencies": "(!!) :: HasCallStack => NonEmpty a -> Int -> a", "locations": [[516, 7], [516, 12], [516, 16], [517, 4], [517, 13], [518, 4], [518, 13], [518, 25], [519, 4], [519, 16], [516, 1], [517, 6], [518, 6], [518, 21], [518, 27]], "locations_src": ["x", "xs", "n", "n", "x", "n", "xs", "n", "otherwise", "error", "!!", "==", ">", "!!", "-"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--zip", "signature": "zip :: NonEmpty a -> NonEmpty b -> NonEmpty (a,b)", "code": "zip ~(x :| xs) ~(y :| ys) = (x, y) :| List.zip xs ys", "poly_type": "Parametric", "dependencies": "", "locations": [[525, 6], [525, 11], [525, 17], [525, 22], [525, 29], [525, 32], [525, 47], [525, 50]], "locations_src": ["x", "xs", "y", "ys", "x", "y", "xs", "ys"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--zipWith", "signature": "zipWith :: (a -> b -> c) -> NonEmpty a -> NonEmpty b -> NonEmpty c", "code": "zipWith f ~(x :| xs) ~(y :| ys) = f x y :| List.zipWith f xs ys", "poly_type": "Parametric", "dependencies": "", "locations": [[531, 8], [531, 12], [531, 17], [531, 23], [531, 28], [531, 34], [531, 36], [531, 38], [531, 56], [531, 58], [531, 61]], "locations_src": ["f", "x", "xs", "y", "ys", "f", "x", "y", "f", "xs", "ys"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--unzip", "signature": "unzip :: Functor f => f (a,b) -> (f a, f b)", "code": "unzip xs = (fst <$> xs, snd <$> xs)", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[535, 6], [535, 12], [535, 20], [535, 24], [535, 32], [535, 16], [535, 28]], "locations_src": ["xs", "fst", "xs", "snd", "xs", "<$>", "<$>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--nubBy", "signature": "nubBy :: (a -> a -> Bool) -> NonEmpty a -> NonEmpty a", "code": "nubBy eq (a :| as) = a :| List.nubBy eq (List.filter (\\b -> not (eq a b)) as)", "poly_type": "Parametric", "dependencies": "a :: k\nfilter :: (a -> Bool) -> NonEmpty a -> [a]", "locations": [[550, 6], [550, 10], [550, 15], [550, 21], [550, 37], [550, 46], [550, 55], [550, 60], [550, 65], [550, 68], [550, 70], [550, 74]], "locations_src": ["eq", "a", "as", "a", "eq", "filter", "b", "not", "eq", "a", "b", "as"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--sortBy", "signature": "sortBy :: (a -> a -> Ordering) -> NonEmpty a -> NonEmpty a", "code": "sortBy f = lift (List.sortBy f)", "poly_type": "Parametric", "dependencies": "lift :: Foldable f => ([a] -> [b]) -> f a -> NonEmpty b", "locations": [[562, 7], [562, 11], [562, 29]], "locations_src": ["f", "lift", "f"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--appendList", "signature": "appendList :: NonEmpty a -> [a] -> NonEmpty a", "code": "appendList (x :| xs) ys = x :| xs <> ys", "poly_type": "Parametric", "dependencies": "", "locations": [[589, 12], [589, 17], [589, 21], [589, 26], [589, 31], [589, 37], [589, 34]], "locations_src": ["x", "xs", "ys", "x", "xs", "ys", "<>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/List/NonEmpty.hs--prependList", "signature": "prependList :: [a] -> NonEmpty a -> NonEmpty a", "code": "prependList ls ne = case ls of\n  [] -> ne\n  (x : xs) -> x :| xs <> toList ne", "poly_type": "Parametric", "dependencies": "toList :: NonEmpty a -> [a]", "locations": [[601, 12], [601, 15], [601, 25], [602, 8], [603, 3], [603, 7], [603, 14], [603, 19], [603, 25], [603, 32], [603, 22]], "locations_src": ["ls", "ne", "ls", "ne", "x", "xs", "x", "xs", "toList", "ne", "<>"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/STRef/Lazy.hs--modifySTRef", "signature": "modifySTRef :: ST.STRef s a -> (a -> a) -> ST s ()", "code": "modifySTRef r f = strictToLazyST (ST.modifySTRef r f)", "poly_type": "Parametric", "dependencies": "", "locations": [[37, 12], [37, 14], [37, 18], [37, 49], [37, 51]], "locations_src": ["r", "f", "strictToLazyST", "r", "f"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftEq", "signature": "liftEq :: (a -> b -> Bool) -> f a -> f b -> Bool", "code": "liftEq (===) (Generically1 as1) (Generically1 as2) = liftEq (===) (from1 as1) (from1 as2)\nliftEq _ (Just _) Nothing = False\nliftEq _ (_:_) [] = False\nliftEq _ Nothing (Just _) = False\nliftEq _ Nothing Nothing = True\nliftEq _ [] (_:_) = False\nliftEq _ [] [] = True\nliftEq _ _ _ = True\nliftEq eq (Down x) (Down y) = eq x y\nliftEq eq (Identity x) (Identity y) = eq x y\nliftEq eq (Just x) (Just y) = eq x y\nliftEq eq (MkSolo a) (MkSolo b) = a `eq` b\nliftEq eq (a :| as) (b :| bs) = eq a b && liftEq eq as bs\nliftEq eq (x :+ y) (u :+ v) = eq x u && eq y v\nliftEq eq (x:xs) (y:ys) = eq x y && liftEq eq xs ys", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[483, 11], [483, 20], [483, 29], [483, 34], [483, 37], [483, 39], [512, 11], [512, 15], [512, 17], [512, 22], [512, 24], [512, 30], [512, 33], [512, 35], [512, 47], [512, 50], [512, 53], [512, 37], [533, 9], [533, 13], [533, 18], [533, 23], [533, 28], [533, 34], [533, 37], [533, 39], [533, 51], [533, 54], [533, 57], [533, 41], [580, 9], [580, 20], [580, 31], [580, 36], [580, 39], [580, 43], [761, 29], [761, 48], [761, 69], [761, 75], [761, 81], [761, 87], [761, 10], [761, 63], [819, 11], [819, 24], [819, 37], [819, 42], [819, 45], [819, 47], [896, 11], [896, 20], [896, 29], [896, 34], [896, 37], [896, 39], [923, 11], [923, 15], [923, 20], [923, 24], [923, 29], [923, 34], [923, 37], [923, 39], [923, 44], [923, 47], [923, 49], [923, 41]], "locations_src": ["eq", "x", "y", "eq", "x", "y", "eq", "x", "xs", "y", "ys", "eq", "x", "y", "eq", "xs", "ys", "&&", "eq", "a", "as", "b", "bs", "eq", "a", "b", "eq", "as", "bs", "&&", "eq", "a", "b", "a", "eq", "b", "as1", "as2", "from1", "as1", "from1", "as2", "===", "===", "eq", "x", "y", "eq", "x", "y", "eq", "x", "y", "eq", "x", "y", "eq", "x", "y", "u", "v", "eq", "x", "u", "eq", "y", "v", "&&"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftCompare", "signature": "liftCompare :: (a -> b -> Ordering) -> f a -> f b -> Ordering", "code": "liftCompare _ (Just _) Nothing = GT\nliftCompare _ (_:_) [] = GT\nliftCompare _ Nothing (Just _) = LT\nliftCompare _ Nothing Nothing = EQ\nliftCompare _ [] (_:_) = LT\nliftCompare _ [] [] = EQ\nliftCompare _ _ _ = EQ\nliftCompare cmp (Generically1 as1) (Generically1 as2) = liftCompare cmp (from1 as1) (from1 as2)\nliftCompare cmp (MkSolo a) (MkSolo b) = cmp a b\nliftCompare cmp (a :| as) (b :| bs) = cmp a b `mappend` liftCompare cmp as bs\nliftCompare comp (Down x) (Down y) = case comp x y of\n        LT -> GT\n        EQ -> EQ\n        GT -> LT\nliftCompare comp (Identity x) (Identity y) = comp x y\nliftCompare comp (Just x) (Just y) = comp x y\nliftCompare comp (x:xs) (y:ys) = comp x y `mappend` liftCompare comp xs ys", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[490, 16], [490, 27], [490, 36], [490, 41], [490, 46], [490, 48], [519, 16], [519, 22], [519, 24], [519, 29], [519, 31], [519, 37], [519, 42], [519, 44], [519, 47], [519, 68], [519, 73], [519, 76], [537, 14], [537, 19], [537, 24], [537, 29], [537, 34], [537, 40], [537, 44], [537, 46], [537, 49], [537, 70], [537, 74], [537, 77], [588, 14], [588, 26], [588, 37], [588, 42], [588, 46], [588, 48], [766, 14], [766, 32], [766, 51], [766, 70], [766, 75], [766, 81], [766, 87], [766, 93], [823, 16], [823, 31], [823, 44], [823, 49], [823, 54], [823, 56], [900, 16], [900, 27], [900, 36], [900, 46], [900, 51], [900, 53]], "locations_src": ["comp", "x", "y", "comp", "x", "y", "comp", "x", "xs", "y", "ys", "comp", "x", "y", "mappend", "comp", "xs", "ys", "cmp", "a", "as", "b", "bs", "cmp", "a", "b", "mappend", "cmp", "as", "bs", "cmp", "a", "b", "cmp", "a", "b", "cmp", "as1", "as2", "cmp", "from1", "as1", "from1", "as2", "comp", "x", "y", "comp", "x", "y", "comp", "x", "y", "comp", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadsPrec", "signature": "liftReadsPrec :: (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (f a)", "code": "liftReadsPrec rdP rdL p s = readParen (p > 5) (\\s' -> do\n    (a, s'') <- rdP 6 s'\n    (\":|\", s''') <- lex s''\n    (as, s'''') <- rdL s'''\n    return (a :| as, s'''')) s\nliftReadsPrec rp _ = readsData $\n         readsUnaryWith rp \"Down\" Down\nliftReadsPrec rp rl = readPrec_to_S $\n        liftReadPrec (readS_to_Prec rp) (readS_to_Prec (const rl))", "poly_type": "Parametric", "dependencies": "a :: k\nliftReadPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec (f a)\nreadsUnaryWith :: (Int -> ReadS a) -> String -> (a -> t) -> String -> ReadS t\nreadsData :: (String -> ReadS a) -> Int -> ReadS a", "locations": [[203, 18], [203, 21], [203, 26], [204, 8], [204, 22], [204, 36], [204, 41], [204, 56], [204, 62], [203, 40], [541, 16], [541, 20], [541, 24], [541, 26], [541, 30], [541, 41], [541, 50], [542, 5], [542, 8], [542, 16], [542, 22], [543, 11], [543, 20], [543, 24], [544, 5], [544, 9], [544, 19], [544, 23], [545, 4], [545, 12], [545, 17], [545, 21], [545, 29], [541, 43], [907, 18], [907, 25], [908, 9], [908, 24], [907, 35]], "locations_src": ["rp", "rl", "readPrec_to_S", "liftReadPrec", "readS_to_Prec", "rp", "readS_to_Prec", "const", "rl", "$", "rdP", "rdL", "p", "s", "readParen", "p", "s'", "a", "s''", "rdP", "s'", "s'''", "lex", "s''", "as", "s''''", "rdL", "s'''", "return", "a", "as", "s''''", "s", ">", "rp", "readsData", "readsUnaryWith", "rp", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadList", "signature": "liftReadList :: (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]", "code": "liftReadList rp rl = readPrec_to_S\n        (list $ liftReadPrec (readS_to_Prec rp) (readS_to_Prec (const rl))) 0", "poly_type": "Parametric", "dependencies": "liftReadPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec (f a)", "locations": [[213, 17], [213, 20], [213, 25], [214, 9], [214, 16], [214, 30], [214, 44], [214, 49], [214, 64], [214, 70], [214, 14]], "locations_src": ["rp", "rl", "readPrec_to_S", "list", "liftReadPrec", "readS_to_Prec", "rp", "readS_to_Prec", "const", "rl", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadPrec", "signature": "liftReadPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec (f a)", "code": "liftReadPrec _ _ = parens (expectP (Ident \"Proxy\") *> pure Proxy)\nliftReadPrec _ rl = rl\nliftReadPrec rp _  = parens $ prec complexPrec $ do\n        x <- step rp\n        expectP (Symbol \":+\")\n        y <- step rp\n        return (x :+ y)\n      where\n        complexPrec = 6\nliftReadPrec rp _ =\n        parens (expectP (Ident \"Nothing\") *> pure Nothing)\n        <|>\n        readData (readUnaryWith rp \"Just\" Just)\nliftReadPrec rp _ = readData $\n         readUnaryWith rp \"Identity\" Identity\nliftReadPrec rp _ = readData (readUnaryWith rp \"MkSolo\" MkSolo)\nliftReadPrec rp rl = readS_to_Prec $\n        liftReadsPrec (readPrec_to_S rp) (readPrec_to_S rl 0)", "poly_type": "Parametric", "dependencies": "readUnaryWith :: ReadPrec a -> String -> (a -> t) -> ReadPrec t\nliftReadsPrec :: (Int -> ReadS a) -> ReadS [a] -> Int -> ReadS (f a)\nreadData :: ReadPrec a -> ReadPrec a", "locations": [[221, 17], [221, 20], [221, 25], [222, 8], [222, 23], [222, 37], [222, 42], [222, 56], [221, 39], [494, 17], [495, 8], [495, 16], [495, 45], [497, 8], [497, 18], [497, 32], [495, 42], [496, 8], [523, 19], [523, 24], [596, 17], [596, 24], [596, 34], [596, 48], [827, 17], [827, 24], [828, 9], [828, 23], [827, 33], [889, 21], [889, 29], [889, 56], [889, 53], [931, 17], [931, 25], [931, 34], [931, 39], [932, 8], [932, 13], [932, 18], [933, 8], [934, 8], [934, 13], [934, 18], [935, 8], [935, 16], [935, 21], [937, 8], [931, 32], [931, 51]], "locations_src": ["rp", "rl", "readS_to_Prec", "liftReadsPrec", "readPrec_to_S", "rp", "readPrec_to_S", "rl", "$", "rp", "parens", "expectP", "pure", "readData", "readUnaryWith", "rp", "*>", "<|>", "rl", "rl", "rp", "readData", "readUnaryWith", "rp", "rp", "readData", "readUnaryWith", "rp", "$", "parens", "expectP", "pure", "*>", "rp", "parens", "prec", "complexPrec", "x", "step", "rp", "expectP", "y", "step", "rp", "return", "x", "y", "complexPrec", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadListPrec", "signature": "liftReadListPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec [f a]", "code": "liftReadListPrec rp rl = readS_to_Prec $ \\_ ->\n        liftReadList (readPrec_to_S rp) (readPrec_to_S rl 0)", "poly_type": "Parametric", "dependencies": "liftReadList :: (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]", "locations": [[233, 21], [233, 24], [233, 29], [234, 8], [234, 22], [234, 36], [234, 41], [234, 55], [233, 43]], "locations_src": ["rp", "rl", "readS_to_Prec", "liftReadList", "readPrec_to_S", "rp", "readPrec_to_S", "rl", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadListDefault", "signature": "liftReadListDefault :: Read1 f => (Int -> ReadS a) -> ReadS [a] -> ReadS [f a]", "code": "liftReadListDefault rp rl = readPrec_to_S\n    (liftReadListPrec (readS_to_Prec rp) (readS_to_Prec (const rl))) 0", "poly_type": "Ad-hoc", "dependencies": "liftReadListPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec [f a]", "locations": [[256, 20], [256, 23], [256, 28], [257, 5], [257, 23], [257, 37], [257, 42], [257, 57], [257, 63]], "locations_src": ["rp", "rl", "readPrec_to_S", "liftReadListPrec", "readS_to_Prec", "rp", "readS_to_Prec", "const", "rl"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadListPrecDefault", "signature": "liftReadListPrecDefault :: Read1 f => ReadPrec a -> ReadPrec [a]\n                        -> ReadPrec [f a]", "code": "liftReadListPrecDefault rp rl = list (liftReadPrec rp rl)", "poly_type": "Ad-hoc", "dependencies": "liftReadPrec :: ReadPrec a -> ReadPrec [a] -> ReadPrec (f a)", "locations": [[265, 24], [265, 27], [265, 32], [265, 38], [265, 51], [265, 54]], "locations_src": ["rp", "rl", "list", "liftReadPrec", "rp", "rl"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftShowsPrec", "signature": "liftShowsPrec :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->\n        Int -> f a -> ShowS", "code": "liftShowsPrec _ _ _ Nothing = showString \"Nothing\"\nliftShowsPrec _ _ _ _ = showString \"Proxy\"\nliftShowsPrec _ sl _ = sl\nliftShowsPrec shwP shwL p (a :| as) = showParen (p > 5) $\n    shwP 6 a . showString \" :| \" . shwL as\nliftShowsPrec sp _ d (Down x) = showsUnaryWith sp \"Down\" d x\nliftShowsPrec sp _ d (Identity x) = showsUnaryWith sp \"Identity\" d x\nliftShowsPrec sp _ d (Just x) = showsUnaryWith sp \"Just\" d x\nliftShowsPrec sp _ d (MkSolo x) = showsUnaryWith sp \"MkSolo\" d x\nliftShowsPrec sp _ d (x :+ y) = showParen (d > complexPrec) $\n        sp (complexPrec+1) x . showString \" :+ \" . sp (complexPrec+1) y\n      where\n        complexPrec = 6", "poly_type": "Parametric", "dependencies": "a :: k\nshowsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowS", "locations": [[504, 34], [505, 18], [505, 23], [505, 31], [505, 36], [505, 51], [505, 61], [505, 63], [529, 20], [529, 27], [549, 16], [549, 21], [549, 26], [549, 29], [549, 34], [549, 40], [549, 51], [550, 4], [550, 11], [550, 15], [550, 35], [550, 40], [549, 53], [549, 58], [550, 13], [550, 33], [610, 18], [610, 23], [610, 33], [610, 38], [610, 53], [610, 65], [610, 67], [835, 18], [835, 23], [835, 35], [835, 40], [835, 55], [835, 69], [835, 71], [885, 26], [912, 18], [912, 23], [912, 31], [912, 36], [912, 51], [912, 61], [912, 63], [948, 18], [948, 23], [948, 26], [948, 31], [948, 36], [948, 47], [948, 51], [949, 8], [949, 12], [949, 27], [949, 31], [949, 51], [949, 55], [949, 70], [951, 8], [948, 49], [948, 64], [949, 23], [949, 29], [949, 49], [949, 66]], "locations_src": ["showString", "sp", "d", "x", "showsUnaryWith", "sp", "d", "x", "sl", "sl", "shwP", "shwL", "p", "a", "as", "showParen", "p", "shwP", "a", "showString", "shwL", "as", ">", "$", ".", ".", "sp", "d", "x", "showsUnaryWith", "sp", "d", "x", "sp", "d", "x", "showsUnaryWith", "sp", "d", "x", "showString", "sp", "d", "x", "showsUnaryWith", "sp", "d", "x", "sp", "d", "x", "y", "showParen", "d", "complexPrec", "sp", "complexPrec", "x", "showString", "sp", "complexPrec", "y", "complexPrec", ">", "$", "+", ".", ".", "+"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftShowList", "signature": "liftShowList :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->\n        [f a] -> ShowS", "code": "liftShowList sp sl = showListWith (liftShowsPrec sp sl 0)", "poly_type": "Parametric", "dependencies": "liftShowsPrec :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->\n        Int -> f a -> ShowS", "locations": [[302, 17], [302, 20], [302, 25], [302, 39], [302, 53], [302, 56]], "locations_src": ["sp", "sl", "showListWith", "liftShowsPrec", "sp", "sl"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftEq2", "signature": "liftEq2 :: (a -> b -> Bool) -> (c -> d -> Bool) -> f a c -> f b d -> Bool", "code": "liftEq2 _ _ (Left _) (Right _) = False\nliftEq2 _ _ (Right _) (Left _) = False\nliftEq2 _ e2 (Right x) (Right y) = e2 x y\nliftEq2 e1 _ (Left x) (Left y) = e1 x y\nliftEq2 e1 e2 (u1, u2, x1, y1) (v1, v2, x2, y2) =\n        u1 == v1 &&\n        u2 == v2 &&\n        e1 x1 x2 && e2 y1 y2\nliftEq2 e1 e2 (u1, x1, y1) (v1, x2, y2) =\n        u1 == v1 &&\n        e1 x1 x2 && e2 y1 y2\nliftEq2 e1 e2 (x1, y1) (x2, y2) = e1 x1 x2 && e2 y1 y2\nliftEq2 eq _ (Const x) (Const y) = eq x y", "poly_type": "Parametric", "dependencies": "", "locations": [[555, 12], [555, 15], [555, 19], [555, 23], [555, 28], [555, 32], [555, 38], [555, 41], [555, 44], [555, 50], [555, 53], [555, 56], [555, 47], [623, 12], [623, 15], [623, 19], [623, 23], [623, 27], [623, 32], [623, 36], [623, 40], [624, 8], [624, 14], [625, 8], [625, 11], [625, 14], [625, 20], [625, 23], [625, 26], [624, 11], [624, 17], [625, 17], [691, 12], [691, 15], [691, 19], [691, 23], [691, 27], [691, 31], [691, 36], [691, 40], [691, 44], [691, 48], [692, 8], [692, 14], [693, 8], [693, 14], [694, 8], [694, 11], [694, 14], [694, 20], [694, 23], [694, 26], [692, 11], [692, 17], [693, 11], [693, 17], [694, 17], [770, 12], [770, 23], [770, 32], [770, 37], [770, 40], [770, 42], [773, 14], [773, 24], [773, 34], [773, 39], [773, 42], [773, 44], [839, 12], [839, 24], [839, 34], [839, 39], [839, 42], [839, 44]], "locations_src": ["e1", "e2", "x1", "y1", "x2", "y2", "e1", "x1", "x2", "e2", "y1", "y2", "&&", "e1", "e2", "u1", "x1", "y1", "v1", "x2", "y2", "u1", "v1", "e1", "x1", "x2", "e2", "y1", "y2", "==", "&&", "&&", "e1", "e2", "u1", "u2", "x1", "y1", "v1", "v2", "x2", "y2", "u1", "v1", "u2", "v2", "e1", "x1", "x2", "e2", "y1", "y2", "==", "&&", "==", "&&", "&&", "e1", "x", "y", "e1", "x", "y", "e2", "x", "y", "e2", "x", "y", "eq", "x", "y", "eq", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftCompare2", "signature": "liftCompare2 :: (a -> b -> Ordering) -> (c -> d -> Ordering) ->\n        f a c -> f b d -> Ordering", "code": "liftCompare2 _ _ (Left _) (Right _) = LT\nliftCompare2 _ _ (Right _) (Left _) = GT\nliftCompare2 _ comp2 (Right x) (Right y) = comp2 x y\nliftCompare2 comp _ (Const x) (Const y) = comp x y\nliftCompare2 comp1 _ (Left x) (Left y) = comp1 x y\nliftCompare2 comp1 comp2 (u1, u2, x1, y1) (v1, v2, x2, y2) =\n        compare u1 v1 `mappend`\n        compare u2 v2 `mappend`\n        comp1 x1 x2 `mappend` comp2 y1 y2\nliftCompare2 comp1 comp2 (u1, x1, y1) (v1, x2, y2) =\n        compare u1 v1 `mappend`\n        comp1 x1 x2 `mappend` comp2 y1 y2\nliftCompare2 comp1 comp2 (x1, y1) (x2, y2) =\n        comp1 x1 x2 `mappend` comp2 y1 y2", "poly_type": "Parametric", "dependencies": "", "locations": [[559, 17], [559, 23], [559, 30], [559, 34], [559, 39], [559, 43], [560, 8], [560, 14], [560, 17], [560, 21], [560, 30], [560, 36], [560, 39], [632, 17], [632, 23], [632, 30], [632, 34], [632, 38], [632, 43], [632, 47], [632, 51], [633, 8], [633, 16], [633, 19], [633, 23], [634, 8], [634, 14], [634, 17], [634, 21], [634, 30], [634, 36], [634, 39], [702, 17], [702, 23], [702, 30], [702, 34], [702, 38], [702, 42], [702, 47], [702, 51], [702, 55], [702, 59], [703, 8], [703, 16], [703, 19], [703, 23], [704, 8], [704, 16], [704, 19], [704, 23], [705, 8], [705, 14], [705, 17], [705, 21], [705, 30], [705, 36], [705, 39], [777, 17], [777, 31], [777, 40], [777, 45], [777, 51], [777, 53], [780, 19], [780, 32], [780, 42], [780, 47], [780, 53], [780, 55], [843, 17], [843, 31], [843, 41], [843, 46], [843, 51], [843, 53]], "locations_src": ["comp1", "comp2", "x1", "y1", "x2", "y2", "comp1", "x1", "x2", "mappend", "comp2", "y1", "y2", "comp1", "comp2", "u1", "x1", "y1", "v1", "x2", "y2", "compare", "u1", "v1", "mappend", "comp1", "x1", "x2", "mappend", "comp2", "y1", "y2", "comp1", "comp2", "u1", "u2", "x1", "y1", "v1", "v2", "x2", "y2", "compare", "u1", "v1", "mappend", "compare", "u2", "v2", "mappend", "comp1", "x1", "x2", "mappend", "comp2", "y1", "y2", "comp1", "x", "y", "comp1", "x", "y", "comp2", "x", "y", "comp2", "x", "y", "comp", "x", "y", "comp", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadsPrec2", "signature": "liftReadsPrec2 :: (Int -> ReadS a) -> ReadS [a] ->\n        (Int -> ReadS b) -> ReadS [b] -> Int -> ReadS (f a b)", "code": "liftReadsPrec2 rp1 rl1 rp2 rl2 = readPrec_to_S $\n        liftReadPrec2 (readS_to_Prec rp1) (readS_to_Prec (const rl1))\n                      (readS_to_Prec rp2) (readS_to_Prec (const rl2))", "poly_type": "Parametric", "dependencies": "liftReadPrec2 :: ReadPrec a -> ReadPrec [a] ->\n        ReadPrec b -> ReadPrec [b] -> ReadPrec (f a b)", "locations": [[377, 19], [377, 23], [377, 27], [377, 31], [377, 37], [378, 8], [378, 23], [378, 37], [378, 43], [378, 58], [378, 64], [379, 23], [379, 37], [379, 43], [379, 58], [379, 64], [377, 51]], "locations_src": ["rp1", "rl1", "rp2", "rl2", "readPrec_to_S", "liftReadPrec2", "readS_to_Prec", "rp1", "readS_to_Prec", "const", "rl1", "readS_to_Prec", "rp2", "readS_to_Prec", "const", "rl2", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadList2", "signature": "liftReadList2 :: (Int -> ReadS a) -> ReadS [a] ->\n        (Int -> ReadS b) -> ReadS [b] -> ReadS [f a b]", "code": "liftReadList2 rp1 rl1 rp2 rl2 = readPrec_to_S\n       (list $ liftReadPrec2 (readS_to_Prec rp1) (readS_to_Prec (const rl1))\n                             (readS_to_Prec rp2) (readS_to_Prec (const rl2))) 0", "poly_type": "Parametric", "dependencies": "liftReadPrec2 :: ReadPrec a -> ReadPrec [a] ->\n        ReadPrec b -> ReadPrec [b] -> ReadPrec (f a b)", "locations": [[389, 18], [389, 22], [389, 26], [389, 30], [389, 36], [390, 8], [390, 15], [390, 30], [390, 44], [390, 50], [390, 65], [390, 71], [391, 30], [391, 44], [391, 50], [391, 65], [391, 71], [390, 13]], "locations_src": ["rp1", "rl1", "rp2", "rl2", "readPrec_to_S", "list", "liftReadPrec2", "readS_to_Prec", "rp1", "readS_to_Prec", "const", "rl1", "readS_to_Prec", "rp2", "readS_to_Prec", "const", "rl2", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadPrec2", "signature": "liftReadPrec2 :: ReadPrec a -> ReadPrec [a] ->\n        ReadPrec b -> ReadPrec [b] -> ReadPrec (f a b)", "code": "liftReadPrec2 rp _ _ _ = readData $\n         readUnaryWith rp \"Const\" Const\nliftReadPrec2 rp1 _ rp2 _ = parens $ paren $ do\n        x <- rp1\n        expectP (Punc \",\")\n        y <- rp2\n        return (x,y)\nliftReadPrec2 rp1 _ rp2 _ = parens $ paren $ do\n        x1 <- readPrec\n        expectP (Punc \",\")\n        x2 <- readPrec\n        expectP (Punc \",\")\n        y1 <- rp1\n        expectP (Punc \",\")\n        y2 <- rp2\n        return (x1,x2,y1,y2)\nliftReadPrec2 rp1 _ rp2 _ = parens $ paren $ do\n        x1 <- readPrec\n        expectP (Punc \",\")\n        y1 <- rp1\n        expectP (Punc \",\")\n        y2 <- rp2\n        return (x1,y1,y2)\nliftReadPrec2 rp1 _ rp2 _ = readData $\n         readUnaryWith rp1 \"Left\" Left <|>\n         readUnaryWith rp2 \"Right\" Right\nliftReadPrec2 rp1 rl1 rp2 rl2 = readS_to_Prec $\n        liftReadsPrec2 (readPrec_to_S rp1) (readPrec_to_S rl1 0)\n                       (readPrec_to_S rp2) (readPrec_to_S rl2 0)", "poly_type": "Parametric", "dependencies": "readUnaryWith :: ReadPrec a -> String -> (a -> t) -> ReadPrec t\nliftReadsPrec2 :: (Int -> ReadS a) -> ReadS [a] ->\n        (Int -> ReadS b) -> ReadS [b] -> Int -> ReadS (f a b)\nreadData :: ReadPrec a -> ReadPrec a", "locations": [[399, 18], [399, 22], [399, 26], [399, 30], [399, 36], [400, 8], [400, 24], [400, 38], [400, 44], [400, 58], [401, 24], [401, 38], [401, 44], [401, 58], [399, 50], [564, 18], [564, 24], [564, 32], [564, 41], [565, 8], [565, 13], [566, 8], [567, 8], [567, 13], [568, 8], [568, 16], [568, 18], [564, 39], [564, 47], [642, 18], [642, 24], [642, 32], [642, 41], [643, 8], [643, 14], [644, 8], [645, 8], [645, 14], [646, 8], [647, 8], [647, 14], [648, 8], [648, 16], [648, 19], [648, 22], [642, 39], [642, 47], [713, 18], [713, 24], [713, 32], [713, 41], [714, 8], [714, 14], [715, 8], [716, 8], [716, 14], [717, 8], [718, 8], [718, 14], [719, 8], [720, 8], [720, 14], [721, 8], [721, 16], [721, 19], [721, 22], [721, 25], [713, 39], [713, 47], [784, 18], [784, 24], [784, 32], [785, 9], [785, 23], [786, 9], [786, 23], [784, 41], [785, 39], [847, 18], [847, 29], [848, 9], [848, 23], [847, 38]], "locations_src": ["rp1", "rl1", "rp2", "rl2", "readS_to_Prec", "liftReadsPrec2", "readPrec_to_S", "rp1", "readPrec_to_S", "rl1", "readPrec_to_S", "rp2", "readPrec_to_S", "rl2", "$", "rp1", "rp2", "parens", "paren", "x", "rp1", "expectP", "y", "rp2", "return", "x", "y", "$", "$", "rp1", "rp2", "parens", "paren", "x1", "readPrec", "expectP", "y1", "rp1", "expectP", "y2", "rp2", "return", "x1", "y1", "y2", "$", "$", "rp1", "rp2", "parens", "paren", "x1", "readPrec", "expectP", "x2", "readPrec", "expectP", "y1", "rp1", "expectP", "y2", "rp2", "return", "x1", "x2", "y1", "y2", "$", "$", "rp1", "rp2", "readData", "readUnaryWith", "rp1", "readUnaryWith", "rp2", "$", "<|>", "rp", "readData", "readUnaryWith", "rp", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadListPrec2", "signature": "liftReadListPrec2 :: ReadPrec a -> ReadPrec [a] ->\n        ReadPrec b -> ReadPrec [b] -> ReadPrec [f a b]", "code": "liftReadListPrec2 rp1 rl1 rp2 rl2 = readS_to_Prec $ \\_ ->\n        liftReadList2 (readPrec_to_S rp1) (readPrec_to_S rl1 0)\n                      (readPrec_to_S rp2) (readPrec_to_S rl2 0)", "poly_type": "Parametric", "dependencies": "liftReadList2 :: (Int -> ReadS a) -> ReadS [a] ->\n        (Int -> ReadS b) -> ReadS [b] -> ReadS [f a b]", "locations": [[413, 22], [413, 26], [413, 30], [413, 34], [413, 40], [414, 8], [414, 23], [414, 37], [414, 43], [414, 57], [415, 23], [415, 37], [415, 43], [415, 57], [413, 54]], "locations_src": ["rp1", "rl1", "rp2", "rl2", "readS_to_Prec", "liftReadList2", "readPrec_to_S", "rp1", "readPrec_to_S", "rl1", "readPrec_to_S", "rp2", "readPrec_to_S", "rl2", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadList2Default", "signature": "liftReadList2Default :: Read2 f => (Int -> ReadS a) -> ReadS [a] ->\n    (Int -> ReadS b) -> ReadS [b] ->ReadS [f a b]", "code": "liftReadList2Default rp1 rl1 rp2 rl2 = readPrec_to_S\n    (liftReadListPrec2 (readS_to_Prec rp1) (readS_to_Prec (const rl1))\n                       (readS_to_Prec rp2) (readS_to_Prec (const rl2))) 0", "poly_type": "Ad-hoc", "dependencies": "liftReadListPrec2 :: ReadPrec a -> ReadPrec [a] ->\n        ReadPrec b -> ReadPrec [b] -> ReadPrec [f a b]", "locations": [[436, 21], [436, 25], [436, 29], [436, 33], [436, 39], [437, 5], [437, 24], [437, 38], [437, 44], [437, 59], [437, 65], [438, 24], [438, 38], [438, 44], [438, 59], [438, 65]], "locations_src": ["rp1", "rl1", "rp2", "rl2", "readPrec_to_S", "liftReadListPrec2", "readS_to_Prec", "rp1", "readS_to_Prec", "const", "rl1", "readS_to_Prec", "rp2", "readS_to_Prec", "const", "rl2"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftReadListPrec2Default", "signature": "liftReadListPrec2Default :: Read2 f => ReadPrec a -> ReadPrec [a] ->\n    ReadPrec b -> ReadPrec [b] -> ReadPrec [f a b]", "code": "liftReadListPrec2Default rp1 rl1 rp2 rl2 = list (liftReadPrec2 rp1 rl1 rp2 rl2)", "poly_type": "Ad-hoc", "dependencies": "liftReadPrec2 :: ReadPrec a -> ReadPrec [a] ->\n        ReadPrec b -> ReadPrec [b] -> ReadPrec (f a b)", "locations": [[446, 25], [446, 29], [446, 33], [446, 37], [446, 43], [446, 49], [446, 63], [446, 67], [446, 71], [446, 75]], "locations_src": ["rp1", "rl1", "rp2", "rl2", "list", "liftReadPrec2", "rp1", "rl1", "rp2", "rl2"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftShowsPrec2", "signature": "liftShowsPrec2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->\n        (Int -> b -> ShowS) -> ([b] -> ShowS) -> Int -> f a b -> ShowS", "code": "liftShowsPrec2 _ _ sp2 _ d (Right x) = showsUnaryWith sp2 \"Right\" d x\nliftShowsPrec2 sp _ _ _ d (Const x) = showsUnaryWith sp \"Const\" d x\nliftShowsPrec2 sp1 _ _ _ d (Left x) = showsUnaryWith sp1 \"Left\" d x\nliftShowsPrec2 sp1 _ sp2 _ _ (x, y) =\n        showChar '(' . sp1 0 x . showChar ',' . sp2 0 y . showChar ')'\nliftShowsPrec2 sp1 _ sp2 _ _ (x1,x2,y1,y2)\n        = showChar '(' . showsPrec 0 x1\n        . showChar ',' . showsPrec 0 x2\n        . showChar ',' . sp1 0 y1\n        . showChar ',' . sp2 0 y2\n        . showChar ')'\nliftShowsPrec2 sp1 _ sp2 _ _ (x1,y1,y2)\n        = showChar '(' . showsPrec 0 x1\n        . showChar ',' . sp1 0 y1\n        . showChar ',' . sp2 0 y2\n        . showChar ')'", "poly_type": "Parametric", "dependencies": "showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowS", "locations": [[575, 19], [575, 25], [575, 34], [575, 37], [576, 8], [576, 23], [576, 29], [576, 33], [576, 48], [576, 54], [576, 58], [576, 21], [576, 31], [576, 46], [576, 56], [659, 19], [659, 25], [659, 34], [659, 37], [659, 40], [660, 10], [660, 25], [660, 37], [661, 10], [661, 25], [661, 31], [662, 10], [662, 25], [662, 31], [663, 10], [660, 23], [661, 8], [661, 23], [662, 8], [662, 23], [663, 8], [732, 19], [732, 25], [732, 34], [732, 37], [732, 40], [732, 43], [733, 10], [733, 25], [733, 37], [734, 10], [734, 25], [734, 37], [735, 10], [735, 25], [735, 31], [736, 10], [736, 25], [736, 31], [737, 10], [733, 23], [734, 8], [734, 23], [735, 8], [735, 23], [736, 8], [736, 23], [737, 8], [793, 19], [793, 29], [793, 37], [793, 42], [793, 57], [793, 68], [793, 70], [794, 23], [794, 29], [794, 38], [794, 43], [794, 58], [794, 70], [794, 72], [855, 19], [855, 28], [855, 37], [855, 42], [855, 57], [855, 68], [855, 70]], "locations_src": ["sp1", "sp2", "x", "y", "showChar", "sp1", "x", "showChar", "sp2", "y", "showChar", ".", ".", ".", ".", "sp1", "sp2", "x1", "y1", "y2", "showChar", "showsPrec", "x1", "showChar", "sp1", "y1", "showChar", "sp2", "y2", "showChar", ".", ".", ".", ".", ".", ".", "sp1", "sp2", "x1", "x2", "y1", "y2", "showChar", "showsPrec", "x1", "showChar", "showsPrec", "x2", "showChar", "sp1", "y1", "showChar", "sp2", "y2", "showChar", ".", ".", ".", ".", ".", ".", ".", ".", "sp1", "d", "x", "showsUnaryWith", "sp1", "d", "x", "sp2", "d", "x", "showsUnaryWith", "sp2", "d", "x", "sp", "d", "x", "showsUnaryWith", "sp", "d", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftShowList2", "signature": "liftShowList2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->\n        (Int -> b -> ShowS) -> ([b] -> ShowS) -> [f a b] -> ShowS", "code": "liftShowList2 sp1 sl1 sp2 sl2 =\n        showListWith (liftShowsPrec2 sp1 sl1 sp2 sl2 0)", "poly_type": "Parametric", "dependencies": "liftShowsPrec2 :: (Int -> a -> ShowS) -> ([a] -> ShowS) ->\n        (Int -> b -> ShowS) -> ([b] -> ShowS) -> Int -> f a b -> ShowS", "locations": [[467, 18], [467, 22], [467, 26], [467, 30], [468, 8], [468, 22], [468, 37], [468, 41], [468, 45], [468, 49]], "locations_src": ["sp1", "sl1", "sp2", "sl2", "showListWith", "liftShowsPrec2", "sp1", "sl1", "sp2", "sl2"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftEq", "signature": "liftEq :: (a1 -> a2 -> Bool) -> (Generically1 f a1 -> Generically1 f a2 -> Bool)", "code": "liftEq (===) (Generically1 as1) (Generically1 as2) = liftEq (===) (from1 as1) (from1 as2)\nliftEq _ (Just _) Nothing = False\nliftEq _ (_:_) [] = False\nliftEq _ Nothing (Just _) = False\nliftEq _ Nothing Nothing = True\nliftEq _ [] (_:_) = False\nliftEq _ [] [] = True\nliftEq _ _ _ = True\nliftEq eq (Down x) (Down y) = eq x y\nliftEq eq (Identity x) (Identity y) = eq x y\nliftEq eq (Just x) (Just y) = eq x y\nliftEq eq (MkSolo a) (MkSolo b) = a `eq` b\nliftEq eq (a :| as) (b :| bs) = eq a b && liftEq eq as bs\nliftEq eq (x :+ y) (u :+ v) = eq x u && eq y v\nliftEq eq (x:xs) (y:ys) = eq x y && liftEq eq xs ys", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[483, 11], [483, 20], [483, 29], [483, 34], [483, 37], [483, 39], [512, 11], [512, 15], [512, 17], [512, 22], [512, 24], [512, 30], [512, 33], [512, 35], [512, 47], [512, 50], [512, 53], [512, 37], [533, 9], [533, 13], [533, 18], [533, 23], [533, 28], [533, 34], [533, 37], [533, 39], [533, 51], [533, 54], [533, 57], [533, 41], [580, 9], [580, 20], [580, 31], [580, 36], [580, 39], [580, 43], [761, 29], [761, 48], [761, 69], [761, 75], [761, 81], [761, 87], [761, 10], [761, 63], [819, 11], [819, 24], [819, 37], [819, 42], [819, 45], [819, 47], [896, 11], [896, 20], [896, 29], [896, 34], [896, 37], [896, 39], [923, 11], [923, 15], [923, 20], [923, 24], [923, 29], [923, 34], [923, 37], [923, 39], [923, 44], [923, 47], [923, 49], [923, 41]], "locations_src": ["eq", "x", "y", "eq", "x", "y", "eq", "x", "xs", "y", "ys", "eq", "x", "y", "eq", "xs", "ys", "&&", "eq", "a", "as", "b", "bs", "eq", "a", "b", "eq", "as", "bs", "&&", "eq", "a", "b", "a", "eq", "b", "as1", "as2", "from1", "as1", "from1", "as2", "===", "===", "eq", "x", "y", "eq", "x", "y", "eq", "x", "y", "eq", "x", "y", "eq", "x", "y", "u", "v", "eq", "x", "u", "eq", "y", "v", "&&"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--liftCompare", "signature": "liftCompare :: (a1 -> a2 -> Ordering) -> (Generically1 f a1 -> Generically1 f a2 -> Ordering)", "code": "liftCompare _ (Just _) Nothing = GT\nliftCompare _ (_:_) [] = GT\nliftCompare _ Nothing (Just _) = LT\nliftCompare _ Nothing Nothing = EQ\nliftCompare _ [] (_:_) = LT\nliftCompare _ [] [] = EQ\nliftCompare _ _ _ = EQ\nliftCompare cmp (Generically1 as1) (Generically1 as2) = liftCompare cmp (from1 as1) (from1 as2)\nliftCompare cmp (MkSolo a) (MkSolo b) = cmp a b\nliftCompare cmp (a :| as) (b :| bs) = cmp a b `mappend` liftCompare cmp as bs\nliftCompare comp (Down x) (Down y) = case comp x y of\n        LT -> GT\n        EQ -> EQ\n        GT -> LT\nliftCompare comp (Identity x) (Identity y) = comp x y\nliftCompare comp (Just x) (Just y) = comp x y\nliftCompare comp (x:xs) (y:ys) = comp x y `mappend` liftCompare comp xs ys", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[490, 16], [490, 27], [490, 36], [490, 41], [490, 46], [490, 48], [519, 16], [519, 22], [519, 24], [519, 29], [519, 31], [519, 37], [519, 42], [519, 44], [519, 47], [519, 68], [519, 73], [519, 76], [537, 14], [537, 19], [537, 24], [537, 29], [537, 34], [537, 40], [537, 44], [537, 46], [537, 49], [537, 70], [537, 74], [537, 77], [588, 14], [588, 26], [588, 37], [588, 42], [588, 46], [588, 48], [766, 14], [766, 32], [766, 51], [766, 70], [766, 75], [766, 81], [766, 87], [766, 93], [823, 16], [823, 31], [823, 44], [823, 49], [823, 54], [823, 56], [900, 16], [900, 27], [900, 36], [900, 46], [900, 51], [900, 53]], "locations_src": ["comp", "x", "y", "comp", "x", "y", "comp", "x", "xs", "y", "ys", "comp", "x", "y", "mappend", "comp", "xs", "ys", "cmp", "a", "as", "b", "bs", "cmp", "a", "b", "mappend", "cmp", "as", "bs", "cmp", "a", "b", "cmp", "a", "b", "cmp", "as1", "as2", "cmp", "from1", "as1", "from1", "as2", "comp", "x", "y", "comp", "x", "y", "comp", "x", "y", "comp", "x", "y"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readsData", "signature": "readsData :: (String -> ReadS a) -> Int -> ReadS a", "code": "readsData reader d =\n    readParen (d > 10) $ \\ r -> [res | (kw,s) <- lex r, res <- reader kw s]", "poly_type": "Parametric", "dependencies": "", "locations": [[963, 10], [963, 17], [964, 4], [964, 15], [964, 27], [964, 33], [964, 40], [964, 43], [964, 49], [964, 53], [964, 56], [964, 63], [964, 70], [964, 73], [964, 17], [964, 23]], "locations_src": ["reader", "d", "readParen", "d", "r", "res", "kw", "s", "lex", "r", "res", "reader", "kw", "s", ">", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readData", "signature": "readData :: ReadPrec a -> ReadPrec a", "code": "readData reader = parens $ prec 10 reader", "poly_type": "Parametric", "dependencies": "", "locations": [[974, 9], [974, 18], [974, 27], [974, 35], [974, 25]], "locations_src": ["reader", "parens", "prec", "reader", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readsUnaryWith", "signature": "readsUnaryWith :: (Int -> ReadS a) -> String -> (a -> t) -> String -> ReadS t", "code": "readsUnaryWith rp name cons kw s =\n    [(cons x,t) | kw == name, (x,t) <- rp 11 s]", "poly_type": "Parametric", "dependencies": "", "locations": [[981, 15], [981, 18], [981, 23], [981, 28], [981, 31], [982, 6], [982, 11], [982, 13], [982, 18], [982, 24], [982, 31], [982, 33], [982, 39], [982, 45], [982, 21]], "locations_src": ["rp", "name", "cons", "kw", "s", "cons", "x", "t", "kw", "name", "x", "t", "rp", "s", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readUnaryWith", "signature": "readUnaryWith :: ReadPrec a -> String -> (a -> t) -> ReadPrec t", "code": "readUnaryWith rp name cons = do\n    expectP $ Ident name\n    x <- step rp\n    return $ cons x", "poly_type": "Parametric", "dependencies": "", "locations": [[989, 14], [989, 17], [989, 22], [990, 4], [990, 20], [991, 4], [991, 9], [991, 14], [992, 4], [992, 13], [992, 18], [990, 12], [992, 11]], "locations_src": ["rp", "name", "cons", "expectP", "name", "x", "step", "rp", "return", "cons", "x", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readsBinaryWith", "signature": "readsBinaryWith :: (Int -> ReadS a) -> (Int -> ReadS b) ->\n    String -> (a -> b -> t) -> String -> ReadS t", "code": "readsBinaryWith rp1 rp2 name cons kw s =\n    [(cons x y,u) | kw == name, (x,t) <- rp1 11 s, (y,u) <- rp2 11 t]", "poly_type": "Parametric", "dependencies": "", "locations": [[1001, 16], [1001, 20], [1001, 24], [1001, 29], [1001, 34], [1001, 37], [1002, 6], [1002, 11], [1002, 13], [1002, 15], [1002, 20], [1002, 26], [1002, 33], [1002, 35], [1002, 41], [1002, 48], [1002, 52], [1002, 54], [1002, 60], [1002, 67], [1002, 23]], "locations_src": ["rp1", "rp2", "name", "cons", "kw", "s", "cons", "x", "y", "u", "kw", "name", "x", "t", "rp1", "s", "y", "u", "rp2", "t", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readBinaryWith", "signature": "readBinaryWith :: ReadPrec a -> ReadPrec b ->\n    String -> (a -> b -> t) -> ReadPrec t", "code": "readBinaryWith rp1 rp2 name cons = do\n    expectP $ Ident name\n    x <- step rp1\n    y <- step rp2\n    return $ cons x y", "poly_type": "Parametric", "dependencies": "", "locations": [[1011, 15], [1011, 19], [1011, 23], [1011, 28], [1012, 4], [1012, 20], [1013, 4], [1013, 9], [1013, 14], [1014, 4], [1014, 9], [1014, 14], [1015, 4], [1015, 13], [1015, 18], [1015, 20], [1012, 12], [1015, 11]], "locations_src": ["rp1", "rp2", "name", "cons", "expectP", "name", "x", "step", "rp1", "y", "step", "rp2", "return", "cons", "x", "y", "$", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--showsUnaryWith", "signature": "showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowS", "code": "showsUnaryWith sp name d x = showParen (d > 10) $\n    showString name . showChar ' ' . sp 11 x", "poly_type": "Parametric", "dependencies": "", "locations": [[1023, 15], [1023, 18], [1023, 23], [1023, 25], [1023, 29], [1023, 40], [1024, 4], [1024, 15], [1024, 22], [1024, 37], [1024, 43], [1023, 42], [1023, 48], [1024, 20], [1024, 35]], "locations_src": ["sp", "name", "d", "x", "showParen", "d", "showString", "name", "showChar", "sp", "x", ">", "$", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--showsBinaryWith", "signature": "showsBinaryWith :: (Int -> a -> ShowS) -> (Int -> b -> ShowS) ->\n    String -> Int -> a -> b -> ShowS", "code": "showsBinaryWith sp1 sp2 name d x y = showParen (d > 10) $\n    showString name . showChar ' ' . sp1 11 x . showChar ' ' . sp2 11 y", "poly_type": "Parametric", "dependencies": "", "locations": [[1033, 16], [1033, 20], [1033, 24], [1033, 29], [1033, 31], [1033, 33], [1033, 37], [1033, 48], [1034, 4], [1034, 15], [1034, 22], [1034, 37], [1034, 44], [1034, 48], [1034, 63], [1034, 70], [1033, 50], [1033, 56], [1034, 20], [1034, 35], [1034, 46], [1034, 61]], "locations_src": ["sp1", "sp2", "name", "d", "x", "y", "showParen", "d", "showString", "name", "showChar", "sp1", "x", "showChar", "sp2", "y", ">", "$", ".", ".", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readsUnary", "signature": "readsUnary :: (Read a) => String -> (a -> t) -> String -> ReadS t", "code": "readsUnary name cons kw s =\n    [(cons x,t) | kw == name, (x,t) <- readsPrec 11 s]", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[1044, 11], [1044, 16], [1044, 21], [1044, 24], [1045, 6], [1045, 11], [1045, 13], [1045, 18], [1045, 24], [1045, 31], [1045, 33], [1045, 39], [1045, 52], [1045, 21]], "locations_src": ["name", "cons", "kw", "s", "cons", "x", "t", "kw", "name", "x", "t", "readsPrec", "s", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readsUnary1", "signature": "readsUnary1 :: (Read1 f, Read a) => String -> (f a -> t) -> String -> ReadS t", "code": "readsUnary1 name cons kw s =\n    [(cons x,t) | kw == name, (x,t) <- readsPrec1 11 s]", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[1053, 12], [1053, 17], [1053, 22], [1053, 25], [1054, 6], [1054, 11], [1054, 13], [1054, 18], [1054, 24], [1054, 31], [1054, 33], [1054, 39], [1054, 53], [1054, 21]], "locations_src": ["name", "cons", "kw", "s", "cons", "x", "t", "kw", "name", "x", "t", "readsPrec1", "s", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--readsBinary1", "signature": "readsBinary1 :: (Read1 f, Read1 g, Read a) =>\n    String -> (f a -> g a -> t) -> String -> ReadS t", "code": "readsBinary1 name cons kw s =\n    [(cons x y,u) | kw == name,\n        (x,t) <- readsPrec1 11 s, (y,u) <- readsPrec1 11 t]", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[1064, 13], [1064, 18], [1064, 23], [1064, 26], [1065, 6], [1065, 11], [1065, 13], [1065, 15], [1065, 20], [1065, 26], [1066, 9], [1066, 11], [1066, 17], [1066, 31], [1066, 35], [1066, 37], [1066, 43], [1066, 57], [1065, 23]], "locations_src": ["name", "cons", "kw", "s", "cons", "x", "y", "u", "kw", "name", "x", "t", "readsPrec1", "s", "y", "u", "readsPrec1", "t", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--showsUnary", "signature": "showsUnary :: (Show a) => String -> Int -> a -> ShowS", "code": "showsUnary name d x = showParen (d > 10) $\n    showString name . showChar ' ' . showsPrec 11 x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[1074, 11], [1074, 16], [1074, 18], [1074, 22], [1074, 33], [1075, 4], [1075, 15], [1075, 22], [1075, 37], [1075, 50], [1074, 35], [1074, 41], [1075, 20], [1075, 35]], "locations_src": ["name", "d", "x", "showParen", "d", "showString", "name", "showChar", "showsPrec", "x", ">", "$", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--showsUnary1", "signature": "showsUnary1 :: (Show1 f, Show a) => String -> Int -> f a -> ShowS", "code": "showsUnary1 name d x = showParen (d > 10) $\n    showString name . showChar ' ' . showsPrec1 11 x", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[1083, 12], [1083, 17], [1083, 19], [1083, 23], [1083, 34], [1084, 4], [1084, 15], [1084, 22], [1084, 37], [1084, 51], [1083, 36], [1083, 42], [1084, 20], [1084, 35]], "locations_src": ["name", "d", "x", "showParen", "d", "showString", "name", "showChar", "showsPrec1", "x", ">", "$", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Classes.hs--showsBinary1", "signature": "showsBinary1 :: (Show1 f, Show1 g, Show a) =>\n    String -> Int -> f a -> g a -> ShowS", "code": "showsBinary1 name d x y = showParen (d > 10) $\n    showString name . showChar ' ' . showsPrec1 11 x .\n        showChar ' ' . showsPrec1 11 y", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[1095, 13], [1095, 18], [1095, 20], [1095, 22], [1095, 26], [1095, 37], [1096, 4], [1096, 15], [1096, 22], [1096, 37], [1096, 51], [1097, 8], [1097, 23], [1097, 37], [1095, 39], [1095, 45], [1096, 20], [1096, 35], [1096, 53], [1097, 21]], "locations_src": ["name", "d", "x", "y", "showParen", "d", "showString", "name", "showChar", "showsPrec1", "x", "showChar", "showsPrec1", "y", ">", "$", ".", ".", ".", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (f a -> f a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--phantom", "signature": "phantom :: (Functor f, Contravariant f) => f a -> f b", "code": "phantom x = () <$ x $< ()", "poly_type": "Ad-hoc", "dependencies": "", "locations": [[119, 8], [119, 18], [119, 15], [119, 20]], "locations_src": ["x", "x", "<$", "$<"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (V1 a -> V1 a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (U1 a -> U1 a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (K1 i c a -> K1 i c a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> ((f :*: g) a -> (f :*: g) a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> ((f :.: g) a -> (f :.: g) a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> ((f :+: g) a -> (f :+: g) a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (Sum f g a -> Sum f g a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (Product f g a -> Product f g a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (b' -> b) -> (Const a b -> Const a b')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (Compose f g a -> Compose f g a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (Proxy a -> Proxy a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (Comparison a -> Comparison a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (a' -> a) -> (Equivalence a -> Equivalence a')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--comparisonEquivalence", "signature": "comparisonEquivalence :: Comparison a -> Equivalence a", "code": "comparisonEquivalence (Comparison p) = Equivalence $ \\a b -> p a b == EQ", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[310, 34], [310, 54], [310, 56], [310, 61], [310, 63], [310, 65], [310, 51], [310, 67]], "locations_src": ["p", "a", "b", "p", "a", "b", "$", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Contravariant.hs--contramap", "signature": "contramap :: (b' -> b) -> (Op a b -> Op a b')", "code": "contramap _ (Const a) = Const a\ncontramap _ (K1 c) = K1 c\ncontramap _ _ = Proxy\ncontramap _ _ = U1\ncontramap _ x = case x of\ncontramap f (Comp1 fg) = Comp1 (fmap (contramap f) fg)\ncontramap f (Comparison g) = Comparison (on g f)\ncontramap f (Compose fga) = Compose (fmap (contramap f) fga)\ncontramap f (Equivalence g) = Equivalence (on g f)\ncontramap f (InL xs) = InL (contramap f xs)\ncontramap f (InR ys) = InR (contramap f ys)\ncontramap f (L1 xs) = L1 (contramap f xs)\ncontramap f (Pair a b) = Pair (contramap f a) (contramap f b)\ncontramap f (R1 ys) = R1 (contramap f ys)\ncontramap f (xs :*: ys) = contramap f xs :*: contramap f ys\ncontramap f g = Op (getOp g . f)", "poly_type": "Parametric", "dependencies": "a :: k", "locations": [[141, 14], [141, 23], [149, 18], [149, 26], [153, 12], [153, 15], [153, 22], [153, 38], [153, 40], [153, 57], [153, 59], [157, 12], [157, 21], [157, 34], [157, 50], [157, 53], [161, 12], [161, 18], [161, 38], [161, 40], [162, 12], [162, 18], [162, 38], [162, 40], [166, 12], [166, 19], [166, 40], [166, 42], [167, 12], [167, 19], [167, 40], [167, 42], [172, 12], [172, 20], [172, 22], [172, 43], [172, 45], [172, 59], [172, 61], [176, 21], [176, 32], [180, 12], [180, 23], [180, 39], [180, 55], [180, 58], [255, 12], [255, 26], [255, 43], [255, 46], [255, 48], [301, 12], [301, 27], [301, 45], [301, 48], [301, 50], [344, 12], [344, 14], [344, 22], [344, 28], [344, 32], [344, 30]], "locations_src": ["x", "x", "c", "c", "f", "xs", "ys", "f", "xs", "f", "ys", "f", "fg", "fmap", "f", "fg", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "xs", "f", "xs", "f", "ys", "f", "ys", "f", "a", "b", "f", "a", "f", "b", "a", "a", "f", "fga", "fmap", "f", "fga", "f", "g", "on", "g", "f", "f", "g", "on", "g", "f", "f", "g", "getOp", "g", "f", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Compose.hs--liftReadPrecCompose", "signature": "liftReadPrecCompose :: ReadPrec (f (g a)) -> ReadPrec (Compose f g a)", "code": "liftReadPrecCompose rp = readData $ readUnaryWith rp \"Compose\" Compose", "poly_type": "Parametric", "dependencies": "readData :: ReadPrec a -> ReadPrec a\nreadUnaryWith :: ReadPrec a -> String -> (a -> t) -> ReadPrec t", "locations": [[112, 20], [112, 25], [112, 36], [112, 50], [112, 34]], "locations_src": ["rp", "readData", "readUnaryWith", "rp", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Functor/Compose.hs--liftShowsPrecCompose", "signature": "liftShowsPrecCompose :: (Int -> f (g a) -> ShowS) -> Int -> Compose f g a -> ShowS", "code": "liftShowsPrecCompose sp d (Compose x) = showsUnaryWith sp \"Compose\" d x", "poly_type": "Parametric", "dependencies": "showsUnaryWith :: (Int -> a -> ShowS) -> String -> Int -> a -> ShowS", "locations": [[116, 21], [116, 24], [116, 35], [116, 40], [116, 55], [116, 68], [116, 70]], "locations_src": ["sp", "d", "x", "showsUnaryWith", "sp", "d", "x"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--newByteArray", "signature": "newByteArray :: Int -> ST s (MutableByteArray s)", "code": "newByteArray (I# n#) =\n  ST (\\s# -> case newByteArray# n# s# of\n    (# s'#, arr# #) -> (# s'#, MutableByteArray arr# #))", "poly_type": "Parametric", "dependencies": "", "locations": [[63, 17], [64, 7], [64, 18], [64, 32], [64, 35], [65, 7], [65, 12], [65, 26], [65, 48]], "locations_src": ["n#", "s#", "newByteArray#", "n#", "s#", "s'#", "arr#", "s'#", "arr#"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--unsafeFreezeByteArray", "signature": "unsafeFreezeByteArray :: MutableByteArray s -> ST s ByteArray", "code": "unsafeFreezeByteArray (MutableByteArray arr#) =\n  ST (\\s# -> case unsafeFreezeByteArray# arr# s# of\n    (# s'#, arr'# #) -> (# s'#, ByteArray arr'# #))", "poly_type": "Parametric", "dependencies": "", "locations": [[71, 40], [72, 7], [72, 18], [72, 41], [72, 46], [73, 7], [73, 12], [73, 27], [73, 42]], "locations_src": ["arr#", "s#", "unsafeFreezeByteArray#", "arr#", "s#", "s'#", "arr'#", "s'#", "arr'#"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--sizeofByteArray", "signature": "sizeofByteArray :: ByteArray -> Int", "code": "sizeofByteArray (ByteArray arr#) = I# (sizeofByteArray# arr#)", "poly_type": "Monomorphic", "dependencies": "", "locations": [[78, 27], [78, 39], [78, 56]], "locations_src": ["arr#", "sizeofByteArray#", "arr#"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--indexByteArray", "signature": "indexByteArray :: ByteArray -> Int -> Word8", "code": "indexByteArray (ByteArray arr#) (I# i#) = W8# (indexWord8Array# arr# i#)", "poly_type": "Monomorphic", "dependencies": "", "locations": [[83, 26], [83, 36], [83, 47], [83, 64], [83, 69]], "locations_src": ["arr#", "i#", "indexWord8Array#", "arr#", "i#"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--writeByteArray", "signature": "writeByteArray :: MutableByteArray s -> Int -> Word8 -> ST s ()", "code": "writeByteArray (MutableByteArray arr#) (I# i#) (W8# x#) =\n  ST (\\s# -> case writeWord8Array# arr# i# x# s# of\n    s'# -> (# s'#, () #))", "poly_type": "Parametric", "dependencies": "", "locations": [[88, 33], [88, 43], [88, 52], [89, 7], [89, 18], [89, 35], [89, 40], [89, 43], [89, 46], [90, 4], [90, 14]], "locations_src": ["arr#", "i#", "x#", "s#", "writeWord8Array#", "arr#", "i#", "x#", "s#", "s'#", "s'#"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--byteArrayToList", "signature": "byteArrayToList :: ByteArray -> [Word8]", "code": "byteArrayToList arr = go 0\n  where\n    go i\n      | i < maxI  = indexByteArray arr i : go (i+1)\n      | otherwise = []\n    maxI = sizeofByteArray arr", "poly_type": "Monomorphic", "dependencies": "sizeofByteArray :: ByteArray -> Int\nindexByteArray :: ByteArray -> Int -> Word8", "locations": [[95, 16], [95, 22], [97, 4], [97, 7], [98, 8], [98, 12], [98, 20], [98, 35], [98, 39], [98, 43], [98, 47], [99, 8], [100, 4], [100, 11], [100, 27], [98, 10], [98, 48]], "locations_src": ["arr", "go", "go", "i", "i", "maxI", "indexByteArray", "arr", "i", "go", "i", "otherwise", "maxI", "sizeofByteArray", "arr", "<", "+"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--byteArrayFromListN", "signature": "byteArrayFromListN :: Int -> [Word8] -> ByteArray", "code": "byteArrayFromListN n ys\n  | n >= 0 = runST $ do\n    marr <- newByteArray n\n    let go !ix [] = if ix == n\n          then return ()\n          else errorWithoutStackTrace $ \"Data.Array.Byte.byteArrayFromListN: list length less than specified size\"\n        go !ix (x : xs) = if ix < n\n          then do\n            writeByteArray marr ix x\n            go (ix + 1) xs\n          else errorWithoutStackTrace $ \"Data.Array.Byte.byteArrayFromListN: list length greater than specified size\"\n    go 0 ys\n    unsafeFreezeByteArray marr\n  | otherwise = errorWithoutStackTrace \"Data.Array.Byte.ByteArrayFromListN: specified size is negative\"", "poly_type": "Monomorphic", "dependencies": "newByteArray :: Int -> ST s (MutableByteArray s)\nwriteByteArray :: MutableByteArray s -> Int -> Word8 -> ST s ()\nunsafeFreezeByteArray :: MutableByteArray s -> ST s ByteArray", "locations": [[105, 19], [105, 21], [106, 4], [106, 13], [107, 4], [107, 12], [107, 25], [108, 8], [108, 12], [108, 23], [108, 29], [109, 15], [110, 15], [111, 8], [111, 12], [111, 16], [111, 20], [111, 29], [111, 34], [113, 12], [113, 27], [113, 32], [113, 35], [114, 12], [114, 16], [114, 24], [115, 15], [116, 4], [116, 9], [117, 4], [117, 26], [118, 4], [118, 16], [106, 6], [106, 19], [108, 26], [110, 38], [111, 32], [114, 19], [115, 38]], "locations_src": ["n", "ys", "n", "runST", "marr", "newByteArray", "n", "go", "ix", "ix", "n", "return", "errorWithoutStackTrace", "go", "ix", "x", "xs", "ix", "n", "writeByteArray", "marr", "ix", "x", "go", "ix", "xs", "errorWithoutStackTrace", "go", "ys", "unsafeFreezeByteArray", "marr", "otherwise", "errorWithoutStackTrace", ">=", "$", "==", "$", "<", "+", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--showW8", "signature": "showW8 :: Word8 -> String -> String", "code": "showW8 !w s =\n          '0'\n        : 'x'\n        : intToDigit (fromIntegral (unsafeShiftR w 4))\n        : intToDigit (fromIntegral (w .&. 0x0F))\n        : s", "poly_type": "Monomorphic", "dependencies": "", "locations": [[169, 14], [169, 16], [172, 10], [172, 22], [172, 36], [172, 49], [173, 10], [173, 22], [173, 36], [174, 10], [173, 38]], "locations_src": ["w", "s", "intToDigit", "fromIntegral", "unsafeShiftR", "w", "intToDigit", "fromIntegral", "w", "s", ".&."]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--compareByteArraysFromBeginning", "signature": "compareByteArraysFromBeginning :: ByteArray -> ByteArray -> Int -> Ordering", "code": "compareByteArraysFromBeginning (ByteArray ba1#) (ByteArray ba2#) (I# n#)\n  = compare (I# (compareByteArrays# ba1# 0# ba2# 0# n#)) 0", "poly_type": "Monomorphic", "dependencies": "", "locations": [[185, 42], [185, 59], [185, 69], [186, 4], [186, 17], [186, 36], [186, 44], [186, 52]], "locations_src": ["ba1#", "ba2#", "n#", "compare", "compareByteArrays#", "ba1#", "ba2#", "n#"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--sameByteArray", "signature": "sameByteArray :: ByteArray# -> ByteArray# -> Bool", "code": "sameByteArray ba1 ba2 =\n    case sameByteArray# ba1 ba2 of r -> isTrue# r", "poly_type": "Monomorphic", "dependencies": "", "locations": [[190, 14], [190, 18], [191, 9], [191, 24], [191, 28], [191, 35], [191, 40], [191, 48]], "locations_src": ["ba1", "ba2", "sameByteArray#", "ba1", "ba2", "r", "isTrue#", "r"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--appendByteArray", "signature": "appendByteArray :: ByteArray -> ByteArray -> ByteArray", "code": "appendByteArray ba1 ba2 = runST $ do\n  let n1 = sizeofByteArray ba1\n      n2 = sizeofByteArray ba2\n      totSz = fromMaybe (sizeOverflowError \"appendByteArray\")\n                        (checkedIntAdd n1 n2)\n  marr <- newByteArray totSz\n  unsafeCopyByteArray marr 0  ba1 0 n1\n  unsafeCopyByteArray marr n1 ba2 0 n2\n  unsafeFreezeByteArray marr", "poly_type": "Monomorphic", "dependencies": "sizeofByteArray :: ByteArray -> Int\nsizeOverflowError :: String -> a\nnewByteArray :: Int -> ST s (MutableByteArray s)\nunsafeFreezeByteArray :: MutableByteArray s -> ST s ByteArray\ncheckedIntAdd :: Int -> Int -> Maybe Int", "locations": [[230, 16], [230, 20], [230, 26], [231, 6], [231, 11], [231, 27], [232, 6], [232, 11], [232, 27], [233, 6], [233, 14], [233, 25], [234, 25], [234, 39], [234, 42], [235, 2], [235, 10], [235, 23], [236, 2], [236, 22], [236, 30], [236, 36], [237, 2], [237, 22], [237, 27], [237, 30], [237, 36], [238, 2], [238, 24], [230, 32]], "locations_src": ["ba1", "ba2", "runST", "n1", "sizeofByteArray", "ba1", "n2", "sizeofByteArray", "ba2", "totSz", "fromMaybe", "sizeOverflowError", "checkedIntAdd", "n1", "n2", "marr", "newByteArray", "totSz", "unsafeCopyByteArray", "marr", "ba1", "n1", "unsafeCopyByteArray", "marr", "n1", "ba2", "n2", "unsafeFreezeByteArray", "marr", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--concatByteArray", "signature": "concatByteArray :: [ByteArray] -> ByteArray", "code": "concatByteArray arrs = runST $ do\n  let addLen acc arr = fromMaybe (sizeOverflowError \"concatByteArray\")\n                                 (checkedIntAdd acc (sizeofByteArray arr))\n      totLen = F.foldl' addLen 0 arrs\n  marr <- newByteArray totLen\n  pasteByteArrays marr 0 arrs\n  unsafeFreezeByteArray marr", "poly_type": "Monomorphic", "dependencies": "sizeOverflowError :: String -> a\nsizeofByteArray :: ByteArray -> Int\nnewByteArray :: Int -> ST s (MutableByteArray s)\nunsafeFreezeByteArray :: MutableByteArray s -> ST s ByteArray\npasteByteArrays :: MutableByteArray s -> Int -> [ByteArray] -> ST s ()\ncheckedIntAdd :: Int -> Int -> Maybe Int", "locations": [[242, 16], [242, 23], [243, 6], [243, 13], [243, 17], [243, 23], [243, 34], [244, 34], [244, 48], [244, 53], [244, 69], [245, 6], [245, 17], [245, 24], [245, 33], [246, 2], [246, 10], [246, 23], [247, 2], [247, 18], [247, 25], [248, 2], [248, 24], [242, 29]], "locations_src": ["arrs", "runST", "addLen", "acc", "arr", "fromMaybe", "sizeOverflowError", "checkedIntAdd", "acc", "sizeofByteArray", "arr", "totLen", "foldl'", "addLen", "arrs", "marr", "newByteArray", "totLen", "pasteByteArrays", "marr", "arrs", "unsafeFreezeByteArray", "marr", "$"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--pasteByteArrays", "signature": "pasteByteArrays :: MutableByteArray s -> Int -> [ByteArray] -> ST s ()", "code": "pasteByteArrays !_ !_ [] = return ()\npasteByteArrays !marr !ix (x : xs) = do\n  unsafeCopyByteArray marr ix x 0 (sizeofByteArray x)\n  pasteByteArrays marr (ix + sizeofByteArray x) xs", "poly_type": "Parametric", "dependencies": "sizeofByteArray :: ByteArray -> Int", "locations": [[252, 27], [253, 17], [253, 23], [253, 27], [253, 31], [254, 2], [254, 22], [254, 27], [254, 30], [254, 35], [254, 51], [255, 18], [255, 24], [255, 29], [255, 45], [255, 48], [255, 27]], "locations_src": ["return", "marr", "ix", "x", "xs", "unsafeCopyByteArray", "marr", "ix", "x", "sizeofByteArray", "x", "marr", "ix", "sizeofByteArray", "x", "xs", "+"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--stimesPolymorphic", "signature": "stimesPolymorphic :: Integral t => t -> ByteArray -> ByteArray", "code": "stimesPolymorphic nRaw !arr = case toInteger nRaw of\n  IS nInt#\n    | isTrue# (nInt# >#  0#) -> stimesPositiveInt (I# nInt#) arr\n    | isTrue# (nInt# >=# 0#) -> emptyByteArray\n      -- This check is redundant for unsigned types like Word.\n      -- Using >=# intead of ==# may make it easier for GHC to notice that.\n    | otherwise -> stimesNegativeErr\n  IP _\n    | sizeofByteArray arr == 0 -> emptyByteArray\n    | otherwise -> stimesOverflowErr\n  IN _ -> stimesNegativeErr", "poly_type": "Ad-hoc", "dependencies": "sizeofByteArray :: ByteArray -> Int\nstimesPositiveInt :: Int -> ByteArray -> ByteArray", "locations": [[264, 18], [264, 24], [264, 35], [264, 45], [265, 5], [266, 6], [266, 15], [266, 32], [266, 54], [266, 61], [267, 6], [267, 15], [267, 32], [270, 6], [270, 19], [272, 6], [272, 22], [272, 34], [273, 6], [273, 19], [274, 10], [266, 21], [267, 21], [272, 26]], "locations_src": ["nRaw", "arr", "toInteger", "nRaw", "nInt#", "isTrue#", "nInt#", "stimesPositiveInt", "nInt#", "arr", "isTrue#", "nInt#", "emptyByteArray", "otherwise", "stimesNegativeErr", "sizeofByteArray", "arr", "emptyByteArray", "otherwise", "stimesOverflowErr", "stimesNegativeErr", ">#", ">=#", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--stimesPositiveInt", "signature": "stimesPositiveInt :: Int -> ByteArray -> ByteArray", "code": "stimesPositiveInt n arr = runST $ do\n  let inpSz = sizeofByteArray arr\n      tarSz = fromMaybe stimesOverflowErr (checkedIntMultiply n inpSz)\n  marr <- newByteArray tarSz\n  unsafeCopyByteArray marr 0 arr 0 inpSz\n  let\n    halfTarSz = (tarSz - 1) `div` 2\n    go copied\n      | copied <= halfTarSz = do\n          unsafeCopyMutableByteArray marr copied marr 0 copied\n          go (copied + copied)\n      | otherwise = unsafeCopyMutableByteArray marr copied marr 0 (tarSz - copied)\n  go inpSz\n  unsafeFreezeByteArray marr", "poly_type": "Monomorphic", "dependencies": "newByteArray :: Int -> ST s (MutableByteArray s)\nsizeofByteArray :: ByteArray -> Int\ncheckedIntMultiply :: Int -> Int -> Maybe Int\nunsafeFreezeByteArray :: MutableByteArray s -> ST s ByteArray", "locations": [[286, 18], [286, 20], [286, 26], [287, 6], [287, 14], [287, 30], [288, 6], [288, 14], [288, 24], [288, 43], [288, 62], [288, 64], [289, 2], [289, 10], [289, 23], [290, 2], [290, 22], [290, 29], [290, 35], [292, 4], [292, 17], [292, 29], [293, 4], [293, 7], [294, 8], [294, 18], [295, 10], [295, 37], [295, 42], [295, 49], [295, 56], [296, 10], [296, 14], [296, 23], [297, 8], [297, 20], [297, 47], [297, 52], [297, 59], [297, 67], [297, 75], [298, 2], [298, 5], [299, 2], [299, 24], [286, 32], [292, 23], [294, 15], [296, 21], [297, 73]], "locations_src": ["n", "arr", "runST", "inpSz", "sizeofByteArray", "arr", "tarSz", "fromMaybe", "stimesOverflowErr", "checkedIntMultiply", "n", "inpSz", "marr", "newByteArray", "tarSz", "unsafeCopyByteArray", "marr", "arr", "inpSz", "halfTarSz", "tarSz", "div", "go", "copied", "copied", "halfTarSz", "unsafeCopyMutableByteArray", "marr", "copied", "marr", "copied", "go", "copied", "copied", "otherwise", "unsafeCopyMutableByteArray", "marr", "copied", "marr", "tarSz", "copied", "go", "inpSz", "unsafeFreezeByteArray", "marr", "$", "-", "<=", "+", "-"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--sizeOverflowError", "signature": "sizeOverflowError :: String -> a", "code": "sizeOverflowError fun\n  = errorWithoutStackTrace $ \"Data.Array.Byte.\" ++ fun ++ \": size overflow\"", "poly_type": "Parametric", "dependencies": "", "locations": [[323, 18], [324, 4], [324, 51], [324, 27], [324, 48], [324, 55]], "locations_src": ["fun", "errorWithoutStackTrace", "fun", "$", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--checkedIntAdd", "signature": "checkedIntAdd :: Int -> Int -> Maybe Int", "code": "checkedIntAdd (I# x#) (I# y#) = case addIntC# x# y# of\n  (# res, 0# #) -> Just (I# res)\n  _ -> Nothing", "poly_type": "Monomorphic", "dependencies": "", "locations": [[331, 18], [331, 26], [331, 37], [331, 46], [331, 49], [332, 5], [332, 28]], "locations_src": ["x#", "y#", "addIntC#", "x#", "y#", "res", "res"]}
{"task_id": "data/repos/base-4.20.0.0/src/Data/Array/Byte.hs--checkedIntMultiply", "signature": "checkedIntMultiply :: Int -> Int -> Maybe Int", "code": "checkedIntMultiply (I# x#) (I# y#) = case timesInt2# x# y# of\n  (# 0#, _hi, lo #) -> Just (I# lo)\n  _ -> Nothing", "poly_type": "Monomorphic", "dependencies": "", "locations": [[337, 23], [337, 31], [337, 42], [337, 53], [337, 56], [338, 9], [338, 14], [338, 32]], "locations_src": ["x#", "y#", "timesInt2#", "x#", "y#", "_hi", "lo", "lo"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Info.hs--splitVersion", "signature": "splitVersion :: String -> [String]", "code": "splitVersion s =\n  case dropWhile (== '.') s of\n    \"\" -> []\n    s' -> let (w, s'') = break (== '.') s'\n           in w : splitVersion s''", "poly_type": "Monomorphic", "dependencies": "dropWhile :: (a -> Bool) -> NonEmpty a -> [a]\nbreak :: (a -> Bool) -> NonEmpty a -> ([a], [a])", "locations": [[51, 13], [52, 7], [52, 26], [54, 4], [54, 15], [54, 18], [54, 25], [54, 40], [55, 14], [55, 31], [52, 18], [54, 32]], "locations_src": ["s", "dropWhile", "s", "s'", "w", "s''", "break", "s'", "w", "s''", "==", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Timeout.hs--timeout", "signature": "timeout :: Int -> IO a -> IO (Maybe a)", "code": "timeout n f\n    | n <  0    = fmap Just f\n    | n == 0    = return Nothing\n#if !defined(mingw32_HOST_OS) && !defined(javascript_HOST_ARCH)\n    | rtsSupportsBoundThreads = do\n        -- In the threaded RTS, we use the Timer Manager to delay the\n        -- (fairly expensive) 'forkIO' call until the timeout has expired.\n        --\n        -- An additional thread is required for the actual delivery of\n        -- the Timeout exception because killThread (or another throwTo)\n        -- is the only way to reliably interrupt a throwTo in flight.\n        pid <- myThreadId\n        ex  <- fmap Timeout newUnique\n        tm  <- getSystemTimerManager\n        -- 'lock' synchronizes the timeout handler and the main thread:\n        --  * the main thread can disable the handler by writing to 'lock';\n        --  * the handler communicates the spawned thread's id through 'lock'.\n        -- These two cases are mutually exclusive.\n        lock <- newEmptyMVar\n        let handleTimeout = do\n                v <- isEmptyMVar lock\n                when v $ void $ forkIOWithUnmask $ \\unmask -> unmask $ do\n                    v2 <- tryPutMVar lock =<< myThreadId\n                    when v2 $ throwTo pid ex\n            cleanupTimeout key = uninterruptibleMask_ $ do\n                v <- tryPutMVar lock undefined\n                if v then unregisterTimeout tm key\n                     else takeMVar lock >>= killThread\n        handleJust (\\e -> if e == ex then Just () else Nothing)\n                   (\\_ -> return Nothing)\n                   (bracket (registerTimeout tm n handleTimeout)\n                            cleanupTimeout\n                            (\\_ -> fmap Just f))\n#endif\n    | otherwise = do\n        pid <- myThreadId\n        ex  <- fmap Timeout newUnique\n        handleJust (\\e -> if e == ex then Just () else Nothing)\n                   (\\_ -> return Nothing)\n                   (bracket (forkIOWithUnmask $ \\unmask ->\n                                 unmask $ threadDelay n >> throwTo pid ex)\n                            (uninterruptibleMask_ . killThread)\n                            (\\_ -> fmap Just f))", "poly_type": "Parametric", "dependencies": "", "locations": [[99, 8], [99, 10], [100, 6], [100, 18], [100, 28], [101, 6], [101, 18], [103, 6], [110, 8], [110, 15], [111, 8], [111, 15], [111, 28], [112, 8], [112, 15], [117, 8], [117, 16], [118, 12], [119, 16], [119, 21], [119, 33], [120, 16], [120, 21], [120, 25], [120, 32], [120, 52], [120, 62], [121, 20], [121, 26], [121, 37], [121, 46], [122, 20], [122, 25], [122, 30], [122, 38], [122, 42], [123, 12], [123, 27], [123, 33], [124, 16], [124, 21], [124, 32], [124, 37], [125, 19], [125, 26], [125, 44], [125, 47], [126, 26], [126, 35], [126, 44], [127, 8], [127, 21], [127, 29], [127, 34], [128, 26], [129, 20], [129, 29], [129, 45], [129, 48], [129, 50], [130, 28], [131, 35], [131, 45], [133, 6], [134, 8], [134, 15], [135, 8], [135, 15], [135, 28], [136, 8], [136, 21], [136, 29], [136, 34], [137, 26], [138, 20], [138, 29], [138, 49], [139, 33], [139, 42], [139, 54], [139, 59], [139, 67], [139, 71], [140, 29], [140, 52], [141, 35], [141, 45], [100, 8], [101, 8], [120, 23], [120, 30], [120, 49], [120, 69], [121, 42], [122, 28], [123, 54], [126, 40], [127, 31], [136, 31], [138, 46], [139, 40], [139, 56], [140, 50]], "locations_src": ["n", "f", "n", "fmap", "f", "n", "return", "rtsSupportsBoundThreads", "pid", "myThreadId", "ex", "fmap", "newUnique", "tm", "getSystemTimerManager", "lock", "newEmptyMVar", "handleTimeout", "v", "isEmptyMVar", "lock", "when", "v", "void", "forkIOWithUnmask", "unmask", "unmask", "v2", "tryPutMVar", "lock", "myThreadId", "when", "v2", "throwTo", "pid", "ex", "cleanupTimeout", "key", "uninterruptibleMask_", "v", "tryPutMVar", "lock", "undefined", "v", "unregisterTimeout", "tm", "key", "takeMVar", "lock", "killThread", "handleJust", "e", "e", "ex", "return", "bracket", "registerTimeout", "tm", "n", "handleTimeout", "cleanupTimeout", "fmap", "f", "otherwise", "pid", "myThreadId", "ex", "fmap", "newUnique", "handleJust", "e", "e", "ex", "return", "bracket", "forkIOWithUnmask", "unmask", "unmask", "threadDelay", "n", "throwTo", "pid", "ex", "uninterruptibleMask_", "killThread", "fmap", "f", "<", "==", "$", "$", "$", "$", "=<<", "$", "$", ">>=", "==", "==", "$", "$", ">>", "."]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Mem/Weak.hs--mkWeakPtr", "signature": "mkWeakPtr :: k -> Maybe (IO ()) -> IO (Weak k)", "code": "mkWeakPtr key finalizer = mkWeak key key finalizer", "poly_type": "Parametric", "dependencies": "", "locations": [[100, 10], [100, 14], [100, 26], [100, 33], [100, 37], [100, 41]], "locations_src": ["key", "finalizer", "mkWeak", "key", "key", "finalizer"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Mem/Weak.hs--addFinalizer", "signature": "addFinalizer :: key -> IO () -> IO ()", "code": "addFinalizer key finalizer = do\n   _ <- mkWeakPtr key (Just finalizer) -- throw it away\n   return ()", "poly_type": "Parametric", "dependencies": "mkWeakPtr :: k -> Maybe (IO ()) -> IO (Weak k)", "locations": [[115, 13], [115, 17], [116, 8], [116, 18], [116, 28], [117, 3]], "locations_src": ["key", "finalizer", "mkWeakPtr", "key", "finalizer", "return"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Mem/Weak.hs--mkWeakPair", "signature": "mkWeakPair :: k -> v -> Maybe (IO ()) -> IO (Weak (k,v))", "code": "mkWeakPair key val finalizer = mkWeak key (key,val) finalizer", "poly_type": "Parametric", "dependencies": "", "locations": [[127, 11], [127, 15], [127, 19], [127, 31], [127, 38], [127, 43], [127, 47], [127, 52]], "locations_src": ["key", "val", "finalizer", "mkWeak", "key", "key", "val", "finalizer"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--usageInfo", "signature": "usageInfo :: String                    -- header\n          -> [OptDescr a]              -- option descriptors\n          -> String", "code": "usageInfo header optDescr = unlines (header:table)\n   where (ss,ls,ds)     = (unzip3 . concatMap fmtOpt) optDescr\n         table          = zipWith3 paste (sameLen ss) (sameLen ls) ds\n         paste x y z    = \"  \" ++ x ++ \"  \" ++ y ++ \"  \" ++ z\n         sameLen xs     = flushLeft ((maximum . map length) xs) xs\n         flushLeft n xs = [ take n (x ++ repeat ' ') | x <- xs ]", "poly_type": "Parametric", "dependencies": "map :: (a -> b) -> NonEmpty a -> NonEmpty b\nfmtOpt :: OptDescr a -> [(String,String,String)]\ntake :: Int -> NonEmpty a -> [a]\nrepeat :: a -> NonEmpty a\nlength :: NonEmpty a -> Int\nmaximum :: Ord a => t a -> a", "locations": [[128, 10], [128, 17], [128, 28], [128, 37], [128, 44], [129, 10], [129, 13], [129, 16], [129, 27], [129, 36], [129, 46], [129, 54], [130, 9], [130, 26], [130, 35], [130, 42], [130, 50], [130, 55], [130, 63], [130, 67], [131, 9], [131, 15], [131, 17], [131, 19], [131, 34], [131, 47], [131, 60], [132, 9], [132, 17], [132, 26], [132, 38], [132, 48], [132, 52], [132, 60], [132, 64], [133, 9], [133, 19], [133, 21], [133, 28], [133, 33], [133, 36], [133, 41], [133, 55], [133, 60], [129, 34], [131, 31], [131, 36], [131, 44], [131, 49], [131, 57], [132, 46], [133, 38]], "locations_src": ["header", "optDescr", "unlines", "header", "table", "ss", "ls", "ds", "unzip3", "concatMap", "fmtOpt", "optDescr", "table", "zipWith3", "paste", "sameLen", "ss", "sameLen", "ls", "ds", "paste", "x", "y", "z", "x", "y", "z", "sameLen", "xs", "flushLeft", "maximum", "map", "length", "xs", "xs", "flushLeft", "n", "xs", "take", "n", "x", "repeat", "x", "xs", ".", "++", "++", "++", "++", "++", ".", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--fmtOpt", "signature": "fmtOpt :: OptDescr a -> [(String,String,String)]", "code": "fmtOpt (Option sos los ad descr) =\n   case lines descr of\n     []     -> [(sosFmt,losFmt,\"\")]\n     (d:ds) ->  (sosFmt,losFmt,d) : [ (\"\",\"\",d') | d' <- ds ]\n   where sepBy _  []     = \"\"\n         sepBy _  [x]    = x\n         sepBy ch (x:xs) = x ++ ch:' ':sepBy ch xs\n         sosFmt = sepBy ',' (map (fmtShort ad) sos)\n         losFmt = sepBy ',' (map (fmtLong  ad) los)", "poly_type": "Parametric", "dependencies": "fmtLong :: ArgDescr a -> String -> String\nfmtShort :: ArgDescr a -> Char -> String\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b", "locations": [[136, 15], [136, 19], [136, 23], [136, 26], [137, 8], [137, 14], [138, 17], [138, 24], [139, 6], [139, 8], [139, 17], [139, 24], [139, 31], [139, 45], [139, 51], [139, 57], [140, 9], [141, 9], [141, 19], [141, 27], [142, 9], [142, 15], [142, 19], [142, 21], [142, 27], [142, 32], [142, 39], [142, 45], [142, 48], [143, 9], [143, 18], [143, 29], [143, 34], [143, 43], [143, 47], [144, 9], [144, 18], [144, 29], [144, 34], [144, 43], [144, 47], [142, 29]], "locations_src": ["sos", "los", "ad", "descr", "lines", "descr", "sosFmt", "losFmt", "d", "ds", "sosFmt", "losFmt", "d", "d'", "d'", "ds", "sepBy", "sepBy", "x", "x", "sepBy", "ch", "x", "xs", "x", "ch", "sepBy", "ch", "xs", "sosFmt", "sepBy", "map", "fmtShort", "ad", "sos", "losFmt", "sepBy", "map", "fmtLong", "ad", "los", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--fmtShort", "signature": "fmtShort :: ArgDescr a -> Char -> String", "code": "fmtShort (NoArg  _   ) so = \"-\" ++ [so]\nfmtShort (OptArg _ ad) so = \"-\" ++ [so] ++ \"[\" ++ ad ++ \"]\"\nfmtShort (ReqArg _ ad) so = \"-\" ++ [so] ++ \" \" ++ ad", "poly_type": "Parametric", "dependencies": "", "locations": [[147, 23], [147, 36], [147, 32], [148, 19], [148, 23], [148, 36], [148, 50], [148, 32], [148, 40], [148, 47], [149, 19], [149, 23], [149, 36], [149, 50], [149, 32], [149, 40], [149, 47], [149, 53]], "locations_src": ["so", "so", "++", "ad", "so", "so", "ad", "++", "++", "++", "ad", "so", "so", "ad", "++", "++", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--fmtLong", "signature": "fmtLong :: ArgDescr a -> String -> String", "code": "fmtLong (NoArg  _   ) lo = \"--\" ++ lo\nfmtLong (OptArg _ ad) lo = \"--\" ++ lo ++ \"[=\" ++ ad ++ \"]\"\nfmtLong (ReqArg _ ad) lo = \"--\" ++ lo ++ \"=\" ++ ad", "poly_type": "Parametric", "dependencies": "", "locations": [[152, 22], [152, 35], [152, 32], [153, 18], [153, 22], [153, 35], [153, 48], [153, 32], [153, 38], [153, 45], [154, 18], [154, 22], [154, 35], [154, 49], [154, 32], [154, 38], [154, 46], [154, 52]], "locations_src": ["lo", "lo", "++", "ad", "lo", "lo", "ad", "++", "++", "++", "ad", "lo", "lo", "ad", "++", "++", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--getOpt", "signature": "getOpt :: ArgOrder a                   -- non-option handling\n       -> [OptDescr a]                 -- option descriptors\n       -> [String]                     -- the command-line arguments\n       -> ([a],[String],[String])", "code": "getOpt ordering optDescr args = (os,xs,es ++ map errUnrec us)\n   where (os,xs,us,es) = getOpt' ordering optDescr args", "poly_type": "Parametric", "dependencies": "getOpt' :: ArgOrder a                         -- non-option handling\n        -> [OptDescr a]                       -- option descriptors\n        -> [String]                           -- the command-line arguments\n        -> ([a],[String], [String] ,[String])\nerrUnrec :: String -> String\nmap :: (a -> b) -> NonEmpty a -> NonEmpty b", "locations": [[174, 7], [174, 16], [174, 25], [174, 33], [174, 36], [174, 39], [174, 45], [174, 49], [174, 58], [175, 10], [175, 13], [175, 16], [175, 19], [175, 25], [175, 33], [175, 42], [175, 51], [174, 42]], "locations_src": ["ordering", "optDescr", "args", "os", "xs", "es", "map", "errUnrec", "us", "os", "xs", "us", "es", "getOpt'", "ordering", "optDescr", "args", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--getOpt'", "signature": "getOpt' :: ArgOrder a                         -- non-option handling\n        -> [OptDescr a]                       -- option descriptors\n        -> [String]                           -- the command-line arguments\n        -> ([a],[String], [String] ,[String])", "code": "getOpt' _        _        []         =  ([],[],[],[])\ngetOpt' ordering optDescr (arg:args) = procNextOpt opt ordering\n   where procNextOpt (Opt o)      _                 = (o:os,xs,us,es)\n         procNextOpt (UnreqOpt u) _                 = (os,xs,u:us,es)\n         procNextOpt (NonOpt x)   RequireOrder      = ([],x:rest,[],[])\n         procNextOpt (NonOpt x)   Permute           = (os,x:xs,us,es)\n         procNextOpt (NonOpt x)   (ReturnInOrder f) = (f x :os, xs,us,es)\n         procNextOpt EndOfOpts    RequireOrder      = ([],rest,[],[])\n         procNextOpt EndOfOpts    Permute           = ([],rest,[],[])\n         procNextOpt EndOfOpts    (ReturnInOrder f) = (map f rest,[],[],[])\n         procNextOpt (OptErr e)   _                 = (os,xs,us,e:es)\n\n         (opt,rest) = getNext arg args optDescr\n         (os,xs,us,es) = getOpt' ordering optDescr rest", "poly_type": "Parametric", "dependencies": "map :: (a -> b) -> NonEmpty a -> NonEmpty b\ngetNext :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])", "locations": [[187, 8], [187, 17], [187, 27], [187, 31], [187, 39], [187, 51], [187, 55], [188, 9], [188, 26], [188, 55], [188, 57], [188, 60], [188, 63], [188, 66], [189, 9], [189, 31], [189, 55], [189, 58], [189, 61], [189, 63], [189, 66], [190, 9], [190, 29], [190, 58], [190, 60], [191, 9], [191, 29], [191, 55], [191, 58], [191, 60], [191, 63], [191, 66], [192, 9], [192, 29], [192, 49], [192, 55], [192, 57], [192, 60], [192, 64], [192, 67], [192, 70], [193, 9], [193, 58], [194, 9], [194, 58], [195, 9], [195, 49], [195, 55], [195, 59], [195, 61], [196, 9], [196, 29], [196, 55], [196, 58], [196, 61], [196, 64], [196, 66], [198, 10], [198, 14], [198, 22], [198, 30], [198, 34], [198, 39], [199, 10], [199, 13], [199, 16], [199, 19], [199, 33], [199, 42], [199, 51]], "locations_src": ["ordering", "optDescr", "arg", "args", "procNextOpt", "opt", "ordering", "procNextOpt", "o", "o", "os", "xs", "us", "es", "procNextOpt", "u", "os", "xs", "u", "us", "es", "procNextOpt", "x", "x", "rest", "procNextOpt", "x", "os", "x", "xs", "us", "es", "procNextOpt", "x", "f", "f", "x", "os", "xs", "us", "es", "procNextOpt", "rest", "procNextOpt", "rest", "procNextOpt", "f", "map", "f", "rest", "procNextOpt", "e", "os", "xs", "us", "e", "es", "opt", "rest", "getNext", "arg", "args", "optDescr", "os", "xs", "us", "es", "ordering", "optDescr", "rest"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--getNext", "signature": "getNext :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])", "code": "getNext ('-': x :xs) rest optDescr = shortOpt x xs rest optDescr\ngetNext ('-':'-':[]) rest _        = (EndOfOpts,rest)\ngetNext ('-':'-':xs) rest optDescr = longOpt xs rest optDescr\ngetNext a            rest _        = (NonOpt a,rest)", "poly_type": "Parametric", "dependencies": "shortOpt :: Char -> String -> [String] -> [OptDescr a] -> (OptKind a,[String])\na :: k\nlongOpt :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])", "locations": [[203, 21], [203, 48], [204, 17], [204, 21], [204, 26], [204, 37], [204, 45], [204, 48], [204, 53], [205, 14], [205, 17], [205, 21], [205, 26], [205, 37], [205, 46], [205, 48], [205, 51], [205, 56], [206, 8], [206, 21], [206, 45], [206, 47]], "locations_src": ["rest", "rest", "xs", "rest", "optDescr", "longOpt", "xs", "rest", "optDescr", "x", "xs", "rest", "optDescr", "shortOpt", "x", "xs", "rest", "optDescr", "a", "rest", "a", "rest"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--longOpt", "signature": "longOpt :: String -> [String] -> [OptDescr a] -> (OptKind a,[String])", "code": "longOpt ls rs optDescr = long ads arg rs\n   where (opt,arg) = break (=='=') ls\n         getWith p = [ o | o@(Option _ xs _ _) <- optDescr\n                         , find (p opt) xs /= Nothing ]\n         exact     = getWith (==)\n         options   = if null exact then getWith isPrefixOf else exact\n         ads       = [ ad | Option _ _ ad _ <- options ]\n         optStr    = (\"--\"++opt)\n\n         long (_:_:_)      _        rest     = (errAmbig options optStr,rest)\n         long [NoArg  a  ] []       rest     = (Opt a,rest)\n         long [NoArg  _  ] ('=':_)  rest     = (errNoArg optStr,rest)\n         long [ReqArg _ d] []       []       = (errReq d optStr,[])\n         long [ReqArg f _] []       (r:rest) = (Opt (f r),rest)\n         long [ReqArg f _] ('=':xs) rest     = (Opt (f xs),rest)\n         long [OptArg f _] []       rest     = (Opt (f Nothing),rest)\n         long [OptArg f _] ('=':xs) rest     = (Opt (f (Just xs)),rest)\n         long _            _        rest     = (UnreqOpt (\"--\"++ls),rest)", "poly_type": "Parametric", "dependencies": "a :: k\nisPrefixOf :: Eq a => [a] -> NonEmpty a -> Bool\nerrAmbig :: [OptDescr a] -> String -> OptKind a\nerrNoArg :: String -> OptKind a\nbreak :: (a -> Bool) -> NonEmpty a -> ([a], [a])\nerrReq :: String -> String -> OptKind a", "locations": [[210, 8], [210, 11], [210, 14], [210, 25], [210, 30], [210, 34], [210, 38], [211, 10], [211, 14], [211, 21], [211, 35], [212, 9], [212, 17], [212, 23], [212, 27], [212, 39], [212, 50], [213, 27], [213, 33], [213, 35], [213, 40], [214, 9], [214, 21], [215, 9], [215, 24], [215, 29], [215, 40], [215, 48], [215, 64], [216, 9], [216, 23], [216, 39], [216, 47], [217, 9], [217, 28], [219, 9], [219, 36], [219, 48], [219, 57], [219, 65], [219, 72], [220, 9], [220, 22], [220, 36], [220, 52], [220, 54], [221, 9], [221, 36], [221, 48], [221, 57], [221, 64], [222, 9], [222, 24], [222, 48], [222, 55], [222, 57], [223, 9], [223, 22], [223, 37], [223, 39], [223, 53], [223, 55], [223, 58], [224, 9], [224, 22], [224, 32], [224, 36], [224, 53], [224, 55], [224, 59], [225, 9], [225, 22], [225, 36], [225, 53], [225, 64], [226, 9], [226, 22], [226, 32], [226, 36], [226, 53], [226, 61], [226, 66], [227, 9], [227, 36], [227, 64], [227, 68], [211, 28], [213, 43], [214, 30], [217, 26], [227, 62]], "locations_src": ["ls", "rs", "optDescr", "long", "ads", "arg", "rs", "opt", "arg", "break", "ls", "getWith", "p", "o", "o", "xs", "optDescr", "find", "p", "opt", "xs", "exact", "getWith", "options", "null", "exact", "getWith", "isPrefixOf", "exact", "ads", "ad", "ad", "options", "optStr", "opt", "long", "rest", "errAmbig", "options", "optStr", "rest", "long", "a", "rest", "a", "rest", "long", "rest", "errNoArg", "optStr", "rest", "long", "d", "errReq", "d", "optStr", "long", "f", "r", "rest", "f", "r", "rest", "long", "f", "xs", "rest", "f", "xs", "rest", "long", "f", "rest", "f", "rest", "long", "f", "xs", "rest", "f", "xs", "rest", "long", "rest", "ls", "rest", "==", "/=", "==", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--shortOpt", "signature": "shortOpt :: Char -> String -> [String] -> [OptDescr a] -> (OptKind a,[String])", "code": "shortOpt y ys rs optDescr = short ads ys rs\n  where options = [ o  | o@(Option ss _ _ _) <- optDescr, s <- ss, y == s ]\n        ads     = [ ad | Option _ _ ad _ <- options ]\n        optStr  = '-':[y]\n\n        short (_:_:_)        _  rest     = (errAmbig options optStr,rest)\n        short (NoArg  a  :_) [] rest     = (Opt a,rest)\n        short (NoArg  a  :_) xs rest     = (Opt a,('-':xs):rest)\n        short (ReqArg _ d:_) [] []       = (errReq d optStr,[])\n        short (ReqArg f _:_) [] (r:rest) = (Opt (f r),rest)\n        short (ReqArg f _:_) xs rest     = (Opt (f xs),rest)\n        short (OptArg f _:_) [] rest     = (Opt (f Nothing),rest)\n        short (OptArg f _:_) xs rest     = (Opt (f (Just xs)),rest)\n        short []             [] rest     = (UnreqOpt optStr,rest)\n        short []             xs rest     = (UnreqOpt optStr,('-':xs):rest)", "poly_type": "Parametric", "dependencies": "a :: k\nerrAmbig :: [OptDescr a] -> String -> OptKind a\nerrReq :: String -> String -> OptKind a", "locations": [[231, 9], [231, 11], [231, 14], [231, 17], [231, 28], [231, 34], [231, 38], [231, 41], [232, 8], [232, 20], [232, 25], [232, 35], [232, 48], [232, 58], [232, 63], [232, 67], [232, 72], [233, 8], [233, 20], [233, 36], [233, 44], [234, 8], [234, 23], [236, 8], [236, 32], [236, 44], [236, 53], [236, 61], [236, 68], [237, 8], [237, 22], [237, 32], [237, 48], [237, 50], [238, 8], [238, 22], [238, 29], [238, 32], [238, 48], [238, 55], [238, 59], [239, 8], [239, 24], [239, 44], [239, 51], [239, 53], [240, 8], [240, 22], [240, 33], [240, 35], [240, 49], [240, 51], [240, 54], [241, 8], [241, 22], [241, 29], [241, 32], [241, 49], [241, 51], [241, 55], [242, 8], [242, 22], [242, 32], [242, 49], [242, 60], [243, 8], [243, 22], [243, 29], [243, 32], [243, 49], [243, 57], [243, 62], [244, 8], [244, 32], [244, 53], [244, 60], [245, 8], [245, 29], [245, 32], [245, 53], [245, 65], [245, 69], [232, 69]], "locations_src": ["y", "ys", "rs", "optDescr", "short", "ads", "ys", "rs", "options", "o", "o", "ss", "optDescr", "s", "ss", "y", "s", "ads", "ad", "ad", "options", "optStr", "y", "short", "rest", "errAmbig", "options", "optStr", "rest", "short", "a", "rest", "a", "rest", "short", "a", "xs", "rest", "a", "xs", "rest", "short", "d", "errReq", "d", "optStr", "short", "f", "r", "rest", "f", "r", "rest", "short", "f", "xs", "rest", "f", "xs", "rest", "short", "f", "rest", "f", "rest", "short", "f", "xs", "rest", "f", "xs", "rest", "short", "rest", "optStr", "rest", "short", "xs", "rest", "optStr", "xs", "rest", "=="]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--errAmbig", "signature": "errAmbig :: [OptDescr a] -> String -> OptKind a", "code": "errAmbig ods optStr = OptErr (usageInfo header ods)\n   where header = \"option `\" ++ optStr ++ \"' is ambiguous; could be one of:\"", "poly_type": "Parametric", "dependencies": "usageInfo :: String                    -- header\n          -> [OptDescr a]              -- option descriptors\n          -> String", "locations": [[250, 9], [250, 13], [250, 30], [250, 40], [250, 47], [251, 9], [251, 32], [251, 29], [251, 39]], "locations_src": ["ods", "optStr", "usageInfo", "header", "ods", "header", "optStr", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--errReq", "signature": "errReq :: String -> String -> OptKind a", "code": "errReq d optStr = OptErr (\"option `\" ++ optStr ++ \"' requires an argument \" ++ d ++ \"\\n\")", "poly_type": "Parametric", "dependencies": "", "locations": [[254, 7], [254, 9], [254, 40], [254, 79], [254, 37], [254, 47], [254, 76], [254, 81]], "locations_src": ["d", "optStr", "optStr", "d", "++", "++", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--errUnrec", "signature": "errUnrec :: String -> String", "code": "errUnrec optStr = \"unrecognized option `\" ++ optStr ++ \"'\\n\"", "poly_type": "Monomorphic", "dependencies": "", "locations": [[257, 9], [257, 45], [257, 42], [257, 52]], "locations_src": ["optStr", "optStr", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/Console/GetOpt.hs--errNoArg", "signature": "errNoArg :: String -> OptKind a", "code": "errNoArg optStr = OptErr (\"option `\" ++ optStr ++ \"' doesn't allow an argument\\n\")", "poly_type": "Parametric", "dependencies": "", "locations": [[260, 9], [260, 40], [260, 37], [260, 47]], "locations_src": ["optStr", "optStr", "++", "++"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/IO/Unsafe.hs--unsafeFixIO", "signature": "unsafeFixIO :: (a -> IO a) -> IO a", "code": "unsafeFixIO k = do\n  ref <- newIORef (throw NonTermination)\n  ans <- unsafeDupableInterleaveIO (readIORef ref)\n  result <- k ans\n  writeIORef ref result\n  return result", "poly_type": "Parametric", "dependencies": "", "locations": [[44, 12], [45, 2], [45, 9], [45, 19], [46, 2], [46, 9], [46, 36], [46, 46], [47, 2], [47, 12], [47, 14], [48, 2], [48, 13], [48, 17], [49, 2], [49, 9]], "locations_src": ["k", "ref", "newIORef", "throw", "ans", "unsafeDupableInterleaveIO", "readIORef", "ref", "result", "k", "ans", "writeIORef", "ref", "result", "return", "result"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/CPUTime/Utils.hs--cClockToInteger", "signature": "cClockToInteger :: CClock -> Integer", "code": "cClockToInteger (CClock n) = fromIntegral n", "poly_type": "Monomorphic", "dependencies": "", "locations": [[14, 24], [14, 29], [14, 42]], "locations_src": ["n", "fromIntegral", "n"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/CPUTime/Utils.hs--cTimeToInteger", "signature": "cTimeToInteger :: CTime -> Integer", "code": "cTimeToInteger (CTime n) = fromIntegral n", "poly_type": "Monomorphic", "dependencies": "", "locations": [[17, 22], [17, 27], [17, 40]], "locations_src": ["n", "fromIntegral", "n"]}
{"task_id": "data/repos/base-4.20.0.0/src/System/CPUTime/Utils.hs--csuSecondsToInteger", "signature": "csuSecondsToInteger :: CSUSeconds -> Integer", "code": "csuSecondsToInteger (CSUSeconds n) = fromIntegral n", "poly_type": "Monomorphic", "dependencies": "", "locations": [[20, 32], [20, 37], [20, 50]], "locations_src": ["n", "fromIntegral", "n"]}